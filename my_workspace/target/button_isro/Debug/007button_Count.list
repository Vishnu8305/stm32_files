
007button_Count.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e4  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000368  08000368  00002018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000368  08000368  00002018  2**0
                  CONTENTS
  4 .ARM          00000000  08000368  08000368  00002018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000368  08000368  00002018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000368  08000368  00001368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800036c  0800036c  0000136c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08000370  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00002018  2**0
                  CONTENTS
 10 .bss          0000001c  20000018  20000018  00002018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000034  20000034  00002018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000165  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000b3  00000000  00000000  000021ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000060  00000000  00000000  00002260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000003f  00000000  00000000  000022c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f70  00000000  00000000  000022ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000500  00000000  00000000  0000326f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003c73  00000000  00000000  0000376f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000073e2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000b8  00000000  00000000  00007428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  000074e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000018 	.word	0x20000018
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08000350 	.word	0x08000350

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	2000001c 	.word	0x2000001c
 80001c0:	08000350 	.word	0x08000350

080001c4 <button_init>:
uint32_t *pGPIOAOutReg          = (uint32_t*)(0x48000000 + 0x14);   // GPIOA output data register (for PA0)
uint32_t *pGPIOCModeReg         = (uint32_t*)(0x48000800 + 0x00);   // GPIOC mode register (for PC13)
uint32_t *pGPIOCPullUpReg       = (uint32_t*)(0x48000800 + 0x0C);   // GPIOC Pull-up/Pull-down Register
uint32_t *pGPIOCInReg           = (uint32_t*)(0x48000800 + 0x10);   // GPIOC input data register (for PC13)

void button_init(void) {
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
    // Enable the clock for GPIOC (PC13) and GPIOA (PA0)
    *pClkCtrlReg |= (1 << 0);  // Enable GPIOA clock
 80001c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000234 <button_init+0x70>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	681a      	ldr	r2, [r3, #0]
 80001ce:	4b19      	ldr	r3, [pc, #100]	@ (8000234 <button_init+0x70>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	f042 0201 	orr.w	r2, r2, #1
 80001d6:	601a      	str	r2, [r3, #0]
    *pClkCtrlReg |= (1 << 2);  // Enable GPIOC clock
 80001d8:	4b16      	ldr	r3, [pc, #88]	@ (8000234 <button_init+0x70>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	681a      	ldr	r2, [r3, #0]
 80001de:	4b15      	ldr	r3, [pc, #84]	@ (8000234 <button_init+0x70>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f042 0204 	orr.w	r2, r2, #4
 80001e6:	601a      	str	r2, [r3, #0]

    // Set PA0 as output (LED)
    *pGPIOAModeReg &= ~(3 << (0 * 2));  // Clear mode for PA0
 80001e8:	4b13      	ldr	r3, [pc, #76]	@ (8000238 <button_init+0x74>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	681a      	ldr	r2, [r3, #0]
 80001ee:	4b12      	ldr	r3, [pc, #72]	@ (8000238 <button_init+0x74>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f022 0203 	bic.w	r2, r2, #3
 80001f6:	601a      	str	r2, [r3, #0]
    *pGPIOAModeReg |= (1 << (0 * 2));   // Set PA0 as output
 80001f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000238 <button_init+0x74>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000238 <button_init+0x74>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f042 0201 	orr.w	r2, r2, #1
 8000206:	601a      	str	r2, [r3, #0]

    // Set PC13 as input (button)
    *pGPIOCModeReg &= ~(3 << (13 * 2));  // Set PC13 as input
 8000208:	4b0c      	ldr	r3, [pc, #48]	@ (800023c <button_init+0x78>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	681a      	ldr	r2, [r3, #0]
 800020e:	4b0b      	ldr	r3, [pc, #44]	@ (800023c <button_init+0x78>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8000216:	601a      	str	r2, [r3, #0]

    // Enable internal pull-up for PC13
    *pGPIOCPullUpReg |= (1 << 13);  // Enable pull-up for PC13
 8000218:	4b09      	ldr	r3, [pc, #36]	@ (8000240 <button_init+0x7c>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	681a      	ldr	r2, [r3, #0]
 800021e:	4b08      	ldr	r3, [pc, #32]	@ (8000240 <button_init+0x7c>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000226:	601a      	str	r2, [r3, #0]
}
 8000228:	bf00      	nop
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	20000000 	.word	0x20000000
 8000238:	20000004 	.word	0x20000004
 800023c:	2000000c 	.word	0x2000000c
 8000240:	20000010 	.word	0x20000010

08000244 <led_on>:

void led_on(void) {
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
    *pGPIOAOutReg |= (1 << 0);  // Set PA0 high (LED ON)
 8000248:	4b06      	ldr	r3, [pc, #24]	@ (8000264 <led_on+0x20>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	4b05      	ldr	r3, [pc, #20]	@ (8000264 <led_on+0x20>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f042 0201 	orr.w	r2, r2, #1
 8000256:	601a      	str	r2, [r3, #0]
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	20000008 	.word	0x20000008

08000268 <led_off>:

void led_off(void) {
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
    *pGPIOAOutReg &= ~(1 << 0);  // Set PA0 low (LED OFF)
 800026c:	4b06      	ldr	r3, [pc, #24]	@ (8000288 <led_off+0x20>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	681a      	ldr	r2, [r3, #0]
 8000272:	4b05      	ldr	r3, [pc, #20]	@ (8000288 <led_off+0x20>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f022 0201 	bic.w	r2, r2, #1
 800027a:	601a      	str	r2, [r3, #0]
}
 800027c:	bf00      	nop
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	20000008 	.word	0x20000008

0800028c <main>:

int main(void) {
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
    button_init();
 8000290:	f7ff ff98 	bl	80001c4 <button_init>

    while(1) {
        // Read the button state (PC13)
        if (!(*pGPIOCInReg & (1 << 13))) {  // If PC13 is low (button pressed)
 8000294:	4b06      	ldr	r3, [pc, #24]	@ (80002b0 <main+0x24>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d102      	bne.n	80002a8 <main+0x1c>
            led_on();  // Turn the LED on
 80002a2:	f7ff ffcf 	bl	8000244 <led_on>
 80002a6:	e7f5      	b.n	8000294 <main+0x8>
        } else {
            led_off();  // Turn the LED off
 80002a8:	f7ff ffde 	bl	8000268 <led_off>
        if (!(*pGPIOCInReg & (1 << 13))) {  // If PC13 is low (button pressed)
 80002ac:	e7f2      	b.n	8000294 <main+0x8>
 80002ae:	bf00      	nop
 80002b0:	20000014 	.word	0x20000014

080002b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b4:	480d      	ldr	r0, [pc, #52]	@ (80002ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002bc:	480c      	ldr	r0, [pc, #48]	@ (80002f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80002be:	490d      	ldr	r1, [pc, #52]	@ (80002f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c0:	4a0d      	ldr	r2, [pc, #52]	@ (80002f8 <LoopForever+0xe>)
  movs r3, #0
 80002c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c4:	e002      	b.n	80002cc <LoopCopyDataInit>

080002c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ca:	3304      	adds	r3, #4

080002cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d0:	d3f9      	bcc.n	80002c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d2:	4a0a      	ldr	r2, [pc, #40]	@ (80002fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000300 <LoopForever+0x16>)
  movs r3, #0
 80002d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d8:	e001      	b.n	80002de <LoopFillZerobss>

080002da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002dc:	3204      	adds	r2, #4

080002de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e0:	d3fb      	bcc.n	80002da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002e2:	f000 f811 	bl	8000308 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002e6:	f7ff ffd1 	bl	800028c <main>

080002ea <LoopForever>:

LoopForever:
  b LoopForever
 80002ea:	e7fe      	b.n	80002ea <LoopForever>
  ldr   r0, =_estack
 80002ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80002f8:	08000370 	.word	0x08000370
  ldr r2, =_sbss
 80002fc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000300:	20000034 	.word	0x20000034

08000304 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000304:	e7fe      	b.n	8000304 <ADC1_2_IRQHandler>
	...

08000308 <__libc_init_array>:
 8000308:	b570      	push	{r4, r5, r6, lr}
 800030a:	4d0d      	ldr	r5, [pc, #52]	@ (8000340 <__libc_init_array+0x38>)
 800030c:	4c0d      	ldr	r4, [pc, #52]	@ (8000344 <__libc_init_array+0x3c>)
 800030e:	1b64      	subs	r4, r4, r5
 8000310:	10a4      	asrs	r4, r4, #2
 8000312:	2600      	movs	r6, #0
 8000314:	42a6      	cmp	r6, r4
 8000316:	d109      	bne.n	800032c <__libc_init_array+0x24>
 8000318:	4d0b      	ldr	r5, [pc, #44]	@ (8000348 <__libc_init_array+0x40>)
 800031a:	4c0c      	ldr	r4, [pc, #48]	@ (800034c <__libc_init_array+0x44>)
 800031c:	f000 f818 	bl	8000350 <_init>
 8000320:	1b64      	subs	r4, r4, r5
 8000322:	10a4      	asrs	r4, r4, #2
 8000324:	2600      	movs	r6, #0
 8000326:	42a6      	cmp	r6, r4
 8000328:	d105      	bne.n	8000336 <__libc_init_array+0x2e>
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000330:	4798      	blx	r3
 8000332:	3601      	adds	r6, #1
 8000334:	e7ee      	b.n	8000314 <__libc_init_array+0xc>
 8000336:	f855 3b04 	ldr.w	r3, [r5], #4
 800033a:	4798      	blx	r3
 800033c:	3601      	adds	r6, #1
 800033e:	e7f2      	b.n	8000326 <__libc_init_array+0x1e>
 8000340:	08000368 	.word	0x08000368
 8000344:	08000368 	.word	0x08000368
 8000348:	08000368 	.word	0x08000368
 800034c:	0800036c 	.word	0x0800036c

08000350 <_init>:
 8000350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000352:	bf00      	nop
 8000354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000356:	bc08      	pop	{r3}
 8000358:	469e      	mov	lr, r3
 800035a:	4770      	bx	lr

0800035c <_fini>:
 800035c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800035e:	bf00      	nop
 8000360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000362:	bc08      	pop	{r3}
 8000364:	469e      	mov	lr, r3
 8000366:	4770      	bx	lr
