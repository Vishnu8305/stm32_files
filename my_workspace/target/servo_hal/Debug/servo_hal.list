
servo_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029e4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002b6c  08002b6c  00003b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bac  08002bac  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002bac  08002bac  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bac  08002bac  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bac  08002bac  00003bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002bb0  08002bb0  00003bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002bb4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08002bc0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002bc0  000040c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009767  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016f0  00000000  00000000  0000d7a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  0000ee98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a0  00000000  00000000  0000f9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000251f1  00000000  00000000  00010268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000baf4  00000000  00000000  00035459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8f5d  00000000  00000000  00040f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129eaa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e64  00000000  00000000  00129ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0012cd54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002b54 	.word	0x08002b54

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002b54 	.word	0x08002b54

080001c8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001cc:	f000 fada 	bl	8000784 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001d0:	f000 f844 	bl	800025c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001d4:	f000 f984 	bl	80004e0 <MX_GPIO_Init>
	MX_TIM2_Init();
 80001d8:	f000 f892 	bl	8000300 <MX_TIM2_Init>
	MX_TIM3_Init();
 80001dc:	f000 f908 	bl	80003f0 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80001e0:	2100      	movs	r1, #0
 80001e2:	481c      	ldr	r0, [pc, #112]	@ (8000254 <main+0x8c>)
 80001e4:	f001 fce2 	bl	8001bac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80001e8:	2108      	movs	r1, #8
 80001ea:	481b      	ldr	r0, [pc, #108]	@ (8000258 <main+0x90>)
 80001ec:	f001 fcde 	bl	8001bac <HAL_TIM_PWM_Start>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 50); // 1 ms pulse
 80001f0:	4b18      	ldr	r3, [pc, #96]	@ (8000254 <main+0x8c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	2232      	movs	r2, #50	@ 0x32
 80001f6:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(1000);
 80001f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001fc:	f000 fb3e 	bl	800087c <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 50); // 1 ms pulse
 8000200:	4b15      	ldr	r3, [pc, #84]	@ (8000258 <main+0x90>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	2232      	movs	r2, #50	@ 0x32
 8000206:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_Delay(1000);
 8000208:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800020c:	f000 fb36 	bl	800087c <HAL_Delay>
		// Set servo to 90 degrees (1.5 ms pulse)
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 75); // 1.5 ms pulse
 8000210:	4b10      	ldr	r3, [pc, #64]	@ (8000254 <main+0x8c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	224b      	movs	r2, #75	@ 0x4b
 8000216:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(1000);
 8000218:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800021c:	f000 fb2e 	bl	800087c <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 75); // 1 ms pulse
 8000220:	4b0d      	ldr	r3, [pc, #52]	@ (8000258 <main+0x90>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	224b      	movs	r2, #75	@ 0x4b
 8000226:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_Delay(1000);
 8000228:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800022c:	f000 fb26 	bl	800087c <HAL_Delay>

		// Set servo to 180 degrees (2 ms pulse)
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 100); // 2 ms pulse
 8000230:	4b08      	ldr	r3, [pc, #32]	@ (8000254 <main+0x8c>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	2264      	movs	r2, #100	@ 0x64
 8000236:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(1000);
 8000238:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800023c:	f000 fb1e 	bl	800087c <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 100); // 1 ms pulse
 8000240:	4b05      	ldr	r3, [pc, #20]	@ (8000258 <main+0x90>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2264      	movs	r2, #100	@ 0x64
 8000246:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_Delay(1000);
 8000248:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800024c:	f000 fb16 	bl	800087c <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 50); // 1 ms pulse
 8000250:	bf00      	nop
 8000252:	e7cd      	b.n	80001f0 <main+0x28>
 8000254:	20000028 	.word	0x20000028
 8000258:	20000074 	.word	0x20000074

0800025c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800025c:	b580      	push	{r7, lr}
 800025e:	b096      	sub	sp, #88	@ 0x58
 8000260:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000262:	f107 0314 	add.w	r3, r7, #20
 8000266:	2244      	movs	r2, #68	@ 0x44
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f002 fc46 	bl	8002afc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000270:	463b      	mov	r3, r7
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]
 800027c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800027e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000282:	f000 fdbd 	bl	8000e00 <HAL_PWREx_ControlVoltageScaling>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 800028c:	f000 f958 	bl	8000540 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000290:	2302      	movs	r3, #2
 8000292:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000294:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000298:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029a:	2310      	movs	r3, #16
 800029c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029e:	2302      	movs	r3, #2
 80002a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002a2:	2302      	movs	r3, #2
 80002a4:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80002a6:	2301      	movs	r3, #1
 80002a8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 20;
 80002aa:	2314      	movs	r3, #20
 80002ac:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002ae:	2307      	movs	r3, #7
 80002b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002b2:	2302      	movs	r3, #2
 80002b4:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80002b6:	2304      	movs	r3, #4
 80002b8:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80002ba:	f107 0314 	add.w	r3, r7, #20
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 fdf4 	bl	8000eac <HAL_RCC_OscConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x72>
		Error_Handler();
 80002ca:	f000 f939 	bl	8000540 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002ce:	230f      	movs	r3, #15
 80002d0:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d2:	2303      	movs	r3, #3
 80002d4:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80002e2:	463b      	mov	r3, r7
 80002e4:	2104      	movs	r1, #4
 80002e6:	4618      	mov	r0, r3
 80002e8:	f001 f9bc 	bl	8001664 <HAL_RCC_ClockConfig>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x9a>
		Error_Handler();
 80002f2:	f000 f925 	bl	8000540 <Error_Handler>
	}
}
 80002f6:	bf00      	nop
 80002f8:	3758      	adds	r7, #88	@ 0x58
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
	...

08000300 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b08e      	sub	sp, #56	@ 0x38
 8000304:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000306:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000314:	f107 031c 	add.w	r3, r7, #28
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	605a      	str	r2, [r3, #4]
 800031e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000320:	463b      	mov	r3, r7
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]
 800032c:	611a      	str	r2, [r3, #16]
 800032e:	615a      	str	r2, [r3, #20]
 8000330:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000332:	4b2e      	ldr	r3, [pc, #184]	@ (80003ec <MX_TIM2_Init+0xec>)
 8000334:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000338:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1599;
 800033a:	4b2c      	ldr	r3, [pc, #176]	@ (80003ec <MX_TIM2_Init+0xec>)
 800033c:	f240 623f 	movw	r2, #1599	@ 0x63f
 8000340:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000342:	4b2a      	ldr	r3, [pc, #168]	@ (80003ec <MX_TIM2_Init+0xec>)
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 8000348:	4b28      	ldr	r3, [pc, #160]	@ (80003ec <MX_TIM2_Init+0xec>)
 800034a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800034e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000350:	4b26      	ldr	r3, [pc, #152]	@ (80003ec <MX_TIM2_Init+0xec>)
 8000352:	2200      	movs	r2, #0
 8000354:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000356:	4b25      	ldr	r3, [pc, #148]	@ (80003ec <MX_TIM2_Init+0xec>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800035c:	4823      	ldr	r0, [pc, #140]	@ (80003ec <MX_TIM2_Init+0xec>)
 800035e:	f001 fb6d 	bl	8001a3c <HAL_TIM_Base_Init>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_TIM2_Init+0x6c>
		Error_Handler();
 8000368:	f000 f8ea 	bl	8000540 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800036c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000370:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000372:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000376:	4619      	mov	r1, r3
 8000378:	481c      	ldr	r0, [pc, #112]	@ (80003ec <MX_TIM2_Init+0xec>)
 800037a:	f001 fe31 	bl	8001fe0 <HAL_TIM_ConfigClockSource>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_TIM2_Init+0x88>
		Error_Handler();
 8000384:	f000 f8dc 	bl	8000540 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000388:	4818      	ldr	r0, [pc, #96]	@ (80003ec <MX_TIM2_Init+0xec>)
 800038a:	f001 fbae 	bl	8001aea <HAL_TIM_PWM_Init>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_TIM2_Init+0x98>
		Error_Handler();
 8000394:	f000 f8d4 	bl	8000540 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000398:	2300      	movs	r3, #0
 800039a:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800039c:	2300      	movs	r3, #0
 800039e:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80003a0:	f107 031c 	add.w	r3, r7, #28
 80003a4:	4619      	mov	r1, r3
 80003a6:	4811      	ldr	r0, [pc, #68]	@ (80003ec <MX_TIM2_Init+0xec>)
 80003a8:	f002 fb20 	bl	80029ec <HAL_TIMEx_MasterConfigSynchronization>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_TIM2_Init+0xb6>
			!= HAL_OK) {
		Error_Handler();
 80003b2:	f000 f8c5 	bl	8000540 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003b6:	2360      	movs	r3, #96	@ 0x60
 80003b8:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80003ba:	2300      	movs	r3, #0
 80003bc:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003be:	2300      	movs	r3, #0
 80003c0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003c2:	2300      	movs	r3, #0
 80003c4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80003c6:	463b      	mov	r3, r7
 80003c8:	2200      	movs	r2, #0
 80003ca:	4619      	mov	r1, r3
 80003cc:	4807      	ldr	r0, [pc, #28]	@ (80003ec <MX_TIM2_Init+0xec>)
 80003ce:	f001 fcf3 	bl	8001db8 <HAL_TIM_PWM_ConfigChannel>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_TIM2_Init+0xdc>
			!= HAL_OK) {
		Error_Handler();
 80003d8:	f000 f8b2 	bl	8000540 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80003dc:	4803      	ldr	r0, [pc, #12]	@ (80003ec <MX_TIM2_Init+0xec>)
 80003de:	f000 f90b 	bl	80005f8 <HAL_TIM_MspPostInit>

}
 80003e2:	bf00      	nop
 80003e4:	3738      	adds	r7, #56	@ 0x38
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	20000028 	.word	0x20000028

080003f0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b08e      	sub	sp, #56	@ 0x38
 80003f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80003f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000404:	f107 031c 	add.w	r3, r7, #28
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000410:	463b      	mov	r3, r7
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
 800041c:	611a      	str	r2, [r3, #16]
 800041e:	615a      	str	r2, [r3, #20]
 8000420:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000422:	4b2d      	ldr	r3, [pc, #180]	@ (80004d8 <MX_TIM3_Init+0xe8>)
 8000424:	4a2d      	ldr	r2, [pc, #180]	@ (80004dc <MX_TIM3_Init+0xec>)
 8000426:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 1599;
 8000428:	4b2b      	ldr	r3, [pc, #172]	@ (80004d8 <MX_TIM3_Init+0xe8>)
 800042a:	f240 623f 	movw	r2, #1599	@ 0x63f
 800042e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000430:	4b29      	ldr	r3, [pc, #164]	@ (80004d8 <MX_TIM3_Init+0xe8>)
 8000432:	2200      	movs	r2, #0
 8000434:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 999;
 8000436:	4b28      	ldr	r3, [pc, #160]	@ (80004d8 <MX_TIM3_Init+0xe8>)
 8000438:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800043c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800043e:	4b26      	ldr	r3, [pc, #152]	@ (80004d8 <MX_TIM3_Init+0xe8>)
 8000440:	2200      	movs	r2, #0
 8000442:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000444:	4b24      	ldr	r3, [pc, #144]	@ (80004d8 <MX_TIM3_Init+0xe8>)
 8000446:	2200      	movs	r2, #0
 8000448:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800044a:	4823      	ldr	r0, [pc, #140]	@ (80004d8 <MX_TIM3_Init+0xe8>)
 800044c:	f001 faf6 	bl	8001a3c <HAL_TIM_Base_Init>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_TIM3_Init+0x6a>
		Error_Handler();
 8000456:	f000 f873 	bl	8000540 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800045a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800045e:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000460:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000464:	4619      	mov	r1, r3
 8000466:	481c      	ldr	r0, [pc, #112]	@ (80004d8 <MX_TIM3_Init+0xe8>)
 8000468:	f001 fdba 	bl	8001fe0 <HAL_TIM_ConfigClockSource>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_TIM3_Init+0x86>
		Error_Handler();
 8000472:	f000 f865 	bl	8000540 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000476:	4818      	ldr	r0, [pc, #96]	@ (80004d8 <MX_TIM3_Init+0xe8>)
 8000478:	f001 fb37 	bl	8001aea <HAL_TIM_PWM_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_TIM3_Init+0x96>
		Error_Handler();
 8000482:	f000 f85d 	bl	8000540 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000486:	2300      	movs	r3, #0
 8000488:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800048a:	2300      	movs	r3, #0
 800048c:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800048e:	f107 031c 	add.w	r3, r7, #28
 8000492:	4619      	mov	r1, r3
 8000494:	4810      	ldr	r0, [pc, #64]	@ (80004d8 <MX_TIM3_Init+0xe8>)
 8000496:	f002 faa9 	bl	80029ec <HAL_TIMEx_MasterConfigSynchronization>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <MX_TIM3_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 80004a0:	f000 f84e 	bl	8000540 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004a4:	2360      	movs	r3, #96	@ 0x60
 80004a6:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004ac:	2300      	movs	r3, #0
 80004ae:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004b0:	2300      	movs	r3, #0
 80004b2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 80004b4:	463b      	mov	r3, r7
 80004b6:	2208      	movs	r2, #8
 80004b8:	4619      	mov	r1, r3
 80004ba:	4807      	ldr	r0, [pc, #28]	@ (80004d8 <MX_TIM3_Init+0xe8>)
 80004bc:	f001 fc7c 	bl	8001db8 <HAL_TIM_PWM_ConfigChannel>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_TIM3_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 80004c6:	f000 f83b 	bl	8000540 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80004ca:	4803      	ldr	r0, [pc, #12]	@ (80004d8 <MX_TIM3_Init+0xe8>)
 80004cc:	f000 f894 	bl	80005f8 <HAL_TIM_MspPostInit>

}
 80004d0:	bf00      	nop
 80004d2:	3738      	adds	r7, #56	@ 0x38
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20000074 	.word	0x20000074
 80004dc:	40000400 	.word	0x40000400

080004e0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80004e6:	4b15      	ldr	r3, [pc, #84]	@ (800053c <MX_GPIO_Init+0x5c>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ea:	4a14      	ldr	r2, [pc, #80]	@ (800053c <MX_GPIO_Init+0x5c>)
 80004ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004f2:	4b12      	ldr	r3, [pc, #72]	@ (800053c <MX_GPIO_Init+0x5c>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004fe:	4b0f      	ldr	r3, [pc, #60]	@ (800053c <MX_GPIO_Init+0x5c>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000502:	4a0e      	ldr	r2, [pc, #56]	@ (800053c <MX_GPIO_Init+0x5c>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800050a:	4b0c      	ldr	r3, [pc, #48]	@ (800053c <MX_GPIO_Init+0x5c>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000516:	4b09      	ldr	r3, [pc, #36]	@ (800053c <MX_GPIO_Init+0x5c>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051a:	4a08      	ldr	r2, [pc, #32]	@ (800053c <MX_GPIO_Init+0x5c>)
 800051c:	f043 0302 	orr.w	r3, r3, #2
 8000520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000522:	4b06      	ldr	r3, [pc, #24]	@ (800053c <MX_GPIO_Init+0x5c>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000526:	f003 0302 	and.w	r3, r3, #2
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	40021000 	.word	0x40021000

08000540 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000544:	b672      	cpsid	i
}
 8000546:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000548:	bf00      	nop
 800054a:	e7fd      	b.n	8000548 <Error_Handler+0x8>

0800054c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000552:	4b0f      	ldr	r3, [pc, #60]	@ (8000590 <HAL_MspInit+0x44>)
 8000554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000556:	4a0e      	ldr	r2, [pc, #56]	@ (8000590 <HAL_MspInit+0x44>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	6613      	str	r3, [r2, #96]	@ 0x60
 800055e:	4b0c      	ldr	r3, [pc, #48]	@ (8000590 <HAL_MspInit+0x44>)
 8000560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800056a:	4b09      	ldr	r3, [pc, #36]	@ (8000590 <HAL_MspInit+0x44>)
 800056c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800056e:	4a08      	ldr	r2, [pc, #32]	@ (8000590 <HAL_MspInit+0x44>)
 8000570:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000574:	6593      	str	r3, [r2, #88]	@ 0x58
 8000576:	4b06      	ldr	r3, [pc, #24]	@ (8000590 <HAL_MspInit+0x44>)
 8000578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800057a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	40021000 	.word	0x40021000

08000594 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80005a4:	d10c      	bne.n	80005c0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005a6:	4b12      	ldr	r3, [pc, #72]	@ (80005f0 <HAL_TIM_Base_MspInit+0x5c>)
 80005a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005aa:	4a11      	ldr	r2, [pc, #68]	@ (80005f0 <HAL_TIM_Base_MspInit+0x5c>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80005b2:	4b0f      	ldr	r3, [pc, #60]	@ (80005f0 <HAL_TIM_Base_MspInit+0x5c>)
 80005b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80005be:	e010      	b.n	80005e2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a0b      	ldr	r2, [pc, #44]	@ (80005f4 <HAL_TIM_Base_MspInit+0x60>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d10b      	bne.n	80005e2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80005ca:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <HAL_TIM_Base_MspInit+0x5c>)
 80005cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005ce:	4a08      	ldr	r2, [pc, #32]	@ (80005f0 <HAL_TIM_Base_MspInit+0x5c>)
 80005d0:	f043 0302 	orr.w	r3, r3, #2
 80005d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80005d6:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <HAL_TIM_Base_MspInit+0x5c>)
 80005d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005da:	f003 0302 	and.w	r3, r3, #2
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
}
 80005e2:	bf00      	nop
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	40021000 	.word	0x40021000
 80005f4:	40000400 	.word	0x40000400

080005f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08a      	sub	sp, #40	@ 0x28
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000618:	d11d      	bne.n	8000656 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b21      	ldr	r3, [pc, #132]	@ (80006a0 <HAL_TIM_MspPostInit+0xa8>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061e:	4a20      	ldr	r2, [pc, #128]	@ (80006a0 <HAL_TIM_MspPostInit+0xa8>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000626:	4b1e      	ldr	r3, [pc, #120]	@ (80006a0 <HAL_TIM_MspPostInit+0xa8>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000632:	2320      	movs	r3, #32
 8000634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000636:	2302      	movs	r3, #2
 8000638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	2300      	movs	r3, #0
 8000640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000642:	2301      	movs	r3, #1
 8000644:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000650:	f000 fa1e 	bl	8000a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000654:	e020      	b.n	8000698 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a12      	ldr	r2, [pc, #72]	@ (80006a4 <HAL_TIM_MspPostInit+0xac>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d11b      	bne.n	8000698 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <HAL_TIM_MspPostInit+0xa8>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000664:	4a0e      	ldr	r2, [pc, #56]	@ (80006a0 <HAL_TIM_MspPostInit+0xa8>)
 8000666:	f043 0302 	orr.w	r3, r3, #2
 800066a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <HAL_TIM_MspPostInit+0xa8>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000670:	f003 0302 	and.w	r3, r3, #2
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000678:	2301      	movs	r3, #1
 800067a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067c:	2302      	movs	r3, #2
 800067e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000688:	2302      	movs	r3, #2
 800068a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4619      	mov	r1, r3
 8000692:	4805      	ldr	r0, [pc, #20]	@ (80006a8 <HAL_TIM_MspPostInit+0xb0>)
 8000694:	f000 f9fc 	bl	8000a90 <HAL_GPIO_Init>
}
 8000698:	bf00      	nop
 800069a:	3728      	adds	r7, #40	@ 0x28
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40000400 	.word	0x40000400
 80006a8:	48000400 	.word	0x48000400

080006ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <NMI_Handler+0x4>

080006b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <HardFault_Handler+0x4>

080006bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c0:	bf00      	nop
 80006c2:	e7fd      	b.n	80006c0 <MemManage_Handler+0x4>

080006c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <BusFault_Handler+0x4>

080006cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <UsageFault_Handler+0x4>

080006d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000702:	f000 f89b 	bl	800083c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000710:	4b06      	ldr	r3, [pc, #24]	@ (800072c <SystemInit+0x20>)
 8000712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000716:	4a05      	ldr	r2, [pc, #20]	@ (800072c <SystemInit+0x20>)
 8000718:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800071c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000730:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000768 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000734:	f7ff ffea 	bl	800070c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000738:	480c      	ldr	r0, [pc, #48]	@ (800076c <LoopForever+0x6>)
  ldr r1, =_edata
 800073a:	490d      	ldr	r1, [pc, #52]	@ (8000770 <LoopForever+0xa>)
  ldr r2, =_sidata
 800073c:	4a0d      	ldr	r2, [pc, #52]	@ (8000774 <LoopForever+0xe>)
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000740:	e002      	b.n	8000748 <LoopCopyDataInit>

08000742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000746:	3304      	adds	r3, #4

08000748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800074c:	d3f9      	bcc.n	8000742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074e:	4a0a      	ldr	r2, [pc, #40]	@ (8000778 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000750:	4c0a      	ldr	r4, [pc, #40]	@ (800077c <LoopForever+0x16>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000754:	e001      	b.n	800075a <LoopFillZerobss>

08000756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000758:	3204      	adds	r2, #4

0800075a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800075c:	d3fb      	bcc.n	8000756 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800075e:	f002 f9d5 	bl	8002b0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000762:	f7ff fd31 	bl	80001c8 <main>

08000766 <LoopForever>:

LoopForever:
    b LoopForever
 8000766:	e7fe      	b.n	8000766 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000768:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800076c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000770:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000774:	08002bb4 	.word	0x08002bb4
  ldr r2, =_sbss
 8000778:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800077c:	200000c4 	.word	0x200000c4

08000780 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000780:	e7fe      	b.n	8000780 <ADC1_2_IRQHandler>
	...

08000784 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800078a:	2300      	movs	r3, #0
 800078c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800078e:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <HAL_Init+0x3c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a0b      	ldr	r2, [pc, #44]	@ (80007c0 <HAL_Init+0x3c>)
 8000794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000798:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800079a:	2003      	movs	r0, #3
 800079c:	f000 f944 	bl	8000a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007a0:	2000      	movs	r0, #0
 80007a2:	f000 f80f 	bl	80007c4 <HAL_InitTick>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d002      	beq.n	80007b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80007ac:	2301      	movs	r3, #1
 80007ae:	71fb      	strb	r3, [r7, #7]
 80007b0:	e001      	b.n	80007b6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007b2:	f7ff fecb 	bl	800054c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007b6:	79fb      	ldrb	r3, [r7, #7]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40022000 	.word	0x40022000

080007c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007cc:	2300      	movs	r3, #0
 80007ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007d0:	4b17      	ldr	r3, [pc, #92]	@ (8000830 <HAL_InitTick+0x6c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d023      	beq.n	8000820 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007d8:	4b16      	ldr	r3, [pc, #88]	@ (8000834 <HAL_InitTick+0x70>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <HAL_InitTick+0x6c>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4619      	mov	r1, r3
 80007e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 f941 	bl	8000a76 <HAL_SYSTICK_Config>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d10f      	bne.n	800081a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b0f      	cmp	r3, #15
 80007fe:	d809      	bhi.n	8000814 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000800:	2200      	movs	r2, #0
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	f04f 30ff 	mov.w	r0, #4294967295
 8000808:	f000 f919 	bl	8000a3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800080c:	4a0a      	ldr	r2, [pc, #40]	@ (8000838 <HAL_InitTick+0x74>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6013      	str	r3, [r2, #0]
 8000812:	e007      	b.n	8000824 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000814:	2301      	movs	r3, #1
 8000816:	73fb      	strb	r3, [r7, #15]
 8000818:	e004      	b.n	8000824 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	73fb      	strb	r3, [r7, #15]
 800081e:	e001      	b.n	8000824 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000820:	2301      	movs	r3, #1
 8000822:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000824:	7bfb      	ldrb	r3, [r7, #15]
}
 8000826:	4618      	mov	r0, r3
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000008 	.word	0x20000008
 8000834:	20000000 	.word	0x20000000
 8000838:	20000004 	.word	0x20000004

0800083c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <HAL_IncTick+0x20>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <HAL_IncTick+0x24>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4413      	add	r3, r2
 800084c:	4a04      	ldr	r2, [pc, #16]	@ (8000860 <HAL_IncTick+0x24>)
 800084e:	6013      	str	r3, [r2, #0]
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	20000008 	.word	0x20000008
 8000860:	200000c0 	.word	0x200000c0

08000864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return uwTick;
 8000868:	4b03      	ldr	r3, [pc, #12]	@ (8000878 <HAL_GetTick+0x14>)
 800086a:	681b      	ldr	r3, [r3, #0]
}
 800086c:	4618      	mov	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	200000c0 	.word	0x200000c0

0800087c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000884:	f7ff ffee 	bl	8000864 <HAL_GetTick>
 8000888:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000894:	d005      	beq.n	80008a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000896:	4b0a      	ldr	r3, [pc, #40]	@ (80008c0 <HAL_Delay+0x44>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	461a      	mov	r2, r3
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	4413      	add	r3, r2
 80008a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008a2:	bf00      	nop
 80008a4:	f7ff ffde 	bl	8000864 <HAL_GetTick>
 80008a8:	4602      	mov	r2, r0
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d8f7      	bhi.n	80008a4 <HAL_Delay+0x28>
  {
  }
}
 80008b4:	bf00      	nop
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000008 	.word	0x20000008

080008c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <__NVIC_SetPriorityGrouping+0x44>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008da:	68ba      	ldr	r2, [r7, #8]
 80008dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008e0:	4013      	ands	r3, r2
 80008e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008f6:	4a04      	ldr	r2, [pc, #16]	@ (8000908 <__NVIC_SetPriorityGrouping+0x44>)
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	60d3      	str	r3, [r2, #12]
}
 80008fc:	bf00      	nop
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000910:	4b04      	ldr	r3, [pc, #16]	@ (8000924 <__NVIC_GetPriorityGrouping+0x18>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	0a1b      	lsrs	r3, r3, #8
 8000916:	f003 0307 	and.w	r3, r3, #7
}
 800091a:	4618      	mov	r0, r3
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	6039      	str	r1, [r7, #0]
 8000932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000938:	2b00      	cmp	r3, #0
 800093a:	db0a      	blt.n	8000952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	b2da      	uxtb	r2, r3
 8000940:	490c      	ldr	r1, [pc, #48]	@ (8000974 <__NVIC_SetPriority+0x4c>)
 8000942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000946:	0112      	lsls	r2, r2, #4
 8000948:	b2d2      	uxtb	r2, r2
 800094a:	440b      	add	r3, r1
 800094c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000950:	e00a      	b.n	8000968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4908      	ldr	r1, [pc, #32]	@ (8000978 <__NVIC_SetPriority+0x50>)
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	f003 030f 	and.w	r3, r3, #15
 800095e:	3b04      	subs	r3, #4
 8000960:	0112      	lsls	r2, r2, #4
 8000962:	b2d2      	uxtb	r2, r2
 8000964:	440b      	add	r3, r1
 8000966:	761a      	strb	r2, [r3, #24]
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	e000e100 	.word	0xe000e100
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800097c:	b480      	push	{r7}
 800097e:	b089      	sub	sp, #36	@ 0x24
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	f1c3 0307 	rsb	r3, r3, #7
 8000996:	2b04      	cmp	r3, #4
 8000998:	bf28      	it	cs
 800099a:	2304      	movcs	r3, #4
 800099c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3304      	adds	r3, #4
 80009a2:	2b06      	cmp	r3, #6
 80009a4:	d902      	bls.n	80009ac <NVIC_EncodePriority+0x30>
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	3b03      	subs	r3, #3
 80009aa:	e000      	b.n	80009ae <NVIC_EncodePriority+0x32>
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b0:	f04f 32ff 	mov.w	r2, #4294967295
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43da      	mvns	r2, r3
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	401a      	ands	r2, r3
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c4:	f04f 31ff 	mov.w	r1, #4294967295
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	fa01 f303 	lsl.w	r3, r1, r3
 80009ce:	43d9      	mvns	r1, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d4:	4313      	orrs	r3, r2
         );
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3724      	adds	r7, #36	@ 0x24
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
	...

080009e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009f4:	d301      	bcc.n	80009fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009f6:	2301      	movs	r3, #1
 80009f8:	e00f      	b.n	8000a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000a24 <SysTick_Config+0x40>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a02:	210f      	movs	r1, #15
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295
 8000a08:	f7ff ff8e 	bl	8000928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a0c:	4b05      	ldr	r3, [pc, #20]	@ (8000a24 <SysTick_Config+0x40>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a12:	4b04      	ldr	r3, [pc, #16]	@ (8000a24 <SysTick_Config+0x40>)
 8000a14:	2207      	movs	r2, #7
 8000a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	e000e010 	.word	0xe000e010

08000a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff ff47 	bl	80008c4 <__NVIC_SetPriorityGrouping>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b086      	sub	sp, #24
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	4603      	mov	r3, r0
 8000a46:	60b9      	str	r1, [r7, #8]
 8000a48:	607a      	str	r2, [r7, #4]
 8000a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a50:	f7ff ff5c 	bl	800090c <__NVIC_GetPriorityGrouping>
 8000a54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	68b9      	ldr	r1, [r7, #8]
 8000a5a:	6978      	ldr	r0, [r7, #20]
 8000a5c:	f7ff ff8e 	bl	800097c <NVIC_EncodePriority>
 8000a60:	4602      	mov	r2, r0
 8000a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a66:	4611      	mov	r1, r2
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff5d 	bl	8000928 <__NVIC_SetPriority>
}
 8000a6e:	bf00      	nop
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff ffb0 	bl	80009e4 <SysTick_Config>
 8000a84:	4603      	mov	r3, r0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b087      	sub	sp, #28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a9e:	e17f      	b.n	8000da0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aac:	4013      	ands	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f000 8171 	beq.w	8000d9a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f003 0303 	and.w	r3, r3, #3
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d005      	beq.n	8000ad0 <HAL_GPIO_Init+0x40>
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f003 0303 	and.w	r3, r3, #3
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d130      	bne.n	8000b32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	2203      	movs	r2, #3
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	68da      	ldr	r2, [r3, #12]
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b06:	2201      	movs	r2, #1
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	4013      	ands	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	091b      	lsrs	r3, r3, #4
 8000b1c:	f003 0201 	and.w	r2, r3, #1
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f003 0303 	and.w	r3, r3, #3
 8000b3a:	2b03      	cmp	r3, #3
 8000b3c:	d118      	bne.n	8000b70 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000b44:	2201      	movs	r2, #1
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	08db      	lsrs	r3, r3, #3
 8000b5a:	f003 0201 	and.w	r2, r3, #1
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f003 0303 	and.w	r3, r3, #3
 8000b78:	2b03      	cmp	r3, #3
 8000b7a:	d017      	beq.n	8000bac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	2203      	movs	r2, #3
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	689a      	ldr	r2, [r3, #8]
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f003 0303 	and.w	r3, r3, #3
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d123      	bne.n	8000c00 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	08da      	lsrs	r2, r3, #3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3208      	adds	r2, #8
 8000bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	f003 0307 	and.w	r3, r3, #7
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	220f      	movs	r2, #15
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	691a      	ldr	r2, [r3, #16]
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	08da      	lsrs	r2, r3, #3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3208      	adds	r2, #8
 8000bfa:	6939      	ldr	r1, [r7, #16]
 8000bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	43db      	mvns	r3, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f003 0203 	and.w	r2, r3, #3
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	f000 80ac 	beq.w	8000d9a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	4b5f      	ldr	r3, [pc, #380]	@ (8000dc0 <HAL_GPIO_Init+0x330>)
 8000c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c46:	4a5e      	ldr	r2, [pc, #376]	@ (8000dc0 <HAL_GPIO_Init+0x330>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c4e:	4b5c      	ldr	r3, [pc, #368]	@ (8000dc0 <HAL_GPIO_Init+0x330>)
 8000c50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c5a:	4a5a      	ldr	r2, [pc, #360]	@ (8000dc4 <HAL_GPIO_Init+0x334>)
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	089b      	lsrs	r3, r3, #2
 8000c60:	3302      	adds	r3, #2
 8000c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c66:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	f003 0303 	and.w	r3, r3, #3
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	220f      	movs	r2, #15
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c84:	d025      	beq.n	8000cd2 <HAL_GPIO_Init+0x242>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a4f      	ldr	r2, [pc, #316]	@ (8000dc8 <HAL_GPIO_Init+0x338>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d01f      	beq.n	8000cce <HAL_GPIO_Init+0x23e>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a4e      	ldr	r2, [pc, #312]	@ (8000dcc <HAL_GPIO_Init+0x33c>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d019      	beq.n	8000cca <HAL_GPIO_Init+0x23a>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a4d      	ldr	r2, [pc, #308]	@ (8000dd0 <HAL_GPIO_Init+0x340>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d013      	beq.n	8000cc6 <HAL_GPIO_Init+0x236>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a4c      	ldr	r2, [pc, #304]	@ (8000dd4 <HAL_GPIO_Init+0x344>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d00d      	beq.n	8000cc2 <HAL_GPIO_Init+0x232>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a4b      	ldr	r2, [pc, #300]	@ (8000dd8 <HAL_GPIO_Init+0x348>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d007      	beq.n	8000cbe <HAL_GPIO_Init+0x22e>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a4a      	ldr	r2, [pc, #296]	@ (8000ddc <HAL_GPIO_Init+0x34c>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d101      	bne.n	8000cba <HAL_GPIO_Init+0x22a>
 8000cb6:	2306      	movs	r3, #6
 8000cb8:	e00c      	b.n	8000cd4 <HAL_GPIO_Init+0x244>
 8000cba:	2307      	movs	r3, #7
 8000cbc:	e00a      	b.n	8000cd4 <HAL_GPIO_Init+0x244>
 8000cbe:	2305      	movs	r3, #5
 8000cc0:	e008      	b.n	8000cd4 <HAL_GPIO_Init+0x244>
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	e006      	b.n	8000cd4 <HAL_GPIO_Init+0x244>
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	e004      	b.n	8000cd4 <HAL_GPIO_Init+0x244>
 8000cca:	2302      	movs	r3, #2
 8000ccc:	e002      	b.n	8000cd4 <HAL_GPIO_Init+0x244>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e000      	b.n	8000cd4 <HAL_GPIO_Init+0x244>
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	697a      	ldr	r2, [r7, #20]
 8000cd6:	f002 0203 	and.w	r2, r2, #3
 8000cda:	0092      	lsls	r2, r2, #2
 8000cdc:	4093      	lsls	r3, r2
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ce4:	4937      	ldr	r1, [pc, #220]	@ (8000dc4 <HAL_GPIO_Init+0x334>)
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	089b      	lsrs	r3, r3, #2
 8000cea:	3302      	adds	r3, #2
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cf2:	4b3b      	ldr	r3, [pc, #236]	@ (8000de0 <HAL_GPIO_Init+0x350>)
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d003      	beq.n	8000d16 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d16:	4a32      	ldr	r2, [pc, #200]	@ (8000de0 <HAL_GPIO_Init+0x350>)
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d1c:	4b30      	ldr	r3, [pc, #192]	@ (8000de0 <HAL_GPIO_Init+0x350>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d003      	beq.n	8000d40 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d40:	4a27      	ldr	r2, [pc, #156]	@ (8000de0 <HAL_GPIO_Init+0x350>)
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000d46:	4b26      	ldr	r3, [pc, #152]	@ (8000de0 <HAL_GPIO_Init+0x350>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d003      	beq.n	8000d6a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d6a:	4a1d      	ldr	r2, [pc, #116]	@ (8000de0 <HAL_GPIO_Init+0x350>)
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000d70:	4b1b      	ldr	r3, [pc, #108]	@ (8000de0 <HAL_GPIO_Init+0x350>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d003      	beq.n	8000d94 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d94:	4a12      	ldr	r2, [pc, #72]	@ (8000de0 <HAL_GPIO_Init+0x350>)
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa22 f303 	lsr.w	r3, r2, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f47f ae78 	bne.w	8000aa0 <HAL_GPIO_Init+0x10>
  }
}
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
 8000db4:	371c      	adds	r7, #28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40010000 	.word	0x40010000
 8000dc8:	48000400 	.word	0x48000400
 8000dcc:	48000800 	.word	0x48000800
 8000dd0:	48000c00 	.word	0x48000c00
 8000dd4:	48001000 	.word	0x48001000
 8000dd8:	48001400 	.word	0x48001400
 8000ddc:	48001800 	.word	0x48001800
 8000de0:	40010400 	.word	0x40010400

08000de4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000de8:	4b04      	ldr	r3, [pc, #16]	@ (8000dfc <HAL_PWREx_GetVoltageRange+0x18>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	40007000 	.word	0x40007000

08000e00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e0e:	d130      	bne.n	8000e72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e10:	4b23      	ldr	r3, [pc, #140]	@ (8000ea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000e18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e1c:	d038      	beq.n	8000e90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e1e:	4b20      	ldr	r3, [pc, #128]	@ (8000ea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e26:	4a1e      	ldr	r2, [pc, #120]	@ (8000ea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2232      	movs	r2, #50	@ 0x32
 8000e34:	fb02 f303 	mul.w	r3, r2, r3
 8000e38:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3e:	0c9b      	lsrs	r3, r3, #18
 8000e40:	3301      	adds	r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e44:	e002      	b.n	8000e4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e58:	d102      	bne.n	8000e60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d1f2      	bne.n	8000e46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e62:	695b      	ldr	r3, [r3, #20]
 8000e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e6c:	d110      	bne.n	8000e90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e00f      	b.n	8000e92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000e7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e7e:	d007      	beq.n	8000e90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e80:	4b07      	ldr	r3, [pc, #28]	@ (8000ea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e88:	4a05      	ldr	r2, [pc, #20]	@ (8000ea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40007000 	.word	0x40007000
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	431bde83 	.word	0x431bde83

08000eac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d101      	bne.n	8000ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e3ca      	b.n	8001654 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ebe:	4b97      	ldr	r3, [pc, #604]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	f003 030c 	and.w	r3, r3, #12
 8000ec6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ec8:	4b94      	ldr	r3, [pc, #592]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0310 	and.w	r3, r3, #16
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f000 80e4 	beq.w	80010a8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d007      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x4a>
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	2b0c      	cmp	r3, #12
 8000eea:	f040 808b 	bne.w	8001004 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	f040 8087 	bne.w	8001004 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ef6:	4b89      	ldr	r3, [pc, #548]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d005      	beq.n	8000f0e <HAL_RCC_OscConfig+0x62>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d101      	bne.n	8000f0e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e3a2      	b.n	8001654 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a1a      	ldr	r2, [r3, #32]
 8000f12:	4b82      	ldr	r3, [pc, #520]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0308 	and.w	r3, r3, #8
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d004      	beq.n	8000f28 <HAL_RCC_OscConfig+0x7c>
 8000f1e:	4b7f      	ldr	r3, [pc, #508]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f26:	e005      	b.n	8000f34 <HAL_RCC_OscConfig+0x88>
 8000f28:	4b7c      	ldr	r3, [pc, #496]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 8000f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f2e:	091b      	lsrs	r3, r3, #4
 8000f30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d223      	bcs.n	8000f80 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a1b      	ldr	r3, [r3, #32]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 fd1d 	bl	800197c <RCC_SetFlashLatencyFromMSIRange>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e383      	b.n	8001654 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f4c:	4b73      	ldr	r3, [pc, #460]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a72      	ldr	r2, [pc, #456]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 8000f52:	f043 0308 	orr.w	r3, r3, #8
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	4b70      	ldr	r3, [pc, #448]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a1b      	ldr	r3, [r3, #32]
 8000f64:	496d      	ldr	r1, [pc, #436]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 8000f66:	4313      	orrs	r3, r2
 8000f68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f6a:	4b6c      	ldr	r3, [pc, #432]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	021b      	lsls	r3, r3, #8
 8000f78:	4968      	ldr	r1, [pc, #416]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	604b      	str	r3, [r1, #4]
 8000f7e:	e025      	b.n	8000fcc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f80:	4b66      	ldr	r3, [pc, #408]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a65      	ldr	r2, [pc, #404]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 8000f86:	f043 0308 	orr.w	r3, r3, #8
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	4b63      	ldr	r3, [pc, #396]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a1b      	ldr	r3, [r3, #32]
 8000f98:	4960      	ldr	r1, [pc, #384]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f9e:	4b5f      	ldr	r3, [pc, #380]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	495b      	ldr	r1, [pc, #364]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d109      	bne.n	8000fcc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 fcdd 	bl	800197c <RCC_SetFlashLatencyFromMSIRange>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e343      	b.n	8001654 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000fcc:	f000 fc4a 	bl	8001864 <HAL_RCC_GetSysClockFreq>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	4b52      	ldr	r3, [pc, #328]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	091b      	lsrs	r3, r3, #4
 8000fd8:	f003 030f 	and.w	r3, r3, #15
 8000fdc:	4950      	ldr	r1, [pc, #320]	@ (8001120 <HAL_RCC_OscConfig+0x274>)
 8000fde:	5ccb      	ldrb	r3, [r1, r3]
 8000fe0:	f003 031f 	and.w	r3, r3, #31
 8000fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe8:	4a4e      	ldr	r2, [pc, #312]	@ (8001124 <HAL_RCC_OscConfig+0x278>)
 8000fea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000fec:	4b4e      	ldr	r3, [pc, #312]	@ (8001128 <HAL_RCC_OscConfig+0x27c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fbe7 	bl	80007c4 <HAL_InitTick>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d052      	beq.n	80010a6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	e327      	b.n	8001654 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d032      	beq.n	8001072 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800100c:	4b43      	ldr	r3, [pc, #268]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a42      	ldr	r2, [pc, #264]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001018:	f7ff fc24 	bl	8000864 <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001020:	f7ff fc20 	bl	8000864 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e310      	b.n	8001654 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001032:	4b3a      	ldr	r3, [pc, #232]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	2b00      	cmp	r3, #0
 800103c:	d0f0      	beq.n	8001020 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800103e:	4b37      	ldr	r3, [pc, #220]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a36      	ldr	r2, [pc, #216]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 8001044:	f043 0308 	orr.w	r3, r3, #8
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	4b34      	ldr	r3, [pc, #208]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6a1b      	ldr	r3, [r3, #32]
 8001056:	4931      	ldr	r1, [pc, #196]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 8001058:	4313      	orrs	r3, r2
 800105a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800105c:	4b2f      	ldr	r3, [pc, #188]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	021b      	lsls	r3, r3, #8
 800106a:	492c      	ldr	r1, [pc, #176]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 800106c:	4313      	orrs	r3, r2
 800106e:	604b      	str	r3, [r1, #4]
 8001070:	e01a      	b.n	80010a8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001072:	4b2a      	ldr	r3, [pc, #168]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a29      	ldr	r2, [pc, #164]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 8001078:	f023 0301 	bic.w	r3, r3, #1
 800107c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800107e:	f7ff fbf1 	bl	8000864 <HAL_GetTick>
 8001082:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001084:	e008      	b.n	8001098 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001086:	f7ff fbed 	bl	8000864 <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e2dd      	b.n	8001654 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001098:	4b20      	ldr	r3, [pc, #128]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1f0      	bne.n	8001086 <HAL_RCC_OscConfig+0x1da>
 80010a4:	e000      	b.n	80010a8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d074      	beq.n	800119e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	2b08      	cmp	r3, #8
 80010b8:	d005      	beq.n	80010c6 <HAL_RCC_OscConfig+0x21a>
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	2b0c      	cmp	r3, #12
 80010be:	d10e      	bne.n	80010de <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d10b      	bne.n	80010de <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c6:	4b15      	ldr	r3, [pc, #84]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d064      	beq.n	800119c <HAL_RCC_OscConfig+0x2f0>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d160      	bne.n	800119c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e2ba      	b.n	8001654 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010e6:	d106      	bne.n	80010f6 <HAL_RCC_OscConfig+0x24a>
 80010e8:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a0b      	ldr	r2, [pc, #44]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 80010ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	e026      	b.n	8001144 <HAL_RCC_OscConfig+0x298>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010fe:	d115      	bne.n	800112c <HAL_RCC_OscConfig+0x280>
 8001100:	4b06      	ldr	r3, [pc, #24]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a05      	ldr	r2, [pc, #20]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 8001106:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	4b03      	ldr	r3, [pc, #12]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a02      	ldr	r2, [pc, #8]	@ (800111c <HAL_RCC_OscConfig+0x270>)
 8001112:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	e014      	b.n	8001144 <HAL_RCC_OscConfig+0x298>
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000
 8001120:	08002b6c 	.word	0x08002b6c
 8001124:	20000000 	.word	0x20000000
 8001128:	20000004 	.word	0x20000004
 800112c:	4ba0      	ldr	r3, [pc, #640]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a9f      	ldr	r2, [pc, #636]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 8001132:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b9d      	ldr	r3, [pc, #628]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a9c      	ldr	r2, [pc, #624]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 800113e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d013      	beq.n	8001174 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800114c:	f7ff fb8a 	bl	8000864 <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001154:	f7ff fb86 	bl	8000864 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b64      	cmp	r3, #100	@ 0x64
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e276      	b.n	8001654 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001166:	4b92      	ldr	r3, [pc, #584]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0f0      	beq.n	8001154 <HAL_RCC_OscConfig+0x2a8>
 8001172:	e014      	b.n	800119e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001174:	f7ff fb76 	bl	8000864 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800117c:	f7ff fb72 	bl	8000864 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b64      	cmp	r3, #100	@ 0x64
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e262      	b.n	8001654 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800118e:	4b88      	ldr	r3, [pc, #544]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f0      	bne.n	800117c <HAL_RCC_OscConfig+0x2d0>
 800119a:	e000      	b.n	800119e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800119c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d060      	beq.n	800126c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	2b04      	cmp	r3, #4
 80011ae:	d005      	beq.n	80011bc <HAL_RCC_OscConfig+0x310>
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	2b0c      	cmp	r3, #12
 80011b4:	d119      	bne.n	80011ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d116      	bne.n	80011ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011bc:	4b7c      	ldr	r3, [pc, #496]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d005      	beq.n	80011d4 <HAL_RCC_OscConfig+0x328>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e23f      	b.n	8001654 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d4:	4b76      	ldr	r3, [pc, #472]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	061b      	lsls	r3, r3, #24
 80011e2:	4973      	ldr	r1, [pc, #460]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011e8:	e040      	b.n	800126c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d023      	beq.n	800123a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011f2:	4b6f      	ldr	r3, [pc, #444]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a6e      	ldr	r2, [pc, #440]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 80011f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011fe:	f7ff fb31 	bl	8000864 <HAL_GetTick>
 8001202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001204:	e008      	b.n	8001218 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001206:	f7ff fb2d 	bl	8000864 <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e21d      	b.n	8001654 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001218:	4b65      	ldr	r3, [pc, #404]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0f0      	beq.n	8001206 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001224:	4b62      	ldr	r3, [pc, #392]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	061b      	lsls	r3, r3, #24
 8001232:	495f      	ldr	r1, [pc, #380]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 8001234:	4313      	orrs	r3, r2
 8001236:	604b      	str	r3, [r1, #4]
 8001238:	e018      	b.n	800126c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800123a:	4b5d      	ldr	r3, [pc, #372]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a5c      	ldr	r2, [pc, #368]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 8001240:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001246:	f7ff fb0d 	bl	8000864 <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800124e:	f7ff fb09 	bl	8000864 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e1f9      	b.n	8001654 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001260:	4b53      	ldr	r3, [pc, #332]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1f0      	bne.n	800124e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0308 	and.w	r3, r3, #8
 8001274:	2b00      	cmp	r3, #0
 8001276:	d03c      	beq.n	80012f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d01c      	beq.n	80012ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001280:	4b4b      	ldr	r3, [pc, #300]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 8001282:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001286:	4a4a      	ldr	r2, [pc, #296]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001290:	f7ff fae8 	bl	8000864 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001298:	f7ff fae4 	bl	8000864 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e1d4      	b.n	8001654 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012aa:	4b41      	ldr	r3, [pc, #260]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 80012ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0ef      	beq.n	8001298 <HAL_RCC_OscConfig+0x3ec>
 80012b8:	e01b      	b.n	80012f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ba:	4b3d      	ldr	r3, [pc, #244]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 80012bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012c0:	4a3b      	ldr	r2, [pc, #236]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 80012c2:	f023 0301 	bic.w	r3, r3, #1
 80012c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ca:	f7ff facb 	bl	8000864 <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d2:	f7ff fac7 	bl	8000864 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e1b7      	b.n	8001654 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012e4:	4b32      	ldr	r3, [pc, #200]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 80012e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1ef      	bne.n	80012d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 80a6 	beq.w	800144c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001304:	4b2a      	ldr	r3, [pc, #168]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 8001306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d10d      	bne.n	800132c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001310:	4b27      	ldr	r3, [pc, #156]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 8001312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001314:	4a26      	ldr	r2, [pc, #152]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 8001316:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800131a:	6593      	str	r3, [r2, #88]	@ 0x58
 800131c:	4b24      	ldr	r3, [pc, #144]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 800131e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001320:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001328:	2301      	movs	r3, #1
 800132a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800132c:	4b21      	ldr	r3, [pc, #132]	@ (80013b4 <HAL_RCC_OscConfig+0x508>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001334:	2b00      	cmp	r3, #0
 8001336:	d118      	bne.n	800136a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001338:	4b1e      	ldr	r3, [pc, #120]	@ (80013b4 <HAL_RCC_OscConfig+0x508>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a1d      	ldr	r2, [pc, #116]	@ (80013b4 <HAL_RCC_OscConfig+0x508>)
 800133e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001342:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001344:	f7ff fa8e 	bl	8000864 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800134c:	f7ff fa8a 	bl	8000864 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e17a      	b.n	8001654 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800135e:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <HAL_RCC_OscConfig+0x508>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f0      	beq.n	800134c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d108      	bne.n	8001384 <HAL_RCC_OscConfig+0x4d8>
 8001372:	4b0f      	ldr	r3, [pc, #60]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 8001374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001378:	4a0d      	ldr	r2, [pc, #52]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001382:	e029      	b.n	80013d8 <HAL_RCC_OscConfig+0x52c>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	2b05      	cmp	r3, #5
 800138a:	d115      	bne.n	80013b8 <HAL_RCC_OscConfig+0x50c>
 800138c:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 800138e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001392:	4a07      	ldr	r2, [pc, #28]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800139c:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 800139e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013a2:	4a03      	ldr	r2, [pc, #12]	@ (80013b0 <HAL_RCC_OscConfig+0x504>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80013ac:	e014      	b.n	80013d8 <HAL_RCC_OscConfig+0x52c>
 80013ae:	bf00      	nop
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40007000 	.word	0x40007000
 80013b8:	4b9c      	ldr	r3, [pc, #624]	@ (800162c <HAL_RCC_OscConfig+0x780>)
 80013ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013be:	4a9b      	ldr	r2, [pc, #620]	@ (800162c <HAL_RCC_OscConfig+0x780>)
 80013c0:	f023 0301 	bic.w	r3, r3, #1
 80013c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80013c8:	4b98      	ldr	r3, [pc, #608]	@ (800162c <HAL_RCC_OscConfig+0x780>)
 80013ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013ce:	4a97      	ldr	r2, [pc, #604]	@ (800162c <HAL_RCC_OscConfig+0x780>)
 80013d0:	f023 0304 	bic.w	r3, r3, #4
 80013d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d016      	beq.n	800140e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e0:	f7ff fa40 	bl	8000864 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013e6:	e00a      	b.n	80013fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013e8:	f7ff fa3c 	bl	8000864 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e12a      	b.n	8001654 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013fe:	4b8b      	ldr	r3, [pc, #556]	@ (800162c <HAL_RCC_OscConfig+0x780>)
 8001400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0ed      	beq.n	80013e8 <HAL_RCC_OscConfig+0x53c>
 800140c:	e015      	b.n	800143a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800140e:	f7ff fa29 	bl	8000864 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001414:	e00a      	b.n	800142c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001416:	f7ff fa25 	bl	8000864 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001424:	4293      	cmp	r3, r2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e113      	b.n	8001654 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800142c:	4b7f      	ldr	r3, [pc, #508]	@ (800162c <HAL_RCC_OscConfig+0x780>)
 800142e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1ed      	bne.n	8001416 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800143a:	7ffb      	ldrb	r3, [r7, #31]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d105      	bne.n	800144c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001440:	4b7a      	ldr	r3, [pc, #488]	@ (800162c <HAL_RCC_OscConfig+0x780>)
 8001442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001444:	4a79      	ldr	r2, [pc, #484]	@ (800162c <HAL_RCC_OscConfig+0x780>)
 8001446:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800144a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 80fe 	beq.w	8001652 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800145a:	2b02      	cmp	r3, #2
 800145c:	f040 80d0 	bne.w	8001600 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001460:	4b72      	ldr	r3, [pc, #456]	@ (800162c <HAL_RCC_OscConfig+0x780>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f003 0203 	and.w	r2, r3, #3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001470:	429a      	cmp	r2, r3
 8001472:	d130      	bne.n	80014d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	3b01      	subs	r3, #1
 8001480:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001482:	429a      	cmp	r2, r3
 8001484:	d127      	bne.n	80014d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001490:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001492:	429a      	cmp	r2, r3
 8001494:	d11f      	bne.n	80014d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80014a0:	2a07      	cmp	r2, #7
 80014a2:	bf14      	ite	ne
 80014a4:	2201      	movne	r2, #1
 80014a6:	2200      	moveq	r2, #0
 80014a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d113      	bne.n	80014d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014b8:	085b      	lsrs	r3, r3, #1
 80014ba:	3b01      	subs	r3, #1
 80014bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80014be:	429a      	cmp	r2, r3
 80014c0:	d109      	bne.n	80014d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014cc:	085b      	lsrs	r3, r3, #1
 80014ce:	3b01      	subs	r3, #1
 80014d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d06e      	beq.n	80015b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	2b0c      	cmp	r3, #12
 80014da:	d069      	beq.n	80015b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80014dc:	4b53      	ldr	r3, [pc, #332]	@ (800162c <HAL_RCC_OscConfig+0x780>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d105      	bne.n	80014f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80014e8:	4b50      	ldr	r3, [pc, #320]	@ (800162c <HAL_RCC_OscConfig+0x780>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e0ad      	b.n	8001654 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80014f8:	4b4c      	ldr	r3, [pc, #304]	@ (800162c <HAL_RCC_OscConfig+0x780>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a4b      	ldr	r2, [pc, #300]	@ (800162c <HAL_RCC_OscConfig+0x780>)
 80014fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001502:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001504:	f7ff f9ae 	bl	8000864 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800150c:	f7ff f9aa 	bl	8000864 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e09a      	b.n	8001654 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800151e:	4b43      	ldr	r3, [pc, #268]	@ (800162c <HAL_RCC_OscConfig+0x780>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800152a:	4b40      	ldr	r3, [pc, #256]	@ (800162c <HAL_RCC_OscConfig+0x780>)
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	4b40      	ldr	r3, [pc, #256]	@ (8001630 <HAL_RCC_OscConfig+0x784>)
 8001530:	4013      	ands	r3, r2
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800153a:	3a01      	subs	r2, #1
 800153c:	0112      	lsls	r2, r2, #4
 800153e:	4311      	orrs	r1, r2
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001544:	0212      	lsls	r2, r2, #8
 8001546:	4311      	orrs	r1, r2
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800154c:	0852      	lsrs	r2, r2, #1
 800154e:	3a01      	subs	r2, #1
 8001550:	0552      	lsls	r2, r2, #21
 8001552:	4311      	orrs	r1, r2
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001558:	0852      	lsrs	r2, r2, #1
 800155a:	3a01      	subs	r2, #1
 800155c:	0652      	lsls	r2, r2, #25
 800155e:	4311      	orrs	r1, r2
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001564:	0912      	lsrs	r2, r2, #4
 8001566:	0452      	lsls	r2, r2, #17
 8001568:	430a      	orrs	r2, r1
 800156a:	4930      	ldr	r1, [pc, #192]	@ (800162c <HAL_RCC_OscConfig+0x780>)
 800156c:	4313      	orrs	r3, r2
 800156e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001570:	4b2e      	ldr	r3, [pc, #184]	@ (800162c <HAL_RCC_OscConfig+0x780>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a2d      	ldr	r2, [pc, #180]	@ (800162c <HAL_RCC_OscConfig+0x780>)
 8001576:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800157a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800157c:	4b2b      	ldr	r3, [pc, #172]	@ (800162c <HAL_RCC_OscConfig+0x780>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	4a2a      	ldr	r2, [pc, #168]	@ (800162c <HAL_RCC_OscConfig+0x780>)
 8001582:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001586:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001588:	f7ff f96c 	bl	8000864 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001590:	f7ff f968 	bl	8000864 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e058      	b.n	8001654 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015a2:	4b22      	ldr	r3, [pc, #136]	@ (800162c <HAL_RCC_OscConfig+0x780>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015ae:	e050      	b.n	8001652 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e04f      	b.n	8001654 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015b4:	4b1d      	ldr	r3, [pc, #116]	@ (800162c <HAL_RCC_OscConfig+0x780>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d148      	bne.n	8001652 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80015c0:	4b1a      	ldr	r3, [pc, #104]	@ (800162c <HAL_RCC_OscConfig+0x780>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a19      	ldr	r2, [pc, #100]	@ (800162c <HAL_RCC_OscConfig+0x780>)
 80015c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015cc:	4b17      	ldr	r3, [pc, #92]	@ (800162c <HAL_RCC_OscConfig+0x780>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	4a16      	ldr	r2, [pc, #88]	@ (800162c <HAL_RCC_OscConfig+0x780>)
 80015d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80015d8:	f7ff f944 	bl	8000864 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e0:	f7ff f940 	bl	8000864 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e030      	b.n	8001654 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015f2:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <HAL_RCC_OscConfig+0x780>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f0      	beq.n	80015e0 <HAL_RCC_OscConfig+0x734>
 80015fe:	e028      	b.n	8001652 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	2b0c      	cmp	r3, #12
 8001604:	d023      	beq.n	800164e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001606:	4b09      	ldr	r3, [pc, #36]	@ (800162c <HAL_RCC_OscConfig+0x780>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a08      	ldr	r2, [pc, #32]	@ (800162c <HAL_RCC_OscConfig+0x780>)
 800160c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001612:	f7ff f927 	bl	8000864 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001618:	e00c      	b.n	8001634 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800161a:	f7ff f923 	bl	8000864 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d905      	bls.n	8001634 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e013      	b.n	8001654 <HAL_RCC_OscConfig+0x7a8>
 800162c:	40021000 	.word	0x40021000
 8001630:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001634:	4b09      	ldr	r3, [pc, #36]	@ (800165c <HAL_RCC_OscConfig+0x7b0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1ec      	bne.n	800161a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001640:	4b06      	ldr	r3, [pc, #24]	@ (800165c <HAL_RCC_OscConfig+0x7b0>)
 8001642:	68da      	ldr	r2, [r3, #12]
 8001644:	4905      	ldr	r1, [pc, #20]	@ (800165c <HAL_RCC_OscConfig+0x7b0>)
 8001646:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <HAL_RCC_OscConfig+0x7b4>)
 8001648:	4013      	ands	r3, r2
 800164a:	60cb      	str	r3, [r1, #12]
 800164c:	e001      	b.n	8001652 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3720      	adds	r7, #32
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40021000 	.word	0x40021000
 8001660:	feeefffc 	.word	0xfeeefffc

08001664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0e7      	b.n	8001848 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001678:	4b75      	ldr	r3, [pc, #468]	@ (8001850 <HAL_RCC_ClockConfig+0x1ec>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d910      	bls.n	80016a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001686:	4b72      	ldr	r3, [pc, #456]	@ (8001850 <HAL_RCC_ClockConfig+0x1ec>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f023 0207 	bic.w	r2, r3, #7
 800168e:	4970      	ldr	r1, [pc, #448]	@ (8001850 <HAL_RCC_ClockConfig+0x1ec>)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001696:	4b6e      	ldr	r3, [pc, #440]	@ (8001850 <HAL_RCC_ClockConfig+0x1ec>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e0cf      	b.n	8001848 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d010      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	4b66      	ldr	r3, [pc, #408]	@ (8001854 <HAL_RCC_ClockConfig+0x1f0>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d908      	bls.n	80016d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c4:	4b63      	ldr	r3, [pc, #396]	@ (8001854 <HAL_RCC_ClockConfig+0x1f0>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	4960      	ldr	r1, [pc, #384]	@ (8001854 <HAL_RCC_ClockConfig+0x1f0>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d04c      	beq.n	800177c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b03      	cmp	r3, #3
 80016e8:	d107      	bne.n	80016fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ea:	4b5a      	ldr	r3, [pc, #360]	@ (8001854 <HAL_RCC_ClockConfig+0x1f0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d121      	bne.n	800173a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e0a6      	b.n	8001848 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d107      	bne.n	8001712 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001702:	4b54      	ldr	r3, [pc, #336]	@ (8001854 <HAL_RCC_ClockConfig+0x1f0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d115      	bne.n	800173a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e09a      	b.n	8001848 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d107      	bne.n	800172a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800171a:	4b4e      	ldr	r3, [pc, #312]	@ (8001854 <HAL_RCC_ClockConfig+0x1f0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d109      	bne.n	800173a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e08e      	b.n	8001848 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800172a:	4b4a      	ldr	r3, [pc, #296]	@ (8001854 <HAL_RCC_ClockConfig+0x1f0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e086      	b.n	8001848 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800173a:	4b46      	ldr	r3, [pc, #280]	@ (8001854 <HAL_RCC_ClockConfig+0x1f0>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f023 0203 	bic.w	r2, r3, #3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	4943      	ldr	r1, [pc, #268]	@ (8001854 <HAL_RCC_ClockConfig+0x1f0>)
 8001748:	4313      	orrs	r3, r2
 800174a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800174c:	f7ff f88a 	bl	8000864 <HAL_GetTick>
 8001750:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001752:	e00a      	b.n	800176a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001754:	f7ff f886 	bl	8000864 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001762:	4293      	cmp	r3, r2
 8001764:	d901      	bls.n	800176a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e06e      	b.n	8001848 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176a:	4b3a      	ldr	r3, [pc, #232]	@ (8001854 <HAL_RCC_ClockConfig+0x1f0>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 020c 	and.w	r2, r3, #12
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	429a      	cmp	r2, r3
 800177a:	d1eb      	bne.n	8001754 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d010      	beq.n	80017aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	4b31      	ldr	r3, [pc, #196]	@ (8001854 <HAL_RCC_ClockConfig+0x1f0>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001794:	429a      	cmp	r2, r3
 8001796:	d208      	bcs.n	80017aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001798:	4b2e      	ldr	r3, [pc, #184]	@ (8001854 <HAL_RCC_ClockConfig+0x1f0>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	492b      	ldr	r1, [pc, #172]	@ (8001854 <HAL_RCC_ClockConfig+0x1f0>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017aa:	4b29      	ldr	r3, [pc, #164]	@ (8001850 <HAL_RCC_ClockConfig+0x1ec>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d210      	bcs.n	80017da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b8:	4b25      	ldr	r3, [pc, #148]	@ (8001850 <HAL_RCC_ClockConfig+0x1ec>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f023 0207 	bic.w	r2, r3, #7
 80017c0:	4923      	ldr	r1, [pc, #140]	@ (8001850 <HAL_RCC_ClockConfig+0x1ec>)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c8:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <HAL_RCC_ClockConfig+0x1ec>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d001      	beq.n	80017da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e036      	b.n	8001848 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d008      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001854 <HAL_RCC_ClockConfig+0x1f0>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	4918      	ldr	r1, [pc, #96]	@ (8001854 <HAL_RCC_ClockConfig+0x1f0>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d009      	beq.n	8001818 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001804:	4b13      	ldr	r3, [pc, #76]	@ (8001854 <HAL_RCC_ClockConfig+0x1f0>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	4910      	ldr	r1, [pc, #64]	@ (8001854 <HAL_RCC_ClockConfig+0x1f0>)
 8001814:	4313      	orrs	r3, r2
 8001816:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001818:	f000 f824 	bl	8001864 <HAL_RCC_GetSysClockFreq>
 800181c:	4602      	mov	r2, r0
 800181e:	4b0d      	ldr	r3, [pc, #52]	@ (8001854 <HAL_RCC_ClockConfig+0x1f0>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	091b      	lsrs	r3, r3, #4
 8001824:	f003 030f 	and.w	r3, r3, #15
 8001828:	490b      	ldr	r1, [pc, #44]	@ (8001858 <HAL_RCC_ClockConfig+0x1f4>)
 800182a:	5ccb      	ldrb	r3, [r1, r3]
 800182c:	f003 031f 	and.w	r3, r3, #31
 8001830:	fa22 f303 	lsr.w	r3, r2, r3
 8001834:	4a09      	ldr	r2, [pc, #36]	@ (800185c <HAL_RCC_ClockConfig+0x1f8>)
 8001836:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001838:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <HAL_RCC_ClockConfig+0x1fc>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe ffc1 	bl	80007c4 <HAL_InitTick>
 8001842:	4603      	mov	r3, r0
 8001844:	72fb      	strb	r3, [r7, #11]

  return status;
 8001846:	7afb      	ldrb	r3, [r7, #11]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40022000 	.word	0x40022000
 8001854:	40021000 	.word	0x40021000
 8001858:	08002b6c 	.word	0x08002b6c
 800185c:	20000000 	.word	0x20000000
 8001860:	20000004 	.word	0x20000004

08001864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	@ 0x24
 8001868:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
 800186e:	2300      	movs	r3, #0
 8001870:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001872:	4b3e      	ldr	r3, [pc, #248]	@ (800196c <HAL_RCC_GetSysClockFreq+0x108>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800187c:	4b3b      	ldr	r3, [pc, #236]	@ (800196c <HAL_RCC_GetSysClockFreq+0x108>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d005      	beq.n	8001898 <HAL_RCC_GetSysClockFreq+0x34>
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	2b0c      	cmp	r3, #12
 8001890:	d121      	bne.n	80018d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d11e      	bne.n	80018d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001898:	4b34      	ldr	r3, [pc, #208]	@ (800196c <HAL_RCC_GetSysClockFreq+0x108>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0308 	and.w	r3, r3, #8
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d107      	bne.n	80018b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80018a4:	4b31      	ldr	r3, [pc, #196]	@ (800196c <HAL_RCC_GetSysClockFreq+0x108>)
 80018a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018aa:	0a1b      	lsrs	r3, r3, #8
 80018ac:	f003 030f 	and.w	r3, r3, #15
 80018b0:	61fb      	str	r3, [r7, #28]
 80018b2:	e005      	b.n	80018c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80018b4:	4b2d      	ldr	r3, [pc, #180]	@ (800196c <HAL_RCC_GetSysClockFreq+0x108>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80018c0:	4a2b      	ldr	r2, [pc, #172]	@ (8001970 <HAL_RCC_GetSysClockFreq+0x10c>)
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d10d      	bne.n	80018ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018d4:	e00a      	b.n	80018ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	2b04      	cmp	r3, #4
 80018da:	d102      	bne.n	80018e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80018dc:	4b25      	ldr	r3, [pc, #148]	@ (8001974 <HAL_RCC_GetSysClockFreq+0x110>)
 80018de:	61bb      	str	r3, [r7, #24]
 80018e0:	e004      	b.n	80018ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d101      	bne.n	80018ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018e8:	4b23      	ldr	r3, [pc, #140]	@ (8001978 <HAL_RCC_GetSysClockFreq+0x114>)
 80018ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	2b0c      	cmp	r3, #12
 80018f0:	d134      	bne.n	800195c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018f2:	4b1e      	ldr	r3, [pc, #120]	@ (800196c <HAL_RCC_GetSysClockFreq+0x108>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d003      	beq.n	800190a <HAL_RCC_GetSysClockFreq+0xa6>
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d003      	beq.n	8001910 <HAL_RCC_GetSysClockFreq+0xac>
 8001908:	e005      	b.n	8001916 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800190a:	4b1a      	ldr	r3, [pc, #104]	@ (8001974 <HAL_RCC_GetSysClockFreq+0x110>)
 800190c:	617b      	str	r3, [r7, #20]
      break;
 800190e:	e005      	b.n	800191c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001910:	4b19      	ldr	r3, [pc, #100]	@ (8001978 <HAL_RCC_GetSysClockFreq+0x114>)
 8001912:	617b      	str	r3, [r7, #20]
      break;
 8001914:	e002      	b.n	800191c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	617b      	str	r3, [r7, #20]
      break;
 800191a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800191c:	4b13      	ldr	r3, [pc, #76]	@ (800196c <HAL_RCC_GetSysClockFreq+0x108>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	3301      	adds	r3, #1
 8001928:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800192a:	4b10      	ldr	r3, [pc, #64]	@ (800196c <HAL_RCC_GetSysClockFreq+0x108>)
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	0a1b      	lsrs	r3, r3, #8
 8001930:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	fb03 f202 	mul.w	r2, r3, r2
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001940:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001942:	4b0a      	ldr	r3, [pc, #40]	@ (800196c <HAL_RCC_GetSysClockFreq+0x108>)
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	0e5b      	lsrs	r3, r3, #25
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	3301      	adds	r3, #1
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	fbb2 f3f3 	udiv	r3, r2, r3
 800195a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800195c:	69bb      	ldr	r3, [r7, #24]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3724      	adds	r7, #36	@ 0x24
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40021000 	.word	0x40021000
 8001970:	08002b7c 	.word	0x08002b7c
 8001974:	00f42400 	.word	0x00f42400
 8001978:	007a1200 	.word	0x007a1200

0800197c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001984:	2300      	movs	r3, #0
 8001986:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001988:	4b2a      	ldr	r3, [pc, #168]	@ (8001a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800198a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800198c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001994:	f7ff fa26 	bl	8000de4 <HAL_PWREx_GetVoltageRange>
 8001998:	6178      	str	r0, [r7, #20]
 800199a:	e014      	b.n	80019c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800199c:	4b25      	ldr	r3, [pc, #148]	@ (8001a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800199e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a0:	4a24      	ldr	r2, [pc, #144]	@ (8001a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80019a8:	4b22      	ldr	r3, [pc, #136]	@ (8001a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80019b4:	f7ff fa16 	bl	8000de4 <HAL_PWREx_GetVoltageRange>
 80019b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80019ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019be:	4a1d      	ldr	r2, [pc, #116]	@ (8001a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019cc:	d10b      	bne.n	80019e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b80      	cmp	r3, #128	@ 0x80
 80019d2:	d919      	bls.n	8001a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2ba0      	cmp	r3, #160	@ 0xa0
 80019d8:	d902      	bls.n	80019e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019da:	2302      	movs	r3, #2
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	e013      	b.n	8001a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019e0:	2301      	movs	r3, #1
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	e010      	b.n	8001a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b80      	cmp	r3, #128	@ 0x80
 80019ea:	d902      	bls.n	80019f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80019ec:	2303      	movs	r3, #3
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	e00a      	b.n	8001a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b80      	cmp	r3, #128	@ 0x80
 80019f6:	d102      	bne.n	80019fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019f8:	2302      	movs	r3, #2
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	e004      	b.n	8001a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b70      	cmp	r3, #112	@ 0x70
 8001a02:	d101      	bne.n	8001a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a04:	2301      	movs	r3, #1
 8001a06:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a08:	4b0b      	ldr	r3, [pc, #44]	@ (8001a38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f023 0207 	bic.w	r2, r3, #7
 8001a10:	4909      	ldr	r1, [pc, #36]	@ (8001a38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a18:	4b07      	ldr	r3, [pc, #28]	@ (8001a38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d001      	beq.n	8001a2a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40022000 	.word	0x40022000

08001a3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e049      	b.n	8001ae2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d106      	bne.n	8001a68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7fe fd96 	bl	8000594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3304      	adds	r3, #4
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	f000 fb7a 	bl	8002174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e049      	b.n	8001b90 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d106      	bne.n	8001b16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f841 	bl	8001b98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2202      	movs	r2, #2
 8001b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3304      	adds	r3, #4
 8001b26:	4619      	mov	r1, r3
 8001b28:	4610      	mov	r0, r2
 8001b2a:	f000 fb23 	bl	8002174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d109      	bne.n	8001bd0 <HAL_TIM_PWM_Start+0x24>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	bf14      	ite	ne
 8001bc8:	2301      	movne	r3, #1
 8001bca:	2300      	moveq	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	e03c      	b.n	8001c4a <HAL_TIM_PWM_Start+0x9e>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d109      	bne.n	8001bea <HAL_TIM_PWM_Start+0x3e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	bf14      	ite	ne
 8001be2:	2301      	movne	r3, #1
 8001be4:	2300      	moveq	r3, #0
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	e02f      	b.n	8001c4a <HAL_TIM_PWM_Start+0x9e>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d109      	bne.n	8001c04 <HAL_TIM_PWM_Start+0x58>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	bf14      	ite	ne
 8001bfc:	2301      	movne	r3, #1
 8001bfe:	2300      	moveq	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	e022      	b.n	8001c4a <HAL_TIM_PWM_Start+0x9e>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	2b0c      	cmp	r3, #12
 8001c08:	d109      	bne.n	8001c1e <HAL_TIM_PWM_Start+0x72>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	bf14      	ite	ne
 8001c16:	2301      	movne	r3, #1
 8001c18:	2300      	moveq	r3, #0
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	e015      	b.n	8001c4a <HAL_TIM_PWM_Start+0x9e>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2b10      	cmp	r3, #16
 8001c22:	d109      	bne.n	8001c38 <HAL_TIM_PWM_Start+0x8c>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	bf14      	ite	ne
 8001c30:	2301      	movne	r3, #1
 8001c32:	2300      	moveq	r3, #0
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	e008      	b.n	8001c4a <HAL_TIM_PWM_Start+0x9e>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	bf14      	ite	ne
 8001c44:	2301      	movne	r3, #1
 8001c46:	2300      	moveq	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e09c      	b.n	8001d8c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d104      	bne.n	8001c62 <HAL_TIM_PWM_Start+0xb6>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c60:	e023      	b.n	8001caa <HAL_TIM_PWM_Start+0xfe>
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d104      	bne.n	8001c72 <HAL_TIM_PWM_Start+0xc6>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c70:	e01b      	b.n	8001caa <HAL_TIM_PWM_Start+0xfe>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d104      	bne.n	8001c82 <HAL_TIM_PWM_Start+0xd6>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c80:	e013      	b.n	8001caa <HAL_TIM_PWM_Start+0xfe>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	2b0c      	cmp	r3, #12
 8001c86:	d104      	bne.n	8001c92 <HAL_TIM_PWM_Start+0xe6>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001c90:	e00b      	b.n	8001caa <HAL_TIM_PWM_Start+0xfe>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2b10      	cmp	r3, #16
 8001c96:	d104      	bne.n	8001ca2 <HAL_TIM_PWM_Start+0xf6>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ca0:	e003      	b.n	8001caa <HAL_TIM_PWM_Start+0xfe>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	6839      	ldr	r1, [r7, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 fe74 	bl	80029a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a35      	ldr	r2, [pc, #212]	@ (8001d94 <HAL_TIM_PWM_Start+0x1e8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d013      	beq.n	8001cea <HAL_TIM_PWM_Start+0x13e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a34      	ldr	r2, [pc, #208]	@ (8001d98 <HAL_TIM_PWM_Start+0x1ec>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d00e      	beq.n	8001cea <HAL_TIM_PWM_Start+0x13e>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a32      	ldr	r2, [pc, #200]	@ (8001d9c <HAL_TIM_PWM_Start+0x1f0>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d009      	beq.n	8001cea <HAL_TIM_PWM_Start+0x13e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a31      	ldr	r2, [pc, #196]	@ (8001da0 <HAL_TIM_PWM_Start+0x1f4>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d004      	beq.n	8001cea <HAL_TIM_PWM_Start+0x13e>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a2f      	ldr	r2, [pc, #188]	@ (8001da4 <HAL_TIM_PWM_Start+0x1f8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d101      	bne.n	8001cee <HAL_TIM_PWM_Start+0x142>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <HAL_TIM_PWM_Start+0x144>
 8001cee:	2300      	movs	r3, #0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d007      	beq.n	8001d04 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d02:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a22      	ldr	r2, [pc, #136]	@ (8001d94 <HAL_TIM_PWM_Start+0x1e8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d01d      	beq.n	8001d4a <HAL_TIM_PWM_Start+0x19e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d16:	d018      	beq.n	8001d4a <HAL_TIM_PWM_Start+0x19e>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a22      	ldr	r2, [pc, #136]	@ (8001da8 <HAL_TIM_PWM_Start+0x1fc>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d013      	beq.n	8001d4a <HAL_TIM_PWM_Start+0x19e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a21      	ldr	r2, [pc, #132]	@ (8001dac <HAL_TIM_PWM_Start+0x200>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d00e      	beq.n	8001d4a <HAL_TIM_PWM_Start+0x19e>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a1f      	ldr	r2, [pc, #124]	@ (8001db0 <HAL_TIM_PWM_Start+0x204>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d009      	beq.n	8001d4a <HAL_TIM_PWM_Start+0x19e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a17      	ldr	r2, [pc, #92]	@ (8001d98 <HAL_TIM_PWM_Start+0x1ec>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d004      	beq.n	8001d4a <HAL_TIM_PWM_Start+0x19e>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a15      	ldr	r2, [pc, #84]	@ (8001d9c <HAL_TIM_PWM_Start+0x1f0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d115      	bne.n	8001d76 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	4b18      	ldr	r3, [pc, #96]	@ (8001db4 <HAL_TIM_PWM_Start+0x208>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2b06      	cmp	r3, #6
 8001d5a:	d015      	beq.n	8001d88 <HAL_TIM_PWM_Start+0x1dc>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d62:	d011      	beq.n	8001d88 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0201 	orr.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d74:	e008      	b.n	8001d88 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f042 0201 	orr.w	r2, r2, #1
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	e000      	b.n	8001d8a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40012c00 	.word	0x40012c00
 8001d98:	40013400 	.word	0x40013400
 8001d9c:	40014000 	.word	0x40014000
 8001da0:	40014400 	.word	0x40014400
 8001da4:	40014800 	.word	0x40014800
 8001da8:	40000400 	.word	0x40000400
 8001dac:	40000800 	.word	0x40000800
 8001db0:	40000c00 	.word	0x40000c00
 8001db4:	00010007 	.word	0x00010007

08001db8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e0ff      	b.n	8001fd6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b14      	cmp	r3, #20
 8001de2:	f200 80f0 	bhi.w	8001fc6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001de6:	a201      	add	r2, pc, #4	@ (adr r2, 8001dec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dec:	08001e41 	.word	0x08001e41
 8001df0:	08001fc7 	.word	0x08001fc7
 8001df4:	08001fc7 	.word	0x08001fc7
 8001df8:	08001fc7 	.word	0x08001fc7
 8001dfc:	08001e81 	.word	0x08001e81
 8001e00:	08001fc7 	.word	0x08001fc7
 8001e04:	08001fc7 	.word	0x08001fc7
 8001e08:	08001fc7 	.word	0x08001fc7
 8001e0c:	08001ec3 	.word	0x08001ec3
 8001e10:	08001fc7 	.word	0x08001fc7
 8001e14:	08001fc7 	.word	0x08001fc7
 8001e18:	08001fc7 	.word	0x08001fc7
 8001e1c:	08001f03 	.word	0x08001f03
 8001e20:	08001fc7 	.word	0x08001fc7
 8001e24:	08001fc7 	.word	0x08001fc7
 8001e28:	08001fc7 	.word	0x08001fc7
 8001e2c:	08001f45 	.word	0x08001f45
 8001e30:	08001fc7 	.word	0x08001fc7
 8001e34:	08001fc7 	.word	0x08001fc7
 8001e38:	08001fc7 	.word	0x08001fc7
 8001e3c:	08001f85 	.word	0x08001f85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 fa3a 	bl	80022c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699a      	ldr	r2, [r3, #24]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0208 	orr.w	r2, r2, #8
 8001e5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699a      	ldr	r2, [r3, #24]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0204 	bic.w	r2, r2, #4
 8001e6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6999      	ldr	r1, [r3, #24]
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	691a      	ldr	r2, [r3, #16]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	619a      	str	r2, [r3, #24]
      break;
 8001e7e:	e0a5      	b.n	8001fcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 faaa 	bl	80023e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699a      	ldr	r2, [r3, #24]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699a      	ldr	r2, [r3, #24]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6999      	ldr	r1, [r3, #24]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	021a      	lsls	r2, r3, #8
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	619a      	str	r2, [r3, #24]
      break;
 8001ec0:	e084      	b.n	8001fcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68b9      	ldr	r1, [r7, #8]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 fb13 	bl	80024f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	69da      	ldr	r2, [r3, #28]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f042 0208 	orr.w	r2, r2, #8
 8001edc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	69da      	ldr	r2, [r3, #28]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0204 	bic.w	r2, r2, #4
 8001eec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	69d9      	ldr	r1, [r3, #28]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	61da      	str	r2, [r3, #28]
      break;
 8001f00:	e064      	b.n	8001fcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68b9      	ldr	r1, [r7, #8]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 fb7b 	bl	8002604 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	69da      	ldr	r2, [r3, #28]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	69da      	ldr	r2, [r3, #28]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	69d9      	ldr	r1, [r3, #28]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	021a      	lsls	r2, r3, #8
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	61da      	str	r2, [r3, #28]
      break;
 8001f42:	e043      	b.n	8001fcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 fbc4 	bl	80026d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0208 	orr.w	r2, r2, #8
 8001f5e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0204 	bic.w	r2, r2, #4
 8001f6e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	691a      	ldr	r2, [r3, #16]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001f82:	e023      	b.n	8001fcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 fc08 	bl	80027a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f9e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	021a      	lsls	r2, r3, #8
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001fc4:	e002      	b.n	8001fcc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	75fb      	strb	r3, [r7, #23]
      break;
 8001fca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop

08001fe0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_TIM_ConfigClockSource+0x1c>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e0b6      	b.n	800216a <HAL_TIM_ConfigClockSource+0x18a>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800201a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800201e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002026:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002038:	d03e      	beq.n	80020b8 <HAL_TIM_ConfigClockSource+0xd8>
 800203a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800203e:	f200 8087 	bhi.w	8002150 <HAL_TIM_ConfigClockSource+0x170>
 8002042:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002046:	f000 8086 	beq.w	8002156 <HAL_TIM_ConfigClockSource+0x176>
 800204a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800204e:	d87f      	bhi.n	8002150 <HAL_TIM_ConfigClockSource+0x170>
 8002050:	2b70      	cmp	r3, #112	@ 0x70
 8002052:	d01a      	beq.n	800208a <HAL_TIM_ConfigClockSource+0xaa>
 8002054:	2b70      	cmp	r3, #112	@ 0x70
 8002056:	d87b      	bhi.n	8002150 <HAL_TIM_ConfigClockSource+0x170>
 8002058:	2b60      	cmp	r3, #96	@ 0x60
 800205a:	d050      	beq.n	80020fe <HAL_TIM_ConfigClockSource+0x11e>
 800205c:	2b60      	cmp	r3, #96	@ 0x60
 800205e:	d877      	bhi.n	8002150 <HAL_TIM_ConfigClockSource+0x170>
 8002060:	2b50      	cmp	r3, #80	@ 0x50
 8002062:	d03c      	beq.n	80020de <HAL_TIM_ConfigClockSource+0xfe>
 8002064:	2b50      	cmp	r3, #80	@ 0x50
 8002066:	d873      	bhi.n	8002150 <HAL_TIM_ConfigClockSource+0x170>
 8002068:	2b40      	cmp	r3, #64	@ 0x40
 800206a:	d058      	beq.n	800211e <HAL_TIM_ConfigClockSource+0x13e>
 800206c:	2b40      	cmp	r3, #64	@ 0x40
 800206e:	d86f      	bhi.n	8002150 <HAL_TIM_ConfigClockSource+0x170>
 8002070:	2b30      	cmp	r3, #48	@ 0x30
 8002072:	d064      	beq.n	800213e <HAL_TIM_ConfigClockSource+0x15e>
 8002074:	2b30      	cmp	r3, #48	@ 0x30
 8002076:	d86b      	bhi.n	8002150 <HAL_TIM_ConfigClockSource+0x170>
 8002078:	2b20      	cmp	r3, #32
 800207a:	d060      	beq.n	800213e <HAL_TIM_ConfigClockSource+0x15e>
 800207c:	2b20      	cmp	r3, #32
 800207e:	d867      	bhi.n	8002150 <HAL_TIM_ConfigClockSource+0x170>
 8002080:	2b00      	cmp	r3, #0
 8002082:	d05c      	beq.n	800213e <HAL_TIM_ConfigClockSource+0x15e>
 8002084:	2b10      	cmp	r3, #16
 8002086:	d05a      	beq.n	800213e <HAL_TIM_ConfigClockSource+0x15e>
 8002088:	e062      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800209a:	f000 fc61 	bl	8002960 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80020ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	609a      	str	r2, [r3, #8]
      break;
 80020b6:	e04f      	b.n	8002158 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020c8:	f000 fc4a 	bl	8002960 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020da:	609a      	str	r2, [r3, #8]
      break;
 80020dc:	e03c      	b.n	8002158 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ea:	461a      	mov	r2, r3
 80020ec:	f000 fbbe 	bl	800286c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2150      	movs	r1, #80	@ 0x50
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 fc17 	bl	800292a <TIM_ITRx_SetConfig>
      break;
 80020fc:	e02c      	b.n	8002158 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800210a:	461a      	mov	r2, r3
 800210c:	f000 fbdd 	bl	80028ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2160      	movs	r1, #96	@ 0x60
 8002116:	4618      	mov	r0, r3
 8002118:	f000 fc07 	bl	800292a <TIM_ITRx_SetConfig>
      break;
 800211c:	e01c      	b.n	8002158 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800212a:	461a      	mov	r2, r3
 800212c:	f000 fb9e 	bl	800286c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2140      	movs	r1, #64	@ 0x40
 8002136:	4618      	mov	r0, r3
 8002138:	f000 fbf7 	bl	800292a <TIM_ITRx_SetConfig>
      break;
 800213c:	e00c      	b.n	8002158 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4619      	mov	r1, r3
 8002148:	4610      	mov	r0, r2
 800214a:	f000 fbee 	bl	800292a <TIM_ITRx_SetConfig>
      break;
 800214e:	e003      	b.n	8002158 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	73fb      	strb	r3, [r7, #15]
      break;
 8002154:	e000      	b.n	8002158 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002156:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002168:	7bfb      	ldrb	r3, [r7, #15]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a46      	ldr	r2, [pc, #280]	@ (80022a0 <TIM_Base_SetConfig+0x12c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d013      	beq.n	80021b4 <TIM_Base_SetConfig+0x40>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002192:	d00f      	beq.n	80021b4 <TIM_Base_SetConfig+0x40>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a43      	ldr	r2, [pc, #268]	@ (80022a4 <TIM_Base_SetConfig+0x130>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d00b      	beq.n	80021b4 <TIM_Base_SetConfig+0x40>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a42      	ldr	r2, [pc, #264]	@ (80022a8 <TIM_Base_SetConfig+0x134>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d007      	beq.n	80021b4 <TIM_Base_SetConfig+0x40>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a41      	ldr	r2, [pc, #260]	@ (80022ac <TIM_Base_SetConfig+0x138>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d003      	beq.n	80021b4 <TIM_Base_SetConfig+0x40>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a40      	ldr	r2, [pc, #256]	@ (80022b0 <TIM_Base_SetConfig+0x13c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d108      	bne.n	80021c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a35      	ldr	r2, [pc, #212]	@ (80022a0 <TIM_Base_SetConfig+0x12c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d01f      	beq.n	800220e <TIM_Base_SetConfig+0x9a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021d4:	d01b      	beq.n	800220e <TIM_Base_SetConfig+0x9a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a32      	ldr	r2, [pc, #200]	@ (80022a4 <TIM_Base_SetConfig+0x130>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d017      	beq.n	800220e <TIM_Base_SetConfig+0x9a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a31      	ldr	r2, [pc, #196]	@ (80022a8 <TIM_Base_SetConfig+0x134>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d013      	beq.n	800220e <TIM_Base_SetConfig+0x9a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a30      	ldr	r2, [pc, #192]	@ (80022ac <TIM_Base_SetConfig+0x138>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d00f      	beq.n	800220e <TIM_Base_SetConfig+0x9a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a2f      	ldr	r2, [pc, #188]	@ (80022b0 <TIM_Base_SetConfig+0x13c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d00b      	beq.n	800220e <TIM_Base_SetConfig+0x9a>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a2e      	ldr	r2, [pc, #184]	@ (80022b4 <TIM_Base_SetConfig+0x140>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d007      	beq.n	800220e <TIM_Base_SetConfig+0x9a>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a2d      	ldr	r2, [pc, #180]	@ (80022b8 <TIM_Base_SetConfig+0x144>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d003      	beq.n	800220e <TIM_Base_SetConfig+0x9a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a2c      	ldr	r2, [pc, #176]	@ (80022bc <TIM_Base_SetConfig+0x148>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d108      	bne.n	8002220 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4313      	orrs	r3, r2
 800221e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	4313      	orrs	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a16      	ldr	r2, [pc, #88]	@ (80022a0 <TIM_Base_SetConfig+0x12c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d00f      	beq.n	800226c <TIM_Base_SetConfig+0xf8>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a18      	ldr	r2, [pc, #96]	@ (80022b0 <TIM_Base_SetConfig+0x13c>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d00b      	beq.n	800226c <TIM_Base_SetConfig+0xf8>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a17      	ldr	r2, [pc, #92]	@ (80022b4 <TIM_Base_SetConfig+0x140>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d007      	beq.n	800226c <TIM_Base_SetConfig+0xf8>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a16      	ldr	r2, [pc, #88]	@ (80022b8 <TIM_Base_SetConfig+0x144>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d003      	beq.n	800226c <TIM_Base_SetConfig+0xf8>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a15      	ldr	r2, [pc, #84]	@ (80022bc <TIM_Base_SetConfig+0x148>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d103      	bne.n	8002274 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	691a      	ldr	r2, [r3, #16]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b01      	cmp	r3, #1
 8002284:	d105      	bne.n	8002292 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	f023 0201 	bic.w	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	611a      	str	r2, [r3, #16]
  }
}
 8002292:	bf00      	nop
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40012c00 	.word	0x40012c00
 80022a4:	40000400 	.word	0x40000400
 80022a8:	40000800 	.word	0x40000800
 80022ac:	40000c00 	.word	0x40000c00
 80022b0:	40013400 	.word	0x40013400
 80022b4:	40014000 	.word	0x40014000
 80022b8:	40014400 	.word	0x40014400
 80022bc:	40014800 	.word	0x40014800

080022c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b087      	sub	sp, #28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	f023 0201 	bic.w	r2, r3, #1
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f023 0303 	bic.w	r3, r3, #3
 80022fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	4313      	orrs	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f023 0302 	bic.w	r3, r3, #2
 800230c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	4313      	orrs	r3, r2
 8002316:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a2c      	ldr	r2, [pc, #176]	@ (80023cc <TIM_OC1_SetConfig+0x10c>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d00f      	beq.n	8002340 <TIM_OC1_SetConfig+0x80>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a2b      	ldr	r2, [pc, #172]	@ (80023d0 <TIM_OC1_SetConfig+0x110>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d00b      	beq.n	8002340 <TIM_OC1_SetConfig+0x80>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a2a      	ldr	r2, [pc, #168]	@ (80023d4 <TIM_OC1_SetConfig+0x114>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d007      	beq.n	8002340 <TIM_OC1_SetConfig+0x80>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a29      	ldr	r2, [pc, #164]	@ (80023d8 <TIM_OC1_SetConfig+0x118>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d003      	beq.n	8002340 <TIM_OC1_SetConfig+0x80>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a28      	ldr	r2, [pc, #160]	@ (80023dc <TIM_OC1_SetConfig+0x11c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d10c      	bne.n	800235a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f023 0308 	bic.w	r3, r3, #8
 8002346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	4313      	orrs	r3, r2
 8002350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f023 0304 	bic.w	r3, r3, #4
 8002358:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a1b      	ldr	r2, [pc, #108]	@ (80023cc <TIM_OC1_SetConfig+0x10c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d00f      	beq.n	8002382 <TIM_OC1_SetConfig+0xc2>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a1a      	ldr	r2, [pc, #104]	@ (80023d0 <TIM_OC1_SetConfig+0x110>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00b      	beq.n	8002382 <TIM_OC1_SetConfig+0xc2>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a19      	ldr	r2, [pc, #100]	@ (80023d4 <TIM_OC1_SetConfig+0x114>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d007      	beq.n	8002382 <TIM_OC1_SetConfig+0xc2>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a18      	ldr	r2, [pc, #96]	@ (80023d8 <TIM_OC1_SetConfig+0x118>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d003      	beq.n	8002382 <TIM_OC1_SetConfig+0xc2>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a17      	ldr	r2, [pc, #92]	@ (80023dc <TIM_OC1_SetConfig+0x11c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d111      	bne.n	80023a6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002388:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002390:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	621a      	str	r2, [r3, #32]
}
 80023c0:	bf00      	nop
 80023c2:	371c      	adds	r7, #28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	40012c00 	.word	0x40012c00
 80023d0:	40013400 	.word	0x40013400
 80023d4:	40014000 	.word	0x40014000
 80023d8:	40014400 	.word	0x40014400
 80023dc:	40014800 	.word	0x40014800

080023e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b087      	sub	sp, #28
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	f023 0210 	bic.w	r2, r3, #16
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800240e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800241a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	021b      	lsls	r3, r3, #8
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	4313      	orrs	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f023 0320 	bic.w	r3, r3, #32
 800242e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	011b      	lsls	r3, r3, #4
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4313      	orrs	r3, r2
 800243a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a28      	ldr	r2, [pc, #160]	@ (80024e0 <TIM_OC2_SetConfig+0x100>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d003      	beq.n	800244c <TIM_OC2_SetConfig+0x6c>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a27      	ldr	r2, [pc, #156]	@ (80024e4 <TIM_OC2_SetConfig+0x104>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d10d      	bne.n	8002468 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	4313      	orrs	r3, r2
 800245e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002466:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a1d      	ldr	r2, [pc, #116]	@ (80024e0 <TIM_OC2_SetConfig+0x100>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d00f      	beq.n	8002490 <TIM_OC2_SetConfig+0xb0>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a1c      	ldr	r2, [pc, #112]	@ (80024e4 <TIM_OC2_SetConfig+0x104>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d00b      	beq.n	8002490 <TIM_OC2_SetConfig+0xb0>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a1b      	ldr	r2, [pc, #108]	@ (80024e8 <TIM_OC2_SetConfig+0x108>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d007      	beq.n	8002490 <TIM_OC2_SetConfig+0xb0>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a1a      	ldr	r2, [pc, #104]	@ (80024ec <TIM_OC2_SetConfig+0x10c>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d003      	beq.n	8002490 <TIM_OC2_SetConfig+0xb0>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a19      	ldr	r2, [pc, #100]	@ (80024f0 <TIM_OC2_SetConfig+0x110>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d113      	bne.n	80024b8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002496:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800249e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	621a      	str	r2, [r3, #32]
}
 80024d2:	bf00      	nop
 80024d4:	371c      	adds	r7, #28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40012c00 	.word	0x40012c00
 80024e4:	40013400 	.word	0x40013400
 80024e8:	40014000 	.word	0x40014000
 80024ec:	40014400 	.word	0x40014400
 80024f0:	40014800 	.word	0x40014800

080024f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f023 0303 	bic.w	r3, r3, #3
 800252e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	4313      	orrs	r3, r2
 800254c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a27      	ldr	r2, [pc, #156]	@ (80025f0 <TIM_OC3_SetConfig+0xfc>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d003      	beq.n	800255e <TIM_OC3_SetConfig+0x6a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a26      	ldr	r2, [pc, #152]	@ (80025f4 <TIM_OC3_SetConfig+0x100>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d10d      	bne.n	800257a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002564:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	021b      	lsls	r3, r3, #8
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	4313      	orrs	r3, r2
 8002570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a1c      	ldr	r2, [pc, #112]	@ (80025f0 <TIM_OC3_SetConfig+0xfc>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d00f      	beq.n	80025a2 <TIM_OC3_SetConfig+0xae>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a1b      	ldr	r2, [pc, #108]	@ (80025f4 <TIM_OC3_SetConfig+0x100>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d00b      	beq.n	80025a2 <TIM_OC3_SetConfig+0xae>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a1a      	ldr	r2, [pc, #104]	@ (80025f8 <TIM_OC3_SetConfig+0x104>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d007      	beq.n	80025a2 <TIM_OC3_SetConfig+0xae>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a19      	ldr	r2, [pc, #100]	@ (80025fc <TIM_OC3_SetConfig+0x108>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d003      	beq.n	80025a2 <TIM_OC3_SetConfig+0xae>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a18      	ldr	r2, [pc, #96]	@ (8002600 <TIM_OC3_SetConfig+0x10c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d113      	bne.n	80025ca <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80025a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80025b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	621a      	str	r2, [r3, #32]
}
 80025e4:	bf00      	nop
 80025e6:	371c      	adds	r7, #28
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	40012c00 	.word	0x40012c00
 80025f4:	40013400 	.word	0x40013400
 80025f8:	40014000 	.word	0x40014000
 80025fc:	40014400 	.word	0x40014400
 8002600:	40014800 	.word	0x40014800

08002604 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002632:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800263e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	021b      	lsls	r3, r3, #8
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4313      	orrs	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002652:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	031b      	lsls	r3, r3, #12
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	4313      	orrs	r3, r2
 800265e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a18      	ldr	r2, [pc, #96]	@ (80026c4 <TIM_OC4_SetConfig+0xc0>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d00f      	beq.n	8002688 <TIM_OC4_SetConfig+0x84>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a17      	ldr	r2, [pc, #92]	@ (80026c8 <TIM_OC4_SetConfig+0xc4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d00b      	beq.n	8002688 <TIM_OC4_SetConfig+0x84>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a16      	ldr	r2, [pc, #88]	@ (80026cc <TIM_OC4_SetConfig+0xc8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d007      	beq.n	8002688 <TIM_OC4_SetConfig+0x84>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a15      	ldr	r2, [pc, #84]	@ (80026d0 <TIM_OC4_SetConfig+0xcc>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d003      	beq.n	8002688 <TIM_OC4_SetConfig+0x84>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a14      	ldr	r2, [pc, #80]	@ (80026d4 <TIM_OC4_SetConfig+0xd0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d109      	bne.n	800269c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800268e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	019b      	lsls	r3, r3, #6
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	4313      	orrs	r3, r2
 800269a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	621a      	str	r2, [r3, #32]
}
 80026b6:	bf00      	nop
 80026b8:	371c      	adds	r7, #28
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40012c00 	.word	0x40012c00
 80026c8:	40013400 	.word	0x40013400
 80026cc:	40014000 	.word	0x40014000
 80026d0:	40014400 	.word	0x40014400
 80026d4:	40014800 	.word	0x40014800

080026d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80026d8:	b480      	push	{r7}
 80026da:	b087      	sub	sp, #28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800270a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	4313      	orrs	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800271c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	041b      	lsls	r3, r3, #16
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4313      	orrs	r3, r2
 8002728:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a17      	ldr	r2, [pc, #92]	@ (800278c <TIM_OC5_SetConfig+0xb4>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00f      	beq.n	8002752 <TIM_OC5_SetConfig+0x7a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a16      	ldr	r2, [pc, #88]	@ (8002790 <TIM_OC5_SetConfig+0xb8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00b      	beq.n	8002752 <TIM_OC5_SetConfig+0x7a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a15      	ldr	r2, [pc, #84]	@ (8002794 <TIM_OC5_SetConfig+0xbc>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d007      	beq.n	8002752 <TIM_OC5_SetConfig+0x7a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a14      	ldr	r2, [pc, #80]	@ (8002798 <TIM_OC5_SetConfig+0xc0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d003      	beq.n	8002752 <TIM_OC5_SetConfig+0x7a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a13      	ldr	r2, [pc, #76]	@ (800279c <TIM_OC5_SetConfig+0xc4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d109      	bne.n	8002766 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002758:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	4313      	orrs	r3, r2
 8002764:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	621a      	str	r2, [r3, #32]
}
 8002780:	bf00      	nop
 8002782:	371c      	adds	r7, #28
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	40012c00 	.word	0x40012c00
 8002790:	40013400 	.word	0x40013400
 8002794:	40014000 	.word	0x40014000
 8002798:	40014400 	.word	0x40014400
 800279c:	40014800 	.word	0x40014800

080027a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	021b      	lsls	r3, r3, #8
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4313      	orrs	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80027e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	051b      	lsls	r3, r3, #20
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a18      	ldr	r2, [pc, #96]	@ (8002858 <TIM_OC6_SetConfig+0xb8>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d00f      	beq.n	800281c <TIM_OC6_SetConfig+0x7c>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a17      	ldr	r2, [pc, #92]	@ (800285c <TIM_OC6_SetConfig+0xbc>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d00b      	beq.n	800281c <TIM_OC6_SetConfig+0x7c>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a16      	ldr	r2, [pc, #88]	@ (8002860 <TIM_OC6_SetConfig+0xc0>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d007      	beq.n	800281c <TIM_OC6_SetConfig+0x7c>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a15      	ldr	r2, [pc, #84]	@ (8002864 <TIM_OC6_SetConfig+0xc4>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d003      	beq.n	800281c <TIM_OC6_SetConfig+0x7c>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a14      	ldr	r2, [pc, #80]	@ (8002868 <TIM_OC6_SetConfig+0xc8>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d109      	bne.n	8002830 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002822:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	029b      	lsls	r3, r3, #10
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	4313      	orrs	r3, r2
 800282e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	621a      	str	r2, [r3, #32]
}
 800284a:	bf00      	nop
 800284c:	371c      	adds	r7, #28
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40012c00 	.word	0x40012c00
 800285c:	40013400 	.word	0x40013400
 8002860:	40014000 	.word	0x40014000
 8002864:	40014400 	.word	0x40014400
 8002868:	40014800 	.word	0x40014800

0800286c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	f023 0201 	bic.w	r2, r3, #1
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f023 030a 	bic.w	r3, r3, #10
 80028a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	621a      	str	r2, [r3, #32]
}
 80028be:	bf00      	nop
 80028c0:	371c      	adds	r7, #28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b087      	sub	sp, #28
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	60f8      	str	r0, [r7, #12]
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	f023 0210 	bic.w	r2, r3, #16
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80028f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	031b      	lsls	r3, r3, #12
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002906:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	4313      	orrs	r3, r2
 8002910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	621a      	str	r2, [r3, #32]
}
 800291e:	bf00      	nop
 8002920:	371c      	adds	r7, #28
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800292a:	b480      	push	{r7}
 800292c:	b085      	sub	sp, #20
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
 8002932:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002940:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4313      	orrs	r3, r2
 8002948:	f043 0307 	orr.w	r3, r3, #7
 800294c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	609a      	str	r2, [r3, #8]
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002960:	b480      	push	{r7}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800297a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	021a      	lsls	r2, r3, #8
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	431a      	orrs	r2, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	4313      	orrs	r3, r2
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	609a      	str	r2, [r3, #8]
}
 8002994:	bf00      	nop
 8002996:	371c      	adds	r7, #28
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	2201      	movs	r2, #1
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a1a      	ldr	r2, [r3, #32]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	43db      	mvns	r3, r3
 80029c2:	401a      	ands	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a1a      	ldr	r2, [r3, #32]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f003 031f 	and.w	r3, r3, #31
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	fa01 f303 	lsl.w	r3, r1, r3
 80029d8:	431a      	orrs	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	621a      	str	r2, [r3, #32]
}
 80029de:	bf00      	nop
 80029e0:	371c      	adds	r7, #28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e068      	b.n	8002ad6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a2e      	ldr	r2, [pc, #184]	@ (8002ae4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d004      	beq.n	8002a38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a2d      	ldr	r2, [pc, #180]	@ (8002ae8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d108      	bne.n	8002a4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002a3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a1e      	ldr	r2, [pc, #120]	@ (8002ae4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d01d      	beq.n	8002aaa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a76:	d018      	beq.n	8002aaa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8002aec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d013      	beq.n	8002aaa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a1a      	ldr	r2, [pc, #104]	@ (8002af0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d00e      	beq.n	8002aaa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a18      	ldr	r2, [pc, #96]	@ (8002af4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d009      	beq.n	8002aaa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a13      	ldr	r2, [pc, #76]	@ (8002ae8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d004      	beq.n	8002aaa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a14      	ldr	r2, [pc, #80]	@ (8002af8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ab0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40012c00 	.word	0x40012c00
 8002ae8:	40013400 	.word	0x40013400
 8002aec:	40000400 	.word	0x40000400
 8002af0:	40000800 	.word	0x40000800
 8002af4:	40000c00 	.word	0x40000c00
 8002af8:	40014000 	.word	0x40014000

08002afc <memset>:
 8002afc:	4402      	add	r2, r0
 8002afe:	4603      	mov	r3, r0
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d100      	bne.n	8002b06 <memset+0xa>
 8002b04:	4770      	bx	lr
 8002b06:	f803 1b01 	strb.w	r1, [r3], #1
 8002b0a:	e7f9      	b.n	8002b00 <memset+0x4>

08002b0c <__libc_init_array>:
 8002b0c:	b570      	push	{r4, r5, r6, lr}
 8002b0e:	4d0d      	ldr	r5, [pc, #52]	@ (8002b44 <__libc_init_array+0x38>)
 8002b10:	4c0d      	ldr	r4, [pc, #52]	@ (8002b48 <__libc_init_array+0x3c>)
 8002b12:	1b64      	subs	r4, r4, r5
 8002b14:	10a4      	asrs	r4, r4, #2
 8002b16:	2600      	movs	r6, #0
 8002b18:	42a6      	cmp	r6, r4
 8002b1a:	d109      	bne.n	8002b30 <__libc_init_array+0x24>
 8002b1c:	4d0b      	ldr	r5, [pc, #44]	@ (8002b4c <__libc_init_array+0x40>)
 8002b1e:	4c0c      	ldr	r4, [pc, #48]	@ (8002b50 <__libc_init_array+0x44>)
 8002b20:	f000 f818 	bl	8002b54 <_init>
 8002b24:	1b64      	subs	r4, r4, r5
 8002b26:	10a4      	asrs	r4, r4, #2
 8002b28:	2600      	movs	r6, #0
 8002b2a:	42a6      	cmp	r6, r4
 8002b2c:	d105      	bne.n	8002b3a <__libc_init_array+0x2e>
 8002b2e:	bd70      	pop	{r4, r5, r6, pc}
 8002b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b34:	4798      	blx	r3
 8002b36:	3601      	adds	r6, #1
 8002b38:	e7ee      	b.n	8002b18 <__libc_init_array+0xc>
 8002b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b3e:	4798      	blx	r3
 8002b40:	3601      	adds	r6, #1
 8002b42:	e7f2      	b.n	8002b2a <__libc_init_array+0x1e>
 8002b44:	08002bac 	.word	0x08002bac
 8002b48:	08002bac 	.word	0x08002bac
 8002b4c:	08002bac 	.word	0x08002bac
 8002b50:	08002bb0 	.word	0x08002bb0

08002b54 <_init>:
 8002b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b56:	bf00      	nop
 8002b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b5a:	bc08      	pop	{r3}
 8002b5c:	469e      	mov	lr, r3
 8002b5e:	4770      	bx	lr

08002b60 <_fini>:
 8002b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b62:	bf00      	nop
 8002b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b66:	bc08      	pop	{r3}
 8002b68:	469e      	mov	lr, r3
 8002b6a:	4770      	bx	lr
