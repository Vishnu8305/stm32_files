
pwm_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041b8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004340  08004340  00005340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004388  08004388  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004388  08004388  00005388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004390  08004390  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004390  08004390  00005390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004394  08004394  00005394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004398  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  080043a4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  080043a4  0000614c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eca8  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cb2  00000000  00000000  00014ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00016998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b23  00000000  00000000  000177c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d22  00000000  00000000  000182eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010516  00000000  00000000  0003e00d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee855  00000000  00000000  0004e523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013cd78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c1c  00000000  00000000  0013cdbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  001409d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004328 	.word	0x08004328

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004328 	.word	0x08004328

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 fb35 	bl	8000b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f83d 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 f983 	bl	80007d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ca:	f000 f951 	bl	8000770 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004ce:	f000 f889 	bl	80005e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004d2:	f000 f8d5 	bl	8000680 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004d6:	2100      	movs	r1, #0
 80004d8:	4817      	ldr	r0, [pc, #92]	@ (8000538 <main+0x80>)
 80004da:	f002 fa2f 	bl	800293c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80004de:	2108      	movs	r1, #8
 80004e0:	4816      	ldr	r0, [pc, #88]	@ (800053c <main+0x84>)
 80004e2:	f002 fa2b 	bl	800293c <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for(duty_c = 0; duty_c < 100; duty_c++) {
 80004e6:	2300      	movs	r3, #0
 80004e8:	607b      	str	r3, [r7, #4]
 80004ea:	e00d      	b.n	8000508 <main+0x50>
	  	  	          __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (duty_c) * 400);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80004f2:	fb03 f202 	mul.w	r2, r3, r2
 80004f6:	4b11      	ldr	r3, [pc, #68]	@ (800053c <main+0x84>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	639a      	str	r2, [r3, #56]	@ 0x38
	  	  	          HAL_Delay(100);  // Adjust delay if necessary
 80004fc:	2064      	movs	r0, #100	@ 0x64
 80004fe:	f000 fb91 	bl	8000c24 <HAL_Delay>
	  for(duty_c = 0; duty_c < 100; duty_c++) {
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	3301      	adds	r3, #1
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2b63      	cmp	r3, #99	@ 0x63
 800050c:	ddee      	ble.n	80004ec <main+0x34>
	  	  	      }
	  	  	      for(duty_c = 100; duty_c >= 0; duty_c--) {
 800050e:	2364      	movs	r3, #100	@ 0x64
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	e00d      	b.n	8000530 <main+0x78>
	  	  	          __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (duty_c) * 400);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800051a:	fb03 f202 	mul.w	r2, r3, r2
 800051e:	4b07      	ldr	r3, [pc, #28]	@ (800053c <main+0x84>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	639a      	str	r2, [r3, #56]	@ 0x38
	  	  	          HAL_Delay(100);  // Adjust delay if necessary
 8000524:	2064      	movs	r0, #100	@ 0x64
 8000526:	f000 fb7d 	bl	8000c24 <HAL_Delay>
	  	  	      for(duty_c = 100; duty_c >= 0; duty_c--) {
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3b01      	subs	r3, #1
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b00      	cmp	r3, #0
 8000534:	daee      	bge.n	8000514 <main+0x5c>
	  for(duty_c = 0; duty_c < 100; duty_c++) {
 8000536:	e7d6      	b.n	80004e6 <main+0x2e>
 8000538:	20000028 	.word	0x20000028
 800053c:	20000074 	.word	0x20000074

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b096      	sub	sp, #88	@ 0x58
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	2244      	movs	r2, #68	@ 0x44
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f003 febd 	bl	80042ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	463b      	mov	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000562:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000566:	f000 fe1f 	bl	80011a8 <HAL_PWREx_ControlVoltageScaling>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000570:	f000 f980 	bl	8000874 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000574:	2302      	movs	r3, #2
 8000576:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000578:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800057c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057e:	2310      	movs	r3, #16
 8000580:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000586:	2302      	movs	r3, #2
 8000588:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800058a:	2301      	movs	r3, #1
 800058c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800058e:	230a      	movs	r3, #10
 8000590:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000592:	2307      	movs	r3, #7
 8000594:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fe56 	bl	8001254 <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005ae:	f000 f961 	bl	8000874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2303      	movs	r3, #3
 80005b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c6:	463b      	mov	r3, r7
 80005c8:	2104      	movs	r1, #4
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 fa1e 	bl	8001a0c <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005d6:	f000 f94d 	bl	8000874 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3758      	adds	r7, #88	@ 0x58
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ea:	f107 0310 	add.w	r3, r7, #16
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000602:	4b1e      	ldr	r3, [pc, #120]	@ (800067c <MX_TIM2_Init+0x98>)
 8000604:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000608:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800060a:	4b1c      	ldr	r3, [pc, #112]	@ (800067c <MX_TIM2_Init+0x98>)
 800060c:	2200      	movs	r2, #0
 800060e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000610:	4b1a      	ldr	r3, [pc, #104]	@ (800067c <MX_TIM2_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000616:	4b19      	ldr	r3, [pc, #100]	@ (800067c <MX_TIM2_Init+0x98>)
 8000618:	f04f 32ff 	mov.w	r2, #4294967295
 800061c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800061e:	4b17      	ldr	r3, [pc, #92]	@ (800067c <MX_TIM2_Init+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000624:	4b15      	ldr	r3, [pc, #84]	@ (800067c <MX_TIM2_Init+0x98>)
 8000626:	2200      	movs	r2, #0
 8000628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800062a:	4814      	ldr	r0, [pc, #80]	@ (800067c <MX_TIM2_Init+0x98>)
 800062c:	f002 f8ce 	bl	80027cc <HAL_TIM_Base_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000636:	f000 f91d 	bl	8000874 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800063a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800063e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	4619      	mov	r1, r3
 8000646:	480d      	ldr	r0, [pc, #52]	@ (800067c <MX_TIM2_Init+0x98>)
 8000648:	f002 fb92 	bl	8002d70 <HAL_TIM_ConfigClockSource>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000652:	f000 f90f 	bl	8000874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	4619      	mov	r1, r3
 8000662:	4806      	ldr	r0, [pc, #24]	@ (800067c <MX_TIM2_Init+0x98>)
 8000664:	f003 f88a 	bl	800377c <HAL_TIMEx_MasterConfigSynchronization>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800066e:	f000 f901 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	3720      	adds	r7, #32
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000028 	.word	0x20000028

08000680 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08e      	sub	sp, #56	@ 0x38
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000686:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a0:	463b      	mov	r3, r7
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]
 80006ae:	615a      	str	r2, [r3, #20]
 80006b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000768 <MX_TIM3_Init+0xe8>)
 80006b4:	4a2d      	ldr	r2, [pc, #180]	@ (800076c <MX_TIM3_Init+0xec>)
 80006b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000768 <MX_TIM3_Init+0xe8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006be:	4b2a      	ldr	r3, [pc, #168]	@ (8000768 <MX_TIM3_Init+0xe8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80006c4:	4b28      	ldr	r3, [pc, #160]	@ (8000768 <MX_TIM3_Init+0xe8>)
 80006c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006cc:	4b26      	ldr	r3, [pc, #152]	@ (8000768 <MX_TIM3_Init+0xe8>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d2:	4b25      	ldr	r3, [pc, #148]	@ (8000768 <MX_TIM3_Init+0xe8>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006d8:	4823      	ldr	r0, [pc, #140]	@ (8000768 <MX_TIM3_Init+0xe8>)
 80006da:	f002 f877 	bl	80027cc <HAL_TIM_Base_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80006e4:	f000 f8c6 	bl	8000874 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006f2:	4619      	mov	r1, r3
 80006f4:	481c      	ldr	r0, [pc, #112]	@ (8000768 <MX_TIM3_Init+0xe8>)
 80006f6:	f002 fb3b 	bl	8002d70 <HAL_TIM_ConfigClockSource>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000700:	f000 f8b8 	bl	8000874 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000704:	4818      	ldr	r0, [pc, #96]	@ (8000768 <MX_TIM3_Init+0xe8>)
 8000706:	f002 f8b8 	bl	800287a <HAL_TIM_PWM_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000710:	f000 f8b0 	bl	8000874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4619      	mov	r1, r3
 8000722:	4811      	ldr	r0, [pc, #68]	@ (8000768 <MX_TIM3_Init+0xe8>)
 8000724:	f003 f82a 	bl	800377c <HAL_TIMEx_MasterConfigSynchronization>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800072e:	f000 f8a1 	bl	8000874 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000732:	2360      	movs	r3, #96	@ 0x60
 8000734:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000742:	463b      	mov	r3, r7
 8000744:	2204      	movs	r2, #4
 8000746:	4619      	mov	r1, r3
 8000748:	4807      	ldr	r0, [pc, #28]	@ (8000768 <MX_TIM3_Init+0xe8>)
 800074a:	f002 f9fd 	bl	8002b48 <HAL_TIM_PWM_ConfigChannel>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000754:	f000 f88e 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000758:	4803      	ldr	r0, [pc, #12]	@ (8000768 <MX_TIM3_Init+0xe8>)
 800075a:	f000 f8e7 	bl	800092c <HAL_TIM_MspPostInit>

}
 800075e:	bf00      	nop
 8000760:	3738      	adds	r7, #56	@ 0x38
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000074 	.word	0x20000074
 800076c:	40000400 	.word	0x40000400

08000770 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000774:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <MX_USART2_UART_Init+0x58>)
 8000776:	4a15      	ldr	r2, [pc, #84]	@ (80007cc <MX_USART2_UART_Init+0x5c>)
 8000778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077a:	4b13      	ldr	r3, [pc, #76]	@ (80007c8 <MX_USART2_UART_Init+0x58>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <MX_USART2_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <MX_USART2_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <MX_USART2_UART_Init+0x58>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <MX_USART2_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <MX_USART2_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <MX_USART2_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <MX_USART2_UART_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <MX_USART2_UART_Init+0x58>)
 80007b4:	f003 f86a 	bl	800388c <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007be:	f000 f859 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200000c0 	.word	0x200000c0
 80007cc:	40004400 	.word	0x40004400

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	@ 0x28
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b21      	ldr	r3, [pc, #132]	@ (800086c <MX_GPIO_Init+0x9c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a20      	ldr	r2, [pc, #128]	@ (800086c <MX_GPIO_Init+0x9c>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b1e      	ldr	r3, [pc, #120]	@ (800086c <MX_GPIO_Init+0x9c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	4b1b      	ldr	r3, [pc, #108]	@ (800086c <MX_GPIO_Init+0x9c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a1a      	ldr	r2, [pc, #104]	@ (800086c <MX_GPIO_Init+0x9c>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b18      	ldr	r3, [pc, #96]	@ (800086c <MX_GPIO_Init+0x9c>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	4b15      	ldr	r3, [pc, #84]	@ (800086c <MX_GPIO_Init+0x9c>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a14      	ldr	r2, [pc, #80]	@ (800086c <MX_GPIO_Init+0x9c>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b12      	ldr	r3, [pc, #72]	@ (800086c <MX_GPIO_Init+0x9c>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <MX_GPIO_Init+0x9c>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a0e      	ldr	r2, [pc, #56]	@ (800086c <MX_GPIO_Init+0x9c>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <MX_GPIO_Init+0x9c>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000846:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800084c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4619      	mov	r1, r3
 800085c:	4804      	ldr	r0, [pc, #16]	@ (8000870 <MX_GPIO_Init+0xa0>)
 800085e:	f000 faeb 	bl	8000e38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000862:	bf00      	nop
 8000864:	3728      	adds	r7, #40	@ 0x28
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40021000 	.word	0x40021000
 8000870:	48000800 	.word	0x48000800

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
}
 800087a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <Error_Handler+0x8>

08000880 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <HAL_MspInit+0x44>)
 8000888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800088a:	4a0e      	ldr	r2, [pc, #56]	@ (80008c4 <HAL_MspInit+0x44>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6613      	str	r3, [r2, #96]	@ 0x60
 8000892:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <HAL_MspInit+0x44>)
 8000894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <HAL_MspInit+0x44>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008a2:	4a08      	ldr	r2, [pc, #32]	@ (80008c4 <HAL_MspInit+0x44>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80008aa:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <HAL_MspInit+0x44>)
 80008ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000

080008c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008d8:	d10c      	bne.n	80008f4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008da:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <HAL_TIM_Base_MspInit+0x5c>)
 80008dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008de:	4a11      	ldr	r2, [pc, #68]	@ (8000924 <HAL_TIM_Base_MspInit+0x5c>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80008e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <HAL_TIM_Base_MspInit+0x5c>)
 80008e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008f2:	e010      	b.n	8000916 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000928 <HAL_TIM_Base_MspInit+0x60>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d10b      	bne.n	8000916 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <HAL_TIM_Base_MspInit+0x5c>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000902:	4a08      	ldr	r2, [pc, #32]	@ (8000924 <HAL_TIM_Base_MspInit+0x5c>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	6593      	str	r3, [r2, #88]	@ 0x58
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_TIM_Base_MspInit+0x5c>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40021000 	.word	0x40021000
 8000928:	40000400 	.word	0x40000400

0800092c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a11      	ldr	r2, [pc, #68]	@ (8000990 <HAL_TIM_MspPostInit+0x64>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d11b      	bne.n	8000986 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <HAL_TIM_MspPostInit+0x68>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000952:	4a10      	ldr	r2, [pc, #64]	@ (8000994 <HAL_TIM_MspPostInit+0x68>)
 8000954:	f043 0304 	orr.w	r3, r3, #4
 8000958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800095a:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <HAL_TIM_MspPostInit+0x68>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095e:	f003 0304 	and.w	r3, r3, #4
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000966:	2380      	movs	r3, #128	@ 0x80
 8000968:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000976:	2302      	movs	r3, #2
 8000978:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097a:	f107 030c 	add.w	r3, r7, #12
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	@ (8000998 <HAL_TIM_MspPostInit+0x6c>)
 8000982:	f000 fa59 	bl	8000e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000986:	bf00      	nop
 8000988:	3720      	adds	r7, #32
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40000400 	.word	0x40000400
 8000994:	40021000 	.word	0x40021000
 8000998:	48000800 	.word	0x48000800

0800099c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b0ac      	sub	sp, #176	@ 0xb0
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2288      	movs	r2, #136	@ 0x88
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f003 fc86 	bl	80042ce <memset>
  if(huart->Instance==USART2)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a21      	ldr	r2, [pc, #132]	@ (8000a4c <HAL_UART_MspInit+0xb0>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d13b      	bne.n	8000a44 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4618      	mov	r0, r3
 80009da:	f001 fa3b 	bl	8001e54 <HAL_RCCEx_PeriphCLKConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009e4:	f7ff ff46 	bl	8000874 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009e8:	4b19      	ldr	r3, [pc, #100]	@ (8000a50 <HAL_UART_MspInit+0xb4>)
 80009ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ec:	4a18      	ldr	r2, [pc, #96]	@ (8000a50 <HAL_UART_MspInit+0xb4>)
 80009ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80009f4:	4b16      	ldr	r3, [pc, #88]	@ (8000a50 <HAL_UART_MspInit+0xb4>)
 80009f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a00:	4b13      	ldr	r3, [pc, #76]	@ (8000a50 <HAL_UART_MspInit+0xb4>)
 8000a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a04:	4a12      	ldr	r2, [pc, #72]	@ (8000a50 <HAL_UART_MspInit+0xb4>)
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a0c:	4b10      	ldr	r3, [pc, #64]	@ (8000a50 <HAL_UART_MspInit+0xb4>)
 8000a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a18:	230c      	movs	r3, #12
 8000a1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a30:	2307      	movs	r3, #7
 8000a32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a40:	f000 f9fa 	bl	8000e38 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a44:	bf00      	nop
 8000a46:	37b0      	adds	r7, #176	@ 0xb0
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40004400 	.word	0x40004400
 8000a50:	40021000 	.word	0x40021000

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <NMI_Handler+0x4>

08000a5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <BusFault_Handler+0x4>

08000a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <UsageFault_Handler+0x4>

08000a7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aaa:	f000 f89b 	bl	8000be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <SystemInit+0x20>)
 8000aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000abe:	4a05      	ldr	r2, [pc, #20]	@ (8000ad4 <SystemInit+0x20>)
 8000ac0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ac4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ad8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000adc:	f7ff ffea 	bl	8000ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae0:	480c      	ldr	r0, [pc, #48]	@ (8000b14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ae2:	490d      	ldr	r1, [pc, #52]	@ (8000b18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b1c <LoopForever+0xe>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae8:	e002      	b.n	8000af0 <LoopCopyDataInit>

08000aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aee:	3304      	adds	r3, #4

08000af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af4:	d3f9      	bcc.n	8000aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af8:	4c0a      	ldr	r4, [pc, #40]	@ (8000b24 <LoopForever+0x16>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000afc:	e001      	b.n	8000b02 <LoopFillZerobss>

08000afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b00:	3204      	adds	r2, #4

08000b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b04:	d3fb      	bcc.n	8000afe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b06:	f003 fbeb 	bl	80042e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b0a:	f7ff fcd5 	bl	80004b8 <main>

08000b0e <LoopForever>:

LoopForever:
    b LoopForever
 8000b0e:	e7fe      	b.n	8000b0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b10:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b1c:	08004398 	.word	0x08004398
  ldr r2, =_sbss
 8000b20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b24:	2000014c 	.word	0x2000014c

08000b28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC1_2_IRQHandler>
	...

08000b2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b36:	4b0c      	ldr	r3, [pc, #48]	@ (8000b68 <HAL_Init+0x3c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b68 <HAL_Init+0x3c>)
 8000b3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b40:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b42:	2003      	movs	r0, #3
 8000b44:	f000 f944 	bl	8000dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f000 f80f 	bl	8000b6c <HAL_InitTick>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d002      	beq.n	8000b5a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b54:	2301      	movs	r3, #1
 8000b56:	71fb      	strb	r3, [r7, #7]
 8000b58:	e001      	b.n	8000b5e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b5a:	f7ff fe91 	bl	8000880 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40022000 	.word	0x40022000

08000b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b74:	2300      	movs	r3, #0
 8000b76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b78:	4b17      	ldr	r3, [pc, #92]	@ (8000bd8 <HAL_InitTick+0x6c>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d023      	beq.n	8000bc8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b80:	4b16      	ldr	r3, [pc, #88]	@ (8000bdc <HAL_InitTick+0x70>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b14      	ldr	r3, [pc, #80]	@ (8000bd8 <HAL_InitTick+0x6c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 f941 	bl	8000e1e <HAL_SYSTICK_Config>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d10f      	bne.n	8000bc2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b0f      	cmp	r3, #15
 8000ba6:	d809      	bhi.n	8000bbc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	f000 f919 	bl	8000de6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bb4:	4a0a      	ldr	r2, [pc, #40]	@ (8000be0 <HAL_InitTick+0x74>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6013      	str	r3, [r2, #0]
 8000bba:	e007      	b.n	8000bcc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	73fb      	strb	r3, [r7, #15]
 8000bc0:	e004      	b.n	8000bcc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	73fb      	strb	r3, [r7, #15]
 8000bc6:	e001      	b.n	8000bcc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000004 	.word	0x20000004

08000be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000be8:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <HAL_IncTick+0x20>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <HAL_IncTick+0x24>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a04      	ldr	r2, [pc, #16]	@ (8000c08 <HAL_IncTick+0x24>)
 8000bf6:	6013      	str	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000148 	.word	0x20000148

08000c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c10:	4b03      	ldr	r3, [pc, #12]	@ (8000c20 <HAL_GetTick+0x14>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000148 	.word	0x20000148

08000c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c2c:	f7ff ffee 	bl	8000c0c <HAL_GetTick>
 8000c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c3c:	d005      	beq.n	8000c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <HAL_Delay+0x44>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	461a      	mov	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4413      	add	r3, r2
 8000c48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c4a:	bf00      	nop
 8000c4c:	f7ff ffde 	bl	8000c0c <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d8f7      	bhi.n	8000c4c <HAL_Delay+0x28>
  {
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000008 	.word	0x20000008

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	@ (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	@ (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	@ (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	@ 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	@ 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d9c:	d301      	bcc.n	8000da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00f      	b.n	8000dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dcc <SysTick_Config+0x40>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000daa:	210f      	movs	r1, #15
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f7ff ff8e 	bl	8000cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db4:	4b05      	ldr	r3, [pc, #20]	@ (8000dcc <SysTick_Config+0x40>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dba:	4b04      	ldr	r3, [pc, #16]	@ (8000dcc <SysTick_Config+0x40>)
 8000dbc:	2207      	movs	r2, #7
 8000dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	e000e010 	.word	0xe000e010

08000dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ff47 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000df8:	f7ff ff5c 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000dfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	68b9      	ldr	r1, [r7, #8]
 8000e02:	6978      	ldr	r0, [r7, #20]
 8000e04:	f7ff ff8e 	bl	8000d24 <NVIC_EncodePriority>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff5d 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ffb0 	bl	8000d8c <SysTick_Config>
 8000e2c:	4603      	mov	r3, r0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b087      	sub	sp, #28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e46:	e17f      	b.n	8001148 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	fa01 f303 	lsl.w	r3, r1, r3
 8000e54:	4013      	ands	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 8171 	beq.w	8001142 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d005      	beq.n	8000e78 <HAL_GPIO_Init+0x40>
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d130      	bne.n	8000eda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	2203      	movs	r2, #3
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	68da      	ldr	r2, [r3, #12]
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eae:	2201      	movs	r2, #1
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	091b      	lsrs	r3, r3, #4
 8000ec4:	f003 0201 	and.w	r2, r3, #1
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	d118      	bne.n	8000f18 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000eec:	2201      	movs	r2, #1
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	08db      	lsrs	r3, r3, #3
 8000f02:	f003 0201 	and.w	r2, r3, #1
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d017      	beq.n	8000f54 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d123      	bne.n	8000fa8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	08da      	lsrs	r2, r3, #3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3208      	adds	r2, #8
 8000f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	f003 0307 	and.w	r3, r3, #7
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	220f      	movs	r2, #15
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	691a      	ldr	r2, [r3, #16]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	08da      	lsrs	r2, r3, #3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3208      	adds	r2, #8
 8000fa2:	6939      	ldr	r1, [r7, #16]
 8000fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0203 	and.w	r2, r3, #3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f000 80ac 	beq.w	8001142 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	4b5f      	ldr	r3, [pc, #380]	@ (8001168 <HAL_GPIO_Init+0x330>)
 8000fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fee:	4a5e      	ldr	r2, [pc, #376]	@ (8001168 <HAL_GPIO_Init+0x330>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ff6:	4b5c      	ldr	r3, [pc, #368]	@ (8001168 <HAL_GPIO_Init+0x330>)
 8000ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001002:	4a5a      	ldr	r2, [pc, #360]	@ (800116c <HAL_GPIO_Init+0x334>)
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	3302      	adds	r3, #2
 800100a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	220f      	movs	r2, #15
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800102c:	d025      	beq.n	800107a <HAL_GPIO_Init+0x242>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4f      	ldr	r2, [pc, #316]	@ (8001170 <HAL_GPIO_Init+0x338>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d01f      	beq.n	8001076 <HAL_GPIO_Init+0x23e>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4e      	ldr	r2, [pc, #312]	@ (8001174 <HAL_GPIO_Init+0x33c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d019      	beq.n	8001072 <HAL_GPIO_Init+0x23a>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4d      	ldr	r2, [pc, #308]	@ (8001178 <HAL_GPIO_Init+0x340>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d013      	beq.n	800106e <HAL_GPIO_Init+0x236>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4c      	ldr	r2, [pc, #304]	@ (800117c <HAL_GPIO_Init+0x344>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d00d      	beq.n	800106a <HAL_GPIO_Init+0x232>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4b      	ldr	r2, [pc, #300]	@ (8001180 <HAL_GPIO_Init+0x348>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d007      	beq.n	8001066 <HAL_GPIO_Init+0x22e>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a4a      	ldr	r2, [pc, #296]	@ (8001184 <HAL_GPIO_Init+0x34c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d101      	bne.n	8001062 <HAL_GPIO_Init+0x22a>
 800105e:	2306      	movs	r3, #6
 8001060:	e00c      	b.n	800107c <HAL_GPIO_Init+0x244>
 8001062:	2307      	movs	r3, #7
 8001064:	e00a      	b.n	800107c <HAL_GPIO_Init+0x244>
 8001066:	2305      	movs	r3, #5
 8001068:	e008      	b.n	800107c <HAL_GPIO_Init+0x244>
 800106a:	2304      	movs	r3, #4
 800106c:	e006      	b.n	800107c <HAL_GPIO_Init+0x244>
 800106e:	2303      	movs	r3, #3
 8001070:	e004      	b.n	800107c <HAL_GPIO_Init+0x244>
 8001072:	2302      	movs	r3, #2
 8001074:	e002      	b.n	800107c <HAL_GPIO_Init+0x244>
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <HAL_GPIO_Init+0x244>
 800107a:	2300      	movs	r3, #0
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	f002 0203 	and.w	r2, r2, #3
 8001082:	0092      	lsls	r2, r2, #2
 8001084:	4093      	lsls	r3, r2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800108c:	4937      	ldr	r1, [pc, #220]	@ (800116c <HAL_GPIO_Init+0x334>)
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	089b      	lsrs	r3, r3, #2
 8001092:	3302      	adds	r3, #2
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800109a:	4b3b      	ldr	r3, [pc, #236]	@ (8001188 <HAL_GPIO_Init+0x350>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010be:	4a32      	ldr	r2, [pc, #200]	@ (8001188 <HAL_GPIO_Init+0x350>)
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010c4:	4b30      	ldr	r3, [pc, #192]	@ (8001188 <HAL_GPIO_Init+0x350>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010e8:	4a27      	ldr	r2, [pc, #156]	@ (8001188 <HAL_GPIO_Init+0x350>)
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010ee:	4b26      	ldr	r3, [pc, #152]	@ (8001188 <HAL_GPIO_Init+0x350>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001112:	4a1d      	ldr	r2, [pc, #116]	@ (8001188 <HAL_GPIO_Init+0x350>)
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001118:	4b1b      	ldr	r3, [pc, #108]	@ (8001188 <HAL_GPIO_Init+0x350>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800113c:	4a12      	ldr	r2, [pc, #72]	@ (8001188 <HAL_GPIO_Init+0x350>)
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	3301      	adds	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa22 f303 	lsr.w	r3, r2, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	f47f ae78 	bne.w	8000e48 <HAL_GPIO_Init+0x10>
  }
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	371c      	adds	r7, #28
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40021000 	.word	0x40021000
 800116c:	40010000 	.word	0x40010000
 8001170:	48000400 	.word	0x48000400
 8001174:	48000800 	.word	0x48000800
 8001178:	48000c00 	.word	0x48000c00
 800117c:	48001000 	.word	0x48001000
 8001180:	48001400 	.word	0x48001400
 8001184:	48001800 	.word	0x48001800
 8001188:	40010400 	.word	0x40010400

0800118c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001190:	4b04      	ldr	r3, [pc, #16]	@ (80011a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40007000 	.word	0x40007000

080011a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011b6:	d130      	bne.n	800121a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011b8:	4b23      	ldr	r3, [pc, #140]	@ (8001248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011c4:	d038      	beq.n	8001238 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c6:	4b20      	ldr	r3, [pc, #128]	@ (8001248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011d6:	4b1d      	ldr	r3, [pc, #116]	@ (800124c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2232      	movs	r2, #50	@ 0x32
 80011dc:	fb02 f303 	mul.w	r3, r2, r3
 80011e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001250 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011e2:	fba2 2303 	umull	r2, r3, r2, r3
 80011e6:	0c9b      	lsrs	r3, r3, #18
 80011e8:	3301      	adds	r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011ec:	e002      	b.n	80011f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011f4:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001200:	d102      	bne.n	8001208 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1f2      	bne.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001208:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001210:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001214:	d110      	bne.n	8001238 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e00f      	b.n	800123a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800121a:	4b0b      	ldr	r3, [pc, #44]	@ (8001248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001226:	d007      	beq.n	8001238 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001228:	4b07      	ldr	r3, [pc, #28]	@ (8001248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001230:	4a05      	ldr	r2, [pc, #20]	@ (8001248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001232:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001236:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40007000 	.word	0x40007000
 800124c:	20000000 	.word	0x20000000
 8001250:	431bde83 	.word	0x431bde83

08001254 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e3ca      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001266:	4b97      	ldr	r3, [pc, #604]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 030c 	and.w	r3, r3, #12
 800126e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001270:	4b94      	ldr	r3, [pc, #592]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0310 	and.w	r3, r3, #16
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 80e4 	beq.w	8001450 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d007      	beq.n	800129e <HAL_RCC_OscConfig+0x4a>
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	2b0c      	cmp	r3, #12
 8001292:	f040 808b 	bne.w	80013ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	2b01      	cmp	r3, #1
 800129a:	f040 8087 	bne.w	80013ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800129e:	4b89      	ldr	r3, [pc, #548]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d005      	beq.n	80012b6 <HAL_RCC_OscConfig+0x62>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e3a2      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a1a      	ldr	r2, [r3, #32]
 80012ba:	4b82      	ldr	r3, [pc, #520]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d004      	beq.n	80012d0 <HAL_RCC_OscConfig+0x7c>
 80012c6:	4b7f      	ldr	r3, [pc, #508]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012ce:	e005      	b.n	80012dc <HAL_RCC_OscConfig+0x88>
 80012d0:	4b7c      	ldr	r3, [pc, #496]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80012d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012d6:	091b      	lsrs	r3, r3, #4
 80012d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012dc:	4293      	cmp	r3, r2
 80012de:	d223      	bcs.n	8001328 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 fd55 	bl	8001d94 <RCC_SetFlashLatencyFromMSIRange>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e383      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012f4:	4b73      	ldr	r3, [pc, #460]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a72      	ldr	r2, [pc, #456]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80012fa:	f043 0308 	orr.w	r3, r3, #8
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	4b70      	ldr	r3, [pc, #448]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	496d      	ldr	r1, [pc, #436]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 800130e:	4313      	orrs	r3, r2
 8001310:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001312:	4b6c      	ldr	r3, [pc, #432]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	021b      	lsls	r3, r3, #8
 8001320:	4968      	ldr	r1, [pc, #416]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001322:	4313      	orrs	r3, r2
 8001324:	604b      	str	r3, [r1, #4]
 8001326:	e025      	b.n	8001374 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001328:	4b66      	ldr	r3, [pc, #408]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a65      	ldr	r2, [pc, #404]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 800132e:	f043 0308 	orr.w	r3, r3, #8
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b63      	ldr	r3, [pc, #396]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	4960      	ldr	r1, [pc, #384]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001342:	4313      	orrs	r3, r2
 8001344:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001346:	4b5f      	ldr	r3, [pc, #380]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	021b      	lsls	r3, r3, #8
 8001354:	495b      	ldr	r1, [pc, #364]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001356:	4313      	orrs	r3, r2
 8001358:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d109      	bne.n	8001374 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	4618      	mov	r0, r3
 8001366:	f000 fd15 	bl	8001d94 <RCC_SetFlashLatencyFromMSIRange>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e343      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001374:	f000 fc4a 	bl	8001c0c <HAL_RCC_GetSysClockFreq>
 8001378:	4602      	mov	r2, r0
 800137a:	4b52      	ldr	r3, [pc, #328]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	091b      	lsrs	r3, r3, #4
 8001380:	f003 030f 	and.w	r3, r3, #15
 8001384:	4950      	ldr	r1, [pc, #320]	@ (80014c8 <HAL_RCC_OscConfig+0x274>)
 8001386:	5ccb      	ldrb	r3, [r1, r3]
 8001388:	f003 031f 	and.w	r3, r3, #31
 800138c:	fa22 f303 	lsr.w	r3, r2, r3
 8001390:	4a4e      	ldr	r2, [pc, #312]	@ (80014cc <HAL_RCC_OscConfig+0x278>)
 8001392:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001394:	4b4e      	ldr	r3, [pc, #312]	@ (80014d0 <HAL_RCC_OscConfig+0x27c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fbe7 	bl	8000b6c <HAL_InitTick>
 800139e:	4603      	mov	r3, r0
 80013a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d052      	beq.n	800144e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	e327      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d032      	beq.n	800141a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013b4:	4b43      	ldr	r3, [pc, #268]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a42      	ldr	r2, [pc, #264]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013c0:	f7ff fc24 	bl	8000c0c <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013c8:	f7ff fc20 	bl	8000c0c <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e310      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013da:	4b3a      	ldr	r3, [pc, #232]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0f0      	beq.n	80013c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013e6:	4b37      	ldr	r3, [pc, #220]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a36      	ldr	r2, [pc, #216]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80013ec:	f043 0308 	orr.w	r3, r3, #8
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	4b34      	ldr	r3, [pc, #208]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	4931      	ldr	r1, [pc, #196]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001400:	4313      	orrs	r3, r2
 8001402:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001404:	4b2f      	ldr	r3, [pc, #188]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	492c      	ldr	r1, [pc, #176]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001414:	4313      	orrs	r3, r2
 8001416:	604b      	str	r3, [r1, #4]
 8001418:	e01a      	b.n	8001450 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800141a:	4b2a      	ldr	r3, [pc, #168]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a29      	ldr	r2, [pc, #164]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001420:	f023 0301 	bic.w	r3, r3, #1
 8001424:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001426:	f7ff fbf1 	bl	8000c0c <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800142e:	f7ff fbed 	bl	8000c0c <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e2dd      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001440:	4b20      	ldr	r3, [pc, #128]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1f0      	bne.n	800142e <HAL_RCC_OscConfig+0x1da>
 800144c:	e000      	b.n	8001450 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800144e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b00      	cmp	r3, #0
 800145a:	d074      	beq.n	8001546 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	2b08      	cmp	r3, #8
 8001460:	d005      	beq.n	800146e <HAL_RCC_OscConfig+0x21a>
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	2b0c      	cmp	r3, #12
 8001466:	d10e      	bne.n	8001486 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	2b03      	cmp	r3, #3
 800146c:	d10b      	bne.n	8001486 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146e:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d064      	beq.n	8001544 <HAL_RCC_OscConfig+0x2f0>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d160      	bne.n	8001544 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e2ba      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800148e:	d106      	bne.n	800149e <HAL_RCC_OscConfig+0x24a>
 8001490:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a0b      	ldr	r2, [pc, #44]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 8001496:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	e026      	b.n	80014ec <HAL_RCC_OscConfig+0x298>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014a6:	d115      	bne.n	80014d4 <HAL_RCC_OscConfig+0x280>
 80014a8:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a05      	ldr	r2, [pc, #20]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80014ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	4b03      	ldr	r3, [pc, #12]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a02      	ldr	r2, [pc, #8]	@ (80014c4 <HAL_RCC_OscConfig+0x270>)
 80014ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	e014      	b.n	80014ec <HAL_RCC_OscConfig+0x298>
 80014c2:	bf00      	nop
 80014c4:	40021000 	.word	0x40021000
 80014c8:	08004340 	.word	0x08004340
 80014cc:	20000000 	.word	0x20000000
 80014d0:	20000004 	.word	0x20000004
 80014d4:	4ba0      	ldr	r3, [pc, #640]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a9f      	ldr	r2, [pc, #636]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 80014da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	4b9d      	ldr	r3, [pc, #628]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a9c      	ldr	r2, [pc, #624]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 80014e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d013      	beq.n	800151c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f4:	f7ff fb8a 	bl	8000c0c <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014fc:	f7ff fb86 	bl	8000c0c <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b64      	cmp	r3, #100	@ 0x64
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e276      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800150e:	4b92      	ldr	r3, [pc, #584]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0x2a8>
 800151a:	e014      	b.n	8001546 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151c:	f7ff fb76 	bl	8000c0c <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff fb72 	bl	8000c0c <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	@ 0x64
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e262      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001536:	4b88      	ldr	r3, [pc, #544]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f0      	bne.n	8001524 <HAL_RCC_OscConfig+0x2d0>
 8001542:	e000      	b.n	8001546 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d060      	beq.n	8001614 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	2b04      	cmp	r3, #4
 8001556:	d005      	beq.n	8001564 <HAL_RCC_OscConfig+0x310>
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	2b0c      	cmp	r3, #12
 800155c:	d119      	bne.n	8001592 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	2b02      	cmp	r3, #2
 8001562:	d116      	bne.n	8001592 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001564:	4b7c      	ldr	r3, [pc, #496]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <HAL_RCC_OscConfig+0x328>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e23f      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157c:	4b76      	ldr	r3, [pc, #472]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	061b      	lsls	r3, r3, #24
 800158a:	4973      	ldr	r1, [pc, #460]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 800158c:	4313      	orrs	r3, r2
 800158e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001590:	e040      	b.n	8001614 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d023      	beq.n	80015e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800159a:	4b6f      	ldr	r3, [pc, #444]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a6e      	ldr	r2, [pc, #440]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 80015a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a6:	f7ff fb31 	bl	8000c0c <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ae:	f7ff fb2d 	bl	8000c0c <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e21d      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015c0:	4b65      	ldr	r3, [pc, #404]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015cc:	4b62      	ldr	r3, [pc, #392]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	061b      	lsls	r3, r3, #24
 80015da:	495f      	ldr	r1, [pc, #380]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
 80015e0:	e018      	b.n	8001614 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a5c      	ldr	r2, [pc, #368]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 80015e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ee:	f7ff fb0d 	bl	8000c0c <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f6:	f7ff fb09 	bl	8000c0c <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e1f9      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001608:	4b53      	ldr	r3, [pc, #332]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1f0      	bne.n	80015f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	2b00      	cmp	r3, #0
 800161e:	d03c      	beq.n	800169a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d01c      	beq.n	8001662 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001628:	4b4b      	ldr	r3, [pc, #300]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 800162a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800162e:	4a4a      	ldr	r2, [pc, #296]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001638:	f7ff fae8 	bl	8000c0c <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001640:	f7ff fae4 	bl	8000c0c <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e1d4      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001652:	4b41      	ldr	r3, [pc, #260]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 8001654:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0ef      	beq.n	8001640 <HAL_RCC_OscConfig+0x3ec>
 8001660:	e01b      	b.n	800169a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001662:	4b3d      	ldr	r3, [pc, #244]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 8001664:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001668:	4a3b      	ldr	r2, [pc, #236]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 800166a:	f023 0301 	bic.w	r3, r3, #1
 800166e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001672:	f7ff facb 	bl	8000c0c <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800167a:	f7ff fac7 	bl	8000c0c <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e1b7      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800168c:	4b32      	ldr	r3, [pc, #200]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 800168e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1ef      	bne.n	800167a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 80a6 	beq.w	80017f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a8:	2300      	movs	r3, #0
 80016aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 80016ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d10d      	bne.n	80016d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b8:	4b27      	ldr	r3, [pc, #156]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 80016ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016bc:	4a26      	ldr	r2, [pc, #152]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 80016be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80016c4:	4b24      	ldr	r3, [pc, #144]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 80016c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016d0:	2301      	movs	r3, #1
 80016d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d4:	4b21      	ldr	r3, [pc, #132]	@ (800175c <HAL_RCC_OscConfig+0x508>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d118      	bne.n	8001712 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016e0:	4b1e      	ldr	r3, [pc, #120]	@ (800175c <HAL_RCC_OscConfig+0x508>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a1d      	ldr	r2, [pc, #116]	@ (800175c <HAL_RCC_OscConfig+0x508>)
 80016e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ec:	f7ff fa8e 	bl	8000c0c <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f4:	f7ff fa8a 	bl	8000c0c <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e17a      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001706:	4b15      	ldr	r3, [pc, #84]	@ (800175c <HAL_RCC_OscConfig+0x508>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d108      	bne.n	800172c <HAL_RCC_OscConfig+0x4d8>
 800171a:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 800171c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001720:	4a0d      	ldr	r2, [pc, #52]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800172a:	e029      	b.n	8001780 <HAL_RCC_OscConfig+0x52c>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b05      	cmp	r3, #5
 8001732:	d115      	bne.n	8001760 <HAL_RCC_OscConfig+0x50c>
 8001734:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 8001736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800173a:	4a07      	ldr	r2, [pc, #28]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 800173c:	f043 0304 	orr.w	r3, r3, #4
 8001740:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001744:	4b04      	ldr	r3, [pc, #16]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 8001746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800174a:	4a03      	ldr	r2, [pc, #12]	@ (8001758 <HAL_RCC_OscConfig+0x504>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001754:	e014      	b.n	8001780 <HAL_RCC_OscConfig+0x52c>
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
 800175c:	40007000 	.word	0x40007000
 8001760:	4b9c      	ldr	r3, [pc, #624]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 8001762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001766:	4a9b      	ldr	r2, [pc, #620]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 8001768:	f023 0301 	bic.w	r3, r3, #1
 800176c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001770:	4b98      	ldr	r3, [pc, #608]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 8001772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001776:	4a97      	ldr	r2, [pc, #604]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 8001778:	f023 0304 	bic.w	r3, r3, #4
 800177c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d016      	beq.n	80017b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001788:	f7ff fa40 	bl	8000c0c <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800178e:	e00a      	b.n	80017a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001790:	f7ff fa3c 	bl	8000c0c <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800179e:	4293      	cmp	r3, r2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e12a      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017a6:	4b8b      	ldr	r3, [pc, #556]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 80017a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0ed      	beq.n	8001790 <HAL_RCC_OscConfig+0x53c>
 80017b4:	e015      	b.n	80017e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b6:	f7ff fa29 	bl	8000c0c <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017bc:	e00a      	b.n	80017d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017be:	f7ff fa25 	bl	8000c0c <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e113      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017d4:	4b7f      	ldr	r3, [pc, #508]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 80017d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1ed      	bne.n	80017be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017e2:	7ffb      	ldrb	r3, [r7, #31]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d105      	bne.n	80017f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e8:	4b7a      	ldr	r3, [pc, #488]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 80017ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ec:	4a79      	ldr	r2, [pc, #484]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 80017ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017f2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 80fe 	beq.w	80019fa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001802:	2b02      	cmp	r3, #2
 8001804:	f040 80d0 	bne.w	80019a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001808:	4b72      	ldr	r3, [pc, #456]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f003 0203 	and.w	r2, r3, #3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001818:	429a      	cmp	r2, r3
 800181a:	d130      	bne.n	800187e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	3b01      	subs	r3, #1
 8001828:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800182a:	429a      	cmp	r2, r3
 800182c:	d127      	bne.n	800187e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001838:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800183a:	429a      	cmp	r2, r3
 800183c:	d11f      	bne.n	800187e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001848:	2a07      	cmp	r2, #7
 800184a:	bf14      	ite	ne
 800184c:	2201      	movne	r2, #1
 800184e:	2200      	moveq	r2, #0
 8001850:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001852:	4293      	cmp	r3, r2
 8001854:	d113      	bne.n	800187e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001860:	085b      	lsrs	r3, r3, #1
 8001862:	3b01      	subs	r3, #1
 8001864:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001866:	429a      	cmp	r2, r3
 8001868:	d109      	bne.n	800187e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001874:	085b      	lsrs	r3, r3, #1
 8001876:	3b01      	subs	r3, #1
 8001878:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800187a:	429a      	cmp	r2, r3
 800187c:	d06e      	beq.n	800195c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	2b0c      	cmp	r3, #12
 8001882:	d069      	beq.n	8001958 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001884:	4b53      	ldr	r3, [pc, #332]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d105      	bne.n	800189c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001890:	4b50      	ldr	r3, [pc, #320]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0ad      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018a0:	4b4c      	ldr	r3, [pc, #304]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a4b      	ldr	r2, [pc, #300]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 80018a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018ac:	f7ff f9ae 	bl	8000c0c <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b4:	f7ff f9aa 	bl	8000c0c <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e09a      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c6:	4b43      	ldr	r3, [pc, #268]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018d2:	4b40      	ldr	r3, [pc, #256]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 80018d4:	68da      	ldr	r2, [r3, #12]
 80018d6:	4b40      	ldr	r3, [pc, #256]	@ (80019d8 <HAL_RCC_OscConfig+0x784>)
 80018d8:	4013      	ands	r3, r2
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80018e2:	3a01      	subs	r2, #1
 80018e4:	0112      	lsls	r2, r2, #4
 80018e6:	4311      	orrs	r1, r2
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018ec:	0212      	lsls	r2, r2, #8
 80018ee:	4311      	orrs	r1, r2
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80018f4:	0852      	lsrs	r2, r2, #1
 80018f6:	3a01      	subs	r2, #1
 80018f8:	0552      	lsls	r2, r2, #21
 80018fa:	4311      	orrs	r1, r2
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001900:	0852      	lsrs	r2, r2, #1
 8001902:	3a01      	subs	r2, #1
 8001904:	0652      	lsls	r2, r2, #25
 8001906:	4311      	orrs	r1, r2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800190c:	0912      	lsrs	r2, r2, #4
 800190e:	0452      	lsls	r2, r2, #17
 8001910:	430a      	orrs	r2, r1
 8001912:	4930      	ldr	r1, [pc, #192]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 8001914:	4313      	orrs	r3, r2
 8001916:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001918:	4b2e      	ldr	r3, [pc, #184]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a2d      	ldr	r2, [pc, #180]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 800191e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001922:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001924:	4b2b      	ldr	r3, [pc, #172]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	4a2a      	ldr	r2, [pc, #168]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 800192a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800192e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001930:	f7ff f96c 	bl	8000c0c <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001938:	f7ff f968 	bl	8000c0c <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e058      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800194a:	4b22      	ldr	r3, [pc, #136]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001956:	e050      	b.n	80019fa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e04f      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800195c:	4b1d      	ldr	r3, [pc, #116]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d148      	bne.n	80019fa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001968:	4b1a      	ldr	r3, [pc, #104]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a19      	ldr	r2, [pc, #100]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 800196e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001972:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001974:	4b17      	ldr	r3, [pc, #92]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	4a16      	ldr	r2, [pc, #88]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 800197a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800197e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001980:	f7ff f944 	bl	8000c0c <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001988:	f7ff f940 	bl	8000c0c <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e030      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199a:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x734>
 80019a6:	e028      	b.n	80019fa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	2b0c      	cmp	r3, #12
 80019ac:	d023      	beq.n	80019f6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ae:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a08      	ldr	r2, [pc, #32]	@ (80019d4 <HAL_RCC_OscConfig+0x780>)
 80019b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ba:	f7ff f927 	bl	8000c0c <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c0:	e00c      	b.n	80019dc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c2:	f7ff f923 	bl	8000c0c <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d905      	bls.n	80019dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e013      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
 80019d4:	40021000 	.word	0x40021000
 80019d8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019dc:	4b09      	ldr	r3, [pc, #36]	@ (8001a04 <HAL_RCC_OscConfig+0x7b0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1ec      	bne.n	80019c2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019e8:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <HAL_RCC_OscConfig+0x7b0>)
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	4905      	ldr	r1, [pc, #20]	@ (8001a04 <HAL_RCC_OscConfig+0x7b0>)
 80019ee:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <HAL_RCC_OscConfig+0x7b4>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	60cb      	str	r3, [r1, #12]
 80019f4:	e001      	b.n	80019fa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e000      	b.n	80019fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3720      	adds	r7, #32
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40021000 	.word	0x40021000
 8001a08:	feeefffc 	.word	0xfeeefffc

08001a0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0e7      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a20:	4b75      	ldr	r3, [pc, #468]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d910      	bls.n	8001a50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2e:	4b72      	ldr	r3, [pc, #456]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 0207 	bic.w	r2, r3, #7
 8001a36:	4970      	ldr	r1, [pc, #448]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3e:	4b6e      	ldr	r3, [pc, #440]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0cf      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d010      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	4b66      	ldr	r3, [pc, #408]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d908      	bls.n	8001a7e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a6c:	4b63      	ldr	r3, [pc, #396]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	4960      	ldr	r1, [pc, #384]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d04c      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d107      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a92:	4b5a      	ldr	r3, [pc, #360]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d121      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e0a6      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d107      	bne.n	8001aba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aaa:	4b54      	ldr	r3, [pc, #336]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d115      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e09a      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d107      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ac2:	4b4e      	ldr	r3, [pc, #312]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d109      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e08e      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ad2:	4b4a      	ldr	r3, [pc, #296]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e086      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ae2:	4b46      	ldr	r3, [pc, #280]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f023 0203 	bic.w	r2, r3, #3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	4943      	ldr	r1, [pc, #268]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001af4:	f7ff f88a 	bl	8000c0c <HAL_GetTick>
 8001af8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afa:	e00a      	b.n	8001b12 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001afc:	f7ff f886 	bl	8000c0c <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e06e      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b12:	4b3a      	ldr	r3, [pc, #232]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 020c 	and.w	r2, r3, #12
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d1eb      	bne.n	8001afc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d010      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	4b31      	ldr	r3, [pc, #196]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d208      	bcs.n	8001b52 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b40:	4b2e      	ldr	r3, [pc, #184]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	492b      	ldr	r1, [pc, #172]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b52:	4b29      	ldr	r3, [pc, #164]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d210      	bcs.n	8001b82 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b60:	4b25      	ldr	r3, [pc, #148]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f023 0207 	bic.w	r2, r3, #7
 8001b68:	4923      	ldr	r1, [pc, #140]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b70:	4b21      	ldr	r3, [pc, #132]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d001      	beq.n	8001b82 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e036      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d008      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	4918      	ldr	r1, [pc, #96]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0308 	and.w	r3, r3, #8
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d009      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bac:	4b13      	ldr	r3, [pc, #76]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	4910      	ldr	r1, [pc, #64]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bc0:	f000 f824 	bl	8001c0c <HAL_RCC_GetSysClockFreq>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	091b      	lsrs	r3, r3, #4
 8001bcc:	f003 030f 	and.w	r3, r3, #15
 8001bd0:	490b      	ldr	r1, [pc, #44]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f4>)
 8001bd2:	5ccb      	ldrb	r3, [r1, r3]
 8001bd4:	f003 031f 	and.w	r3, r3, #31
 8001bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bdc:	4a09      	ldr	r2, [pc, #36]	@ (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001bde:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001be0:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <HAL_RCC_ClockConfig+0x1fc>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe ffc1 	bl	8000b6c <HAL_InitTick>
 8001bea:	4603      	mov	r3, r0
 8001bec:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bee:	7afb      	ldrb	r3, [r7, #11]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40022000 	.word	0x40022000
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	08004340 	.word	0x08004340
 8001c04:	20000000 	.word	0x20000000
 8001c08:	20000004 	.word	0x20000004

08001c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	@ 0x24
 8001c10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	2300      	movs	r3, #0
 8001c18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c1a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c24:	4b3b      	ldr	r3, [pc, #236]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_RCC_GetSysClockFreq+0x34>
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	2b0c      	cmp	r3, #12
 8001c38:	d121      	bne.n	8001c7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d11e      	bne.n	8001c7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c40:	4b34      	ldr	r3, [pc, #208]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d107      	bne.n	8001c5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c4c:	4b31      	ldr	r3, [pc, #196]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c52:	0a1b      	lsrs	r3, r3, #8
 8001c54:	f003 030f 	and.w	r3, r3, #15
 8001c58:	61fb      	str	r3, [r7, #28]
 8001c5a:	e005      	b.n	8001c68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c68:	4a2b      	ldr	r2, [pc, #172]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10d      	bne.n	8001c94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c7c:	e00a      	b.n	8001c94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	d102      	bne.n	8001c8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c84:	4b25      	ldr	r3, [pc, #148]	@ (8001d1c <HAL_RCC_GetSysClockFreq+0x110>)
 8001c86:	61bb      	str	r3, [r7, #24]
 8001c88:	e004      	b.n	8001c94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d101      	bne.n	8001c94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c90:	4b23      	ldr	r3, [pc, #140]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	2b0c      	cmp	r3, #12
 8001c98:	d134      	bne.n	8001d04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d003      	beq.n	8001cb2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	2b03      	cmp	r3, #3
 8001cae:	d003      	beq.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xac>
 8001cb0:	e005      	b.n	8001cbe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d1c <HAL_RCC_GetSysClockFreq+0x110>)
 8001cb4:	617b      	str	r3, [r7, #20]
      break;
 8001cb6:	e005      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cb8:	4b19      	ldr	r3, [pc, #100]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cba:	617b      	str	r3, [r7, #20]
      break;
 8001cbc:	e002      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	617b      	str	r3, [r7, #20]
      break;
 8001cc2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cc4:	4b13      	ldr	r3, [pc, #76]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	3301      	adds	r3, #1
 8001cd0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cd2:	4b10      	ldr	r3, [pc, #64]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	0a1b      	lsrs	r3, r3, #8
 8001cd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	fb03 f202 	mul.w	r2, r3, r2
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cea:	4b0a      	ldr	r3, [pc, #40]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	0e5b      	lsrs	r3, r3, #25
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d04:	69bb      	ldr	r3, [r7, #24]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3724      	adds	r7, #36	@ 0x24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	40021000 	.word	0x40021000
 8001d18:	08004358 	.word	0x08004358
 8001d1c:	00f42400 	.word	0x00f42400
 8001d20:	007a1200 	.word	0x007a1200

08001d24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d28:	4b03      	ldr	r3, [pc, #12]	@ (8001d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000000 	.word	0x20000000

08001d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d40:	f7ff fff0 	bl	8001d24 <HAL_RCC_GetHCLKFreq>
 8001d44:	4602      	mov	r2, r0
 8001d46:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	0a1b      	lsrs	r3, r3, #8
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	4904      	ldr	r1, [pc, #16]	@ (8001d64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d52:	5ccb      	ldrb	r3, [r1, r3]
 8001d54:	f003 031f 	and.w	r3, r3, #31
 8001d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40021000 	.word	0x40021000
 8001d64:	08004350 	.word	0x08004350

08001d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d6c:	f7ff ffda 	bl	8001d24 <HAL_RCC_GetHCLKFreq>
 8001d70:	4602      	mov	r2, r0
 8001d72:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	0adb      	lsrs	r3, r3, #11
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	4904      	ldr	r1, [pc, #16]	@ (8001d90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d7e:	5ccb      	ldrb	r3, [r1, r3]
 8001d80:	f003 031f 	and.w	r3, r3, #31
 8001d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	08004350 	.word	0x08004350

08001d94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001da0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001dac:	f7ff f9ee 	bl	800118c <HAL_PWREx_GetVoltageRange>
 8001db0:	6178      	str	r0, [r7, #20]
 8001db2:	e014      	b.n	8001dde <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001db4:	4b25      	ldr	r3, [pc, #148]	@ (8001e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db8:	4a24      	ldr	r2, [pc, #144]	@ (8001e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dc0:	4b22      	ldr	r3, [pc, #136]	@ (8001e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001dcc:	f7ff f9de 	bl	800118c <HAL_PWREx_GetVoltageRange>
 8001dd0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd6:	4a1d      	ldr	r2, [pc, #116]	@ (8001e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ddc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001de4:	d10b      	bne.n	8001dfe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b80      	cmp	r3, #128	@ 0x80
 8001dea:	d919      	bls.n	8001e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2ba0      	cmp	r3, #160	@ 0xa0
 8001df0:	d902      	bls.n	8001df8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001df2:	2302      	movs	r3, #2
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	e013      	b.n	8001e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001df8:	2301      	movs	r3, #1
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	e010      	b.n	8001e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b80      	cmp	r3, #128	@ 0x80
 8001e02:	d902      	bls.n	8001e0a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e04:	2303      	movs	r3, #3
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	e00a      	b.n	8001e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b80      	cmp	r3, #128	@ 0x80
 8001e0e:	d102      	bne.n	8001e16 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e10:	2302      	movs	r3, #2
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	e004      	b.n	8001e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b70      	cmp	r3, #112	@ 0x70
 8001e1a:	d101      	bne.n	8001e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e20:	4b0b      	ldr	r3, [pc, #44]	@ (8001e50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f023 0207 	bic.w	r2, r3, #7
 8001e28:	4909      	ldr	r1, [pc, #36]	@ (8001e50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e30:	4b07      	ldr	r3, [pc, #28]	@ (8001e50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d001      	beq.n	8001e42 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40022000 	.word	0x40022000

08001e54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e60:	2300      	movs	r3, #0
 8001e62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d041      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e74:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e78:	d02a      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e7a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e7e:	d824      	bhi.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e84:	d008      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e8a:	d81e      	bhi.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00a      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e94:	d010      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e96:	e018      	b.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e98:	4b86      	ldr	r3, [pc, #536]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	4a85      	ldr	r2, [pc, #532]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ea4:	e015      	b.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f000 fabb 	bl	8002428 <RCCEx_PLLSAI1_Config>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001eb6:	e00c      	b.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3320      	adds	r3, #32
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 fba6 	bl	8002610 <RCCEx_PLLSAI2_Config>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ec8:	e003      	b.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	74fb      	strb	r3, [r7, #19]
      break;
 8001ece:	e000      	b.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001ed0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ed2:	7cfb      	ldrb	r3, [r7, #19]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10b      	bne.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ed8:	4b76      	ldr	r3, [pc, #472]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ede:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ee6:	4973      	ldr	r1, [pc, #460]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001eee:	e001      	b.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ef0:	7cfb      	ldrb	r3, [r7, #19]
 8001ef2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d041      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f04:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f08:	d02a      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f0a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f0e:	d824      	bhi.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f14:	d008      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f1a:	d81e      	bhi.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00a      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f24:	d010      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f26:	e018      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f28:	4b62      	ldr	r3, [pc, #392]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	4a61      	ldr	r2, [pc, #388]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f32:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f34:	e015      	b.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 fa73 	bl	8002428 <RCCEx_PLLSAI1_Config>
 8001f42:	4603      	mov	r3, r0
 8001f44:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f46:	e00c      	b.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3320      	adds	r3, #32
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 fb5e 	bl	8002610 <RCCEx_PLLSAI2_Config>
 8001f54:	4603      	mov	r3, r0
 8001f56:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f58:	e003      	b.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	74fb      	strb	r3, [r7, #19]
      break;
 8001f5e:	e000      	b.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f62:	7cfb      	ldrb	r3, [r7, #19]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10b      	bne.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f68:	4b52      	ldr	r3, [pc, #328]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f6e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f76:	494f      	ldr	r1, [pc, #316]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f7e:	e001      	b.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f80:	7cfb      	ldrb	r3, [r7, #19]
 8001f82:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 80a0 	beq.w	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f92:	2300      	movs	r3, #0
 8001f94:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f96:	4b47      	ldr	r3, [pc, #284]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00d      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fac:	4b41      	ldr	r3, [pc, #260]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb0:	4a40      	ldr	r2, [pc, #256]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fb8:	4b3e      	ldr	r3, [pc, #248]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a3a      	ldr	r2, [pc, #232]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fd4:	f7fe fe1a 	bl	8000c0c <HAL_GetTick>
 8001fd8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fda:	e009      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fdc:	f7fe fe16 	bl	8000c0c <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d902      	bls.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	74fb      	strb	r3, [r7, #19]
        break;
 8001fee:	e005      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ff0:	4b31      	ldr	r3, [pc, #196]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0ef      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001ffc:	7cfb      	ldrb	r3, [r7, #19]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d15c      	bne.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002002:	4b2c      	ldr	r3, [pc, #176]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002008:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800200c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d01f      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	429a      	cmp	r2, r3
 800201e:	d019      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002020:	4b24      	ldr	r3, [pc, #144]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002026:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800202a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800202c:	4b21      	ldr	r3, [pc, #132]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002032:	4a20      	ldr	r2, [pc, #128]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002038:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800203c:	4b1d      	ldr	r3, [pc, #116]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002042:	4a1c      	ldr	r2, [pc, #112]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002044:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002048:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800204c:	4a19      	ldr	r2, [pc, #100]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d016      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205e:	f7fe fdd5 	bl	8000c0c <HAL_GetTick>
 8002062:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002064:	e00b      	b.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002066:	f7fe fdd1 	bl	8000c0c <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002074:	4293      	cmp	r3, r2
 8002076:	d902      	bls.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	74fb      	strb	r3, [r7, #19]
            break;
 800207c:	e006      	b.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800207e:	4b0d      	ldr	r3, [pc, #52]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0ec      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800208c:	7cfb      	ldrb	r3, [r7, #19]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10c      	bne.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002092:	4b08      	ldr	r3, [pc, #32]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002098:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020a2:	4904      	ldr	r1, [pc, #16]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80020aa:	e009      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020ac:	7cfb      	ldrb	r3, [r7, #19]
 80020ae:	74bb      	strb	r3, [r7, #18]
 80020b0:	e006      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020bc:	7cfb      	ldrb	r3, [r7, #19]
 80020be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020c0:	7c7b      	ldrb	r3, [r7, #17]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d105      	bne.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c6:	4b9e      	ldr	r3, [pc, #632]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ca:	4a9d      	ldr	r2, [pc, #628]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00a      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020de:	4b98      	ldr	r3, [pc, #608]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e4:	f023 0203 	bic.w	r2, r3, #3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ec:	4994      	ldr	r1, [pc, #592]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00a      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002100:	4b8f      	ldr	r3, [pc, #572]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002106:	f023 020c 	bic.w	r2, r3, #12
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800210e:	498c      	ldr	r1, [pc, #560]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002122:	4b87      	ldr	r3, [pc, #540]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002128:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002130:	4983      	ldr	r1, [pc, #524]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002132:	4313      	orrs	r3, r2
 8002134:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00a      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002144:	4b7e      	ldr	r3, [pc, #504]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800214a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002152:	497b      	ldr	r1, [pc, #492]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002166:	4b76      	ldr	r3, [pc, #472]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002174:	4972      	ldr	r1, [pc, #456]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00a      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002188:	4b6d      	ldr	r3, [pc, #436]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800218e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002196:	496a      	ldr	r1, [pc, #424]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002198:	4313      	orrs	r3, r2
 800219a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00a      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021aa:	4b65      	ldr	r3, [pc, #404]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b8:	4961      	ldr	r1, [pc, #388]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00a      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021cc:	4b5c      	ldr	r3, [pc, #368]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021da:	4959      	ldr	r1, [pc, #356]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021ee:	4b54      	ldr	r3, [pc, #336]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021fc:	4950      	ldr	r1, [pc, #320]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00a      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002210:	4b4b      	ldr	r3, [pc, #300]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002216:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221e:	4948      	ldr	r1, [pc, #288]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002232:	4b43      	ldr	r3, [pc, #268]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002238:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002240:	493f      	ldr	r1, [pc, #252]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d028      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002254:	4b3a      	ldr	r3, [pc, #232]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002262:	4937      	ldr	r1, [pc, #220]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800226e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002272:	d106      	bne.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002274:	4b32      	ldr	r3, [pc, #200]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4a31      	ldr	r2, [pc, #196]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800227e:	60d3      	str	r3, [r2, #12]
 8002280:	e011      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002286:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800228a:	d10c      	bne.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3304      	adds	r3, #4
 8002290:	2101      	movs	r1, #1
 8002292:	4618      	mov	r0, r3
 8002294:	f000 f8c8 	bl	8002428 <RCCEx_PLLSAI1_Config>
 8002298:	4603      	mov	r3, r0
 800229a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800229c:	7cfb      	ldrb	r3, [r7, #19]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80022a2:	7cfb      	ldrb	r3, [r7, #19]
 80022a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d028      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022b2:	4b23      	ldr	r3, [pc, #140]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c0:	491f      	ldr	r1, [pc, #124]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022d0:	d106      	bne.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022dc:	60d3      	str	r3, [r2, #12]
 80022de:	e011      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022e8:	d10c      	bne.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3304      	adds	r3, #4
 80022ee:	2101      	movs	r1, #1
 80022f0:	4618      	mov	r0, r3
 80022f2:	f000 f899 	bl	8002428 <RCCEx_PLLSAI1_Config>
 80022f6:	4603      	mov	r3, r0
 80022f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022fa:	7cfb      	ldrb	r3, [r7, #19]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002300:	7cfb      	ldrb	r3, [r7, #19]
 8002302:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d02b      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002310:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002316:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800231e:	4908      	ldr	r1, [pc, #32]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002320:	4313      	orrs	r3, r2
 8002322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800232a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800232e:	d109      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002330:	4b03      	ldr	r3, [pc, #12]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4a02      	ldr	r2, [pc, #8]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002336:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800233a:	60d3      	str	r3, [r2, #12]
 800233c:	e014      	b.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002348:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800234c:	d10c      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3304      	adds	r3, #4
 8002352:	2101      	movs	r1, #1
 8002354:	4618      	mov	r0, r3
 8002356:	f000 f867 	bl	8002428 <RCCEx_PLLSAI1_Config>
 800235a:	4603      	mov	r3, r0
 800235c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800235e:	7cfb      	ldrb	r3, [r7, #19]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002364:	7cfb      	ldrb	r3, [r7, #19]
 8002366:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d02f      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002374:	4b2b      	ldr	r3, [pc, #172]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800237a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002382:	4928      	ldr	r1, [pc, #160]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800238e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002392:	d10d      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3304      	adds	r3, #4
 8002398:	2102      	movs	r1, #2
 800239a:	4618      	mov	r0, r3
 800239c:	f000 f844 	bl	8002428 <RCCEx_PLLSAI1_Config>
 80023a0:	4603      	mov	r3, r0
 80023a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023a4:	7cfb      	ldrb	r3, [r7, #19]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d014      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023aa:	7cfb      	ldrb	r3, [r7, #19]
 80023ac:	74bb      	strb	r3, [r7, #18]
 80023ae:	e011      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023b8:	d10c      	bne.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3320      	adds	r3, #32
 80023be:	2102      	movs	r1, #2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 f925 	bl	8002610 <RCCEx_PLLSAI2_Config>
 80023c6:	4603      	mov	r3, r0
 80023c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023ca:	7cfb      	ldrb	r3, [r7, #19]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023d0:	7cfb      	ldrb	r3, [r7, #19]
 80023d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00a      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023e0:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023ee:	490d      	ldr	r1, [pc, #52]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00b      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002402:	4b08      	ldr	r3, [pc, #32]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002408:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002412:	4904      	ldr	r1, [pc, #16]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800241a:	7cbb      	ldrb	r3, [r7, #18]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000

08002428 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002436:	4b75      	ldr	r3, [pc, #468]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d018      	beq.n	8002474 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002442:	4b72      	ldr	r3, [pc, #456]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f003 0203 	and.w	r2, r3, #3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d10d      	bne.n	800246e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
       ||
 8002456:	2b00      	cmp	r3, #0
 8002458:	d009      	beq.n	800246e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800245a:	4b6c      	ldr	r3, [pc, #432]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	091b      	lsrs	r3, r3, #4
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
       ||
 800246a:	429a      	cmp	r2, r3
 800246c:	d047      	beq.n	80024fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	73fb      	strb	r3, [r7, #15]
 8002472:	e044      	b.n	80024fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b03      	cmp	r3, #3
 800247a:	d018      	beq.n	80024ae <RCCEx_PLLSAI1_Config+0x86>
 800247c:	2b03      	cmp	r3, #3
 800247e:	d825      	bhi.n	80024cc <RCCEx_PLLSAI1_Config+0xa4>
 8002480:	2b01      	cmp	r3, #1
 8002482:	d002      	beq.n	800248a <RCCEx_PLLSAI1_Config+0x62>
 8002484:	2b02      	cmp	r3, #2
 8002486:	d009      	beq.n	800249c <RCCEx_PLLSAI1_Config+0x74>
 8002488:	e020      	b.n	80024cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800248a:	4b60      	ldr	r3, [pc, #384]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d11d      	bne.n	80024d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800249a:	e01a      	b.n	80024d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800249c:	4b5b      	ldr	r3, [pc, #364]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d116      	bne.n	80024d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ac:	e013      	b.n	80024d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024ae:	4b57      	ldr	r3, [pc, #348]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10f      	bne.n	80024da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024ba:	4b54      	ldr	r3, [pc, #336]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d109      	bne.n	80024da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024ca:	e006      	b.n	80024da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
      break;
 80024d0:	e004      	b.n	80024dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024d2:	bf00      	nop
 80024d4:	e002      	b.n	80024dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024d6:	bf00      	nop
 80024d8:	e000      	b.n	80024dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024da:	bf00      	nop
    }

    if(status == HAL_OK)
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10d      	bne.n	80024fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024e2:	4b4a      	ldr	r3, [pc, #296]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6819      	ldr	r1, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	430b      	orrs	r3, r1
 80024f8:	4944      	ldr	r1, [pc, #272]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d17d      	bne.n	8002600 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002504:	4b41      	ldr	r3, [pc, #260]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a40      	ldr	r2, [pc, #256]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 800250a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800250e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002510:	f7fe fb7c 	bl	8000c0c <HAL_GetTick>
 8002514:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002516:	e009      	b.n	800252c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002518:	f7fe fb78 	bl	8000c0c <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d902      	bls.n	800252c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	73fb      	strb	r3, [r7, #15]
        break;
 800252a:	e005      	b.n	8002538 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800252c:	4b37      	ldr	r3, [pc, #220]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1ef      	bne.n	8002518 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d160      	bne.n	8002600 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d111      	bne.n	8002568 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002544:	4b31      	ldr	r3, [pc, #196]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800254c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6892      	ldr	r2, [r2, #8]
 8002554:	0211      	lsls	r1, r2, #8
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68d2      	ldr	r2, [r2, #12]
 800255a:	0912      	lsrs	r2, r2, #4
 800255c:	0452      	lsls	r2, r2, #17
 800255e:	430a      	orrs	r2, r1
 8002560:	492a      	ldr	r1, [pc, #168]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002562:	4313      	orrs	r3, r2
 8002564:	610b      	str	r3, [r1, #16]
 8002566:	e027      	b.n	80025b8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d112      	bne.n	8002594 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800256e:	4b27      	ldr	r3, [pc, #156]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002576:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6892      	ldr	r2, [r2, #8]
 800257e:	0211      	lsls	r1, r2, #8
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6912      	ldr	r2, [r2, #16]
 8002584:	0852      	lsrs	r2, r2, #1
 8002586:	3a01      	subs	r2, #1
 8002588:	0552      	lsls	r2, r2, #21
 800258a:	430a      	orrs	r2, r1
 800258c:	491f      	ldr	r1, [pc, #124]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 800258e:	4313      	orrs	r3, r2
 8002590:	610b      	str	r3, [r1, #16]
 8002592:	e011      	b.n	80025b8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002594:	4b1d      	ldr	r3, [pc, #116]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800259c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6892      	ldr	r2, [r2, #8]
 80025a4:	0211      	lsls	r1, r2, #8
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6952      	ldr	r2, [r2, #20]
 80025aa:	0852      	lsrs	r2, r2, #1
 80025ac:	3a01      	subs	r2, #1
 80025ae:	0652      	lsls	r2, r2, #25
 80025b0:	430a      	orrs	r2, r1
 80025b2:	4916      	ldr	r1, [pc, #88]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025b8:	4b14      	ldr	r3, [pc, #80]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a13      	ldr	r2, [pc, #76]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c4:	f7fe fb22 	bl	8000c0c <HAL_GetTick>
 80025c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025ca:	e009      	b.n	80025e0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025cc:	f7fe fb1e 	bl	8000c0c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d902      	bls.n	80025e0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	73fb      	strb	r3, [r7, #15]
          break;
 80025de:	e005      	b.n	80025ec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025e0:	4b0a      	ldr	r3, [pc, #40]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0ef      	beq.n	80025cc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d106      	bne.n	8002600 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025f2:	4b06      	ldr	r3, [pc, #24]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	4904      	ldr	r1, [pc, #16]	@ (800260c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002600:	7bfb      	ldrb	r3, [r7, #15]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000

08002610 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800261e:	4b6a      	ldr	r3, [pc, #424]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d018      	beq.n	800265c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800262a:	4b67      	ldr	r3, [pc, #412]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f003 0203 	and.w	r2, r3, #3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d10d      	bne.n	8002656 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
       ||
 800263e:	2b00      	cmp	r3, #0
 8002640:	d009      	beq.n	8002656 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002642:	4b61      	ldr	r3, [pc, #388]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	091b      	lsrs	r3, r3, #4
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
       ||
 8002652:	429a      	cmp	r2, r3
 8002654:	d047      	beq.n	80026e6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	73fb      	strb	r3, [r7, #15]
 800265a:	e044      	b.n	80026e6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b03      	cmp	r3, #3
 8002662:	d018      	beq.n	8002696 <RCCEx_PLLSAI2_Config+0x86>
 8002664:	2b03      	cmp	r3, #3
 8002666:	d825      	bhi.n	80026b4 <RCCEx_PLLSAI2_Config+0xa4>
 8002668:	2b01      	cmp	r3, #1
 800266a:	d002      	beq.n	8002672 <RCCEx_PLLSAI2_Config+0x62>
 800266c:	2b02      	cmp	r3, #2
 800266e:	d009      	beq.n	8002684 <RCCEx_PLLSAI2_Config+0x74>
 8002670:	e020      	b.n	80026b4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002672:	4b55      	ldr	r3, [pc, #340]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d11d      	bne.n	80026ba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002682:	e01a      	b.n	80026ba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002684:	4b50      	ldr	r3, [pc, #320]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800268c:	2b00      	cmp	r3, #0
 800268e:	d116      	bne.n	80026be <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002694:	e013      	b.n	80026be <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002696:	4b4c      	ldr	r3, [pc, #304]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10f      	bne.n	80026c2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026a2:	4b49      	ldr	r3, [pc, #292]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d109      	bne.n	80026c2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026b2:	e006      	b.n	80026c2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	73fb      	strb	r3, [r7, #15]
      break;
 80026b8:	e004      	b.n	80026c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026ba:	bf00      	nop
 80026bc:	e002      	b.n	80026c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026be:	bf00      	nop
 80026c0:	e000      	b.n	80026c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10d      	bne.n	80026e6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026ca:	4b3f      	ldr	r3, [pc, #252]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6819      	ldr	r1, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	3b01      	subs	r3, #1
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	430b      	orrs	r3, r1
 80026e0:	4939      	ldr	r1, [pc, #228]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d167      	bne.n	80027bc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80026ec:	4b36      	ldr	r3, [pc, #216]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a35      	ldr	r2, [pc, #212]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f8:	f7fe fa88 	bl	8000c0c <HAL_GetTick>
 80026fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026fe:	e009      	b.n	8002714 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002700:	f7fe fa84 	bl	8000c0c <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d902      	bls.n	8002714 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	73fb      	strb	r3, [r7, #15]
        break;
 8002712:	e005      	b.n	8002720 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002714:	4b2c      	ldr	r3, [pc, #176]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1ef      	bne.n	8002700 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002720:	7bfb      	ldrb	r3, [r7, #15]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d14a      	bne.n	80027bc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d111      	bne.n	8002750 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800272c:	4b26      	ldr	r3, [pc, #152]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002734:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6892      	ldr	r2, [r2, #8]
 800273c:	0211      	lsls	r1, r2, #8
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	68d2      	ldr	r2, [r2, #12]
 8002742:	0912      	lsrs	r2, r2, #4
 8002744:	0452      	lsls	r2, r2, #17
 8002746:	430a      	orrs	r2, r1
 8002748:	491f      	ldr	r1, [pc, #124]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800274a:	4313      	orrs	r3, r2
 800274c:	614b      	str	r3, [r1, #20]
 800274e:	e011      	b.n	8002774 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002750:	4b1d      	ldr	r3, [pc, #116]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002758:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6892      	ldr	r2, [r2, #8]
 8002760:	0211      	lsls	r1, r2, #8
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6912      	ldr	r2, [r2, #16]
 8002766:	0852      	lsrs	r2, r2, #1
 8002768:	3a01      	subs	r2, #1
 800276a:	0652      	lsls	r2, r2, #25
 800276c:	430a      	orrs	r2, r1
 800276e:	4916      	ldr	r1, [pc, #88]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002770:	4313      	orrs	r3, r2
 8002772:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002774:	4b14      	ldr	r3, [pc, #80]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a13      	ldr	r2, [pc, #76]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800277a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800277e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002780:	f7fe fa44 	bl	8000c0c <HAL_GetTick>
 8002784:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002786:	e009      	b.n	800279c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002788:	f7fe fa40 	bl	8000c0c <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d902      	bls.n	800279c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	73fb      	strb	r3, [r7, #15]
          break;
 800279a:	e005      	b.n	80027a8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800279c:	4b0a      	ldr	r3, [pc, #40]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0ef      	beq.n	8002788 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80027ae:	4b06      	ldr	r3, [pc, #24]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b0:	695a      	ldr	r2, [r3, #20]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	4904      	ldr	r1, [pc, #16]	@ (80027c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000

080027cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e049      	b.n	8002872 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7fe f868 	bl	80008c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3304      	adds	r3, #4
 8002808:	4619      	mov	r1, r3
 800280a:	4610      	mov	r0, r2
 800280c:	f000 fb7a 	bl	8002f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e049      	b.n	8002920 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d106      	bne.n	80028a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f841 	bl	8002928 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2202      	movs	r2, #2
 80028aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3304      	adds	r3, #4
 80028b6:	4619      	mov	r1, r3
 80028b8:	4610      	mov	r0, r2
 80028ba:	f000 fb23 	bl	8002f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d109      	bne.n	8002960 <HAL_TIM_PWM_Start+0x24>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b01      	cmp	r3, #1
 8002956:	bf14      	ite	ne
 8002958:	2301      	movne	r3, #1
 800295a:	2300      	moveq	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	e03c      	b.n	80029da <HAL_TIM_PWM_Start+0x9e>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	2b04      	cmp	r3, #4
 8002964:	d109      	bne.n	800297a <HAL_TIM_PWM_Start+0x3e>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b01      	cmp	r3, #1
 8002970:	bf14      	ite	ne
 8002972:	2301      	movne	r3, #1
 8002974:	2300      	moveq	r3, #0
 8002976:	b2db      	uxtb	r3, r3
 8002978:	e02f      	b.n	80029da <HAL_TIM_PWM_Start+0x9e>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b08      	cmp	r3, #8
 800297e:	d109      	bne.n	8002994 <HAL_TIM_PWM_Start+0x58>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b01      	cmp	r3, #1
 800298a:	bf14      	ite	ne
 800298c:	2301      	movne	r3, #1
 800298e:	2300      	moveq	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	e022      	b.n	80029da <HAL_TIM_PWM_Start+0x9e>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	2b0c      	cmp	r3, #12
 8002998:	d109      	bne.n	80029ae <HAL_TIM_PWM_Start+0x72>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	bf14      	ite	ne
 80029a6:	2301      	movne	r3, #1
 80029a8:	2300      	moveq	r3, #0
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	e015      	b.n	80029da <HAL_TIM_PWM_Start+0x9e>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b10      	cmp	r3, #16
 80029b2:	d109      	bne.n	80029c8 <HAL_TIM_PWM_Start+0x8c>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b01      	cmp	r3, #1
 80029be:	bf14      	ite	ne
 80029c0:	2301      	movne	r3, #1
 80029c2:	2300      	moveq	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	e008      	b.n	80029da <HAL_TIM_PWM_Start+0x9e>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	bf14      	ite	ne
 80029d4:	2301      	movne	r3, #1
 80029d6:	2300      	moveq	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e09c      	b.n	8002b1c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d104      	bne.n	80029f2 <HAL_TIM_PWM_Start+0xb6>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029f0:	e023      	b.n	8002a3a <HAL_TIM_PWM_Start+0xfe>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d104      	bne.n	8002a02 <HAL_TIM_PWM_Start+0xc6>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a00:	e01b      	b.n	8002a3a <HAL_TIM_PWM_Start+0xfe>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d104      	bne.n	8002a12 <HAL_TIM_PWM_Start+0xd6>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a10:	e013      	b.n	8002a3a <HAL_TIM_PWM_Start+0xfe>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b0c      	cmp	r3, #12
 8002a16:	d104      	bne.n	8002a22 <HAL_TIM_PWM_Start+0xe6>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002a20:	e00b      	b.n	8002a3a <HAL_TIM_PWM_Start+0xfe>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b10      	cmp	r3, #16
 8002a26:	d104      	bne.n	8002a32 <HAL_TIM_PWM_Start+0xf6>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a30:	e003      	b.n	8002a3a <HAL_TIM_PWM_Start+0xfe>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2202      	movs	r2, #2
 8002a36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	6839      	ldr	r1, [r7, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 fe74 	bl	8003730 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a35      	ldr	r2, [pc, #212]	@ (8002b24 <HAL_TIM_PWM_Start+0x1e8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d013      	beq.n	8002a7a <HAL_TIM_PWM_Start+0x13e>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a34      	ldr	r2, [pc, #208]	@ (8002b28 <HAL_TIM_PWM_Start+0x1ec>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d00e      	beq.n	8002a7a <HAL_TIM_PWM_Start+0x13e>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a32      	ldr	r2, [pc, #200]	@ (8002b2c <HAL_TIM_PWM_Start+0x1f0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d009      	beq.n	8002a7a <HAL_TIM_PWM_Start+0x13e>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a31      	ldr	r2, [pc, #196]	@ (8002b30 <HAL_TIM_PWM_Start+0x1f4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d004      	beq.n	8002a7a <HAL_TIM_PWM_Start+0x13e>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a2f      	ldr	r2, [pc, #188]	@ (8002b34 <HAL_TIM_PWM_Start+0x1f8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d101      	bne.n	8002a7e <HAL_TIM_PWM_Start+0x142>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <HAL_TIM_PWM_Start+0x144>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d007      	beq.n	8002a94 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a92:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a22      	ldr	r2, [pc, #136]	@ (8002b24 <HAL_TIM_PWM_Start+0x1e8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d01d      	beq.n	8002ada <HAL_TIM_PWM_Start+0x19e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aa6:	d018      	beq.n	8002ada <HAL_TIM_PWM_Start+0x19e>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a22      	ldr	r2, [pc, #136]	@ (8002b38 <HAL_TIM_PWM_Start+0x1fc>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d013      	beq.n	8002ada <HAL_TIM_PWM_Start+0x19e>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a21      	ldr	r2, [pc, #132]	@ (8002b3c <HAL_TIM_PWM_Start+0x200>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d00e      	beq.n	8002ada <HAL_TIM_PWM_Start+0x19e>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b40 <HAL_TIM_PWM_Start+0x204>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d009      	beq.n	8002ada <HAL_TIM_PWM_Start+0x19e>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a17      	ldr	r2, [pc, #92]	@ (8002b28 <HAL_TIM_PWM_Start+0x1ec>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d004      	beq.n	8002ada <HAL_TIM_PWM_Start+0x19e>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a15      	ldr	r2, [pc, #84]	@ (8002b2c <HAL_TIM_PWM_Start+0x1f0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d115      	bne.n	8002b06 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	4b18      	ldr	r3, [pc, #96]	@ (8002b44 <HAL_TIM_PWM_Start+0x208>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2b06      	cmp	r3, #6
 8002aea:	d015      	beq.n	8002b18 <HAL_TIM_PWM_Start+0x1dc>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002af2:	d011      	beq.n	8002b18 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b04:	e008      	b.n	8002b18 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 0201 	orr.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	e000      	b.n	8002b1a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40012c00 	.word	0x40012c00
 8002b28:	40013400 	.word	0x40013400
 8002b2c:	40014000 	.word	0x40014000
 8002b30:	40014400 	.word	0x40014400
 8002b34:	40014800 	.word	0x40014800
 8002b38:	40000400 	.word	0x40000400
 8002b3c:	40000800 	.word	0x40000800
 8002b40:	40000c00 	.word	0x40000c00
 8002b44:	00010007 	.word	0x00010007

08002b48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b54:	2300      	movs	r3, #0
 8002b56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d101      	bne.n	8002b66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e0ff      	b.n	8002d66 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b14      	cmp	r3, #20
 8002b72:	f200 80f0 	bhi.w	8002d56 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002b76:	a201      	add	r2, pc, #4	@ (adr r2, 8002b7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7c:	08002bd1 	.word	0x08002bd1
 8002b80:	08002d57 	.word	0x08002d57
 8002b84:	08002d57 	.word	0x08002d57
 8002b88:	08002d57 	.word	0x08002d57
 8002b8c:	08002c11 	.word	0x08002c11
 8002b90:	08002d57 	.word	0x08002d57
 8002b94:	08002d57 	.word	0x08002d57
 8002b98:	08002d57 	.word	0x08002d57
 8002b9c:	08002c53 	.word	0x08002c53
 8002ba0:	08002d57 	.word	0x08002d57
 8002ba4:	08002d57 	.word	0x08002d57
 8002ba8:	08002d57 	.word	0x08002d57
 8002bac:	08002c93 	.word	0x08002c93
 8002bb0:	08002d57 	.word	0x08002d57
 8002bb4:	08002d57 	.word	0x08002d57
 8002bb8:	08002d57 	.word	0x08002d57
 8002bbc:	08002cd5 	.word	0x08002cd5
 8002bc0:	08002d57 	.word	0x08002d57
 8002bc4:	08002d57 	.word	0x08002d57
 8002bc8:	08002d57 	.word	0x08002d57
 8002bcc:	08002d15 	.word	0x08002d15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68b9      	ldr	r1, [r7, #8]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 fa3a 	bl	8003050 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699a      	ldr	r2, [r3, #24]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0208 	orr.w	r2, r2, #8
 8002bea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699a      	ldr	r2, [r3, #24]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0204 	bic.w	r2, r2, #4
 8002bfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6999      	ldr	r1, [r3, #24]
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	691a      	ldr	r2, [r3, #16]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	619a      	str	r2, [r3, #24]
      break;
 8002c0e:	e0a5      	b.n	8002d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68b9      	ldr	r1, [r7, #8]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 faaa 	bl	8003170 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699a      	ldr	r2, [r3, #24]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699a      	ldr	r2, [r3, #24]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6999      	ldr	r1, [r3, #24]
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	021a      	lsls	r2, r3, #8
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	619a      	str	r2, [r3, #24]
      break;
 8002c50:	e084      	b.n	8002d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68b9      	ldr	r1, [r7, #8]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 fb13 	bl	8003284 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	69da      	ldr	r2, [r3, #28]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f042 0208 	orr.w	r2, r2, #8
 8002c6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	69da      	ldr	r2, [r3, #28]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0204 	bic.w	r2, r2, #4
 8002c7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	69d9      	ldr	r1, [r3, #28]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	691a      	ldr	r2, [r3, #16]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	61da      	str	r2, [r3, #28]
      break;
 8002c90:	e064      	b.n	8002d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68b9      	ldr	r1, [r7, #8]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 fb7b 	bl	8003394 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	69da      	ldr	r2, [r3, #28]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	69da      	ldr	r2, [r3, #28]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	69d9      	ldr	r1, [r3, #28]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	021a      	lsls	r2, r3, #8
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	61da      	str	r2, [r3, #28]
      break;
 8002cd2:	e043      	b.n	8002d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68b9      	ldr	r1, [r7, #8]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 fbc4 	bl	8003468 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0208 	orr.w	r2, r2, #8
 8002cee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0204 	bic.w	r2, r2, #4
 8002cfe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	691a      	ldr	r2, [r3, #16]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002d12:	e023      	b.n	8002d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68b9      	ldr	r1, [r7, #8]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 fc08 	bl	8003530 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d2e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d3e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	021a      	lsls	r2, r3, #8
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002d54:	e002      	b.n	8002d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	75fb      	strb	r3, [r7, #23]
      break;
 8002d5a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop

08002d70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_TIM_ConfigClockSource+0x1c>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e0b6      	b.n	8002efa <HAL_TIM_ConfigClockSource+0x18a>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002daa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002dae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002db6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dc8:	d03e      	beq.n	8002e48 <HAL_TIM_ConfigClockSource+0xd8>
 8002dca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dce:	f200 8087 	bhi.w	8002ee0 <HAL_TIM_ConfigClockSource+0x170>
 8002dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dd6:	f000 8086 	beq.w	8002ee6 <HAL_TIM_ConfigClockSource+0x176>
 8002dda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dde:	d87f      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x170>
 8002de0:	2b70      	cmp	r3, #112	@ 0x70
 8002de2:	d01a      	beq.n	8002e1a <HAL_TIM_ConfigClockSource+0xaa>
 8002de4:	2b70      	cmp	r3, #112	@ 0x70
 8002de6:	d87b      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x170>
 8002de8:	2b60      	cmp	r3, #96	@ 0x60
 8002dea:	d050      	beq.n	8002e8e <HAL_TIM_ConfigClockSource+0x11e>
 8002dec:	2b60      	cmp	r3, #96	@ 0x60
 8002dee:	d877      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x170>
 8002df0:	2b50      	cmp	r3, #80	@ 0x50
 8002df2:	d03c      	beq.n	8002e6e <HAL_TIM_ConfigClockSource+0xfe>
 8002df4:	2b50      	cmp	r3, #80	@ 0x50
 8002df6:	d873      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x170>
 8002df8:	2b40      	cmp	r3, #64	@ 0x40
 8002dfa:	d058      	beq.n	8002eae <HAL_TIM_ConfigClockSource+0x13e>
 8002dfc:	2b40      	cmp	r3, #64	@ 0x40
 8002dfe:	d86f      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x170>
 8002e00:	2b30      	cmp	r3, #48	@ 0x30
 8002e02:	d064      	beq.n	8002ece <HAL_TIM_ConfigClockSource+0x15e>
 8002e04:	2b30      	cmp	r3, #48	@ 0x30
 8002e06:	d86b      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x170>
 8002e08:	2b20      	cmp	r3, #32
 8002e0a:	d060      	beq.n	8002ece <HAL_TIM_ConfigClockSource+0x15e>
 8002e0c:	2b20      	cmp	r3, #32
 8002e0e:	d867      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x170>
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d05c      	beq.n	8002ece <HAL_TIM_ConfigClockSource+0x15e>
 8002e14:	2b10      	cmp	r3, #16
 8002e16:	d05a      	beq.n	8002ece <HAL_TIM_ConfigClockSource+0x15e>
 8002e18:	e062      	b.n	8002ee0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e2a:	f000 fc61 	bl	80036f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002e3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	609a      	str	r2, [r3, #8]
      break;
 8002e46:	e04f      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e58:	f000 fc4a 	bl	80036f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e6a:	609a      	str	r2, [r3, #8]
      break;
 8002e6c:	e03c      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	f000 fbbe 	bl	80035fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2150      	movs	r1, #80	@ 0x50
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fc17 	bl	80036ba <TIM_ITRx_SetConfig>
      break;
 8002e8c:	e02c      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	f000 fbdd 	bl	800365a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2160      	movs	r1, #96	@ 0x60
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 fc07 	bl	80036ba <TIM_ITRx_SetConfig>
      break;
 8002eac:	e01c      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f000 fb9e 	bl	80035fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2140      	movs	r1, #64	@ 0x40
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fbf7 	bl	80036ba <TIM_ITRx_SetConfig>
      break;
 8002ecc:	e00c      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4610      	mov	r0, r2
 8002eda:	f000 fbee 	bl	80036ba <TIM_ITRx_SetConfig>
      break;
 8002ede:	e003      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ee4:	e000      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002ee6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a46      	ldr	r2, [pc, #280]	@ (8003030 <TIM_Base_SetConfig+0x12c>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d013      	beq.n	8002f44 <TIM_Base_SetConfig+0x40>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f22:	d00f      	beq.n	8002f44 <TIM_Base_SetConfig+0x40>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a43      	ldr	r2, [pc, #268]	@ (8003034 <TIM_Base_SetConfig+0x130>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d00b      	beq.n	8002f44 <TIM_Base_SetConfig+0x40>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a42      	ldr	r2, [pc, #264]	@ (8003038 <TIM_Base_SetConfig+0x134>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d007      	beq.n	8002f44 <TIM_Base_SetConfig+0x40>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a41      	ldr	r2, [pc, #260]	@ (800303c <TIM_Base_SetConfig+0x138>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d003      	beq.n	8002f44 <TIM_Base_SetConfig+0x40>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a40      	ldr	r2, [pc, #256]	@ (8003040 <TIM_Base_SetConfig+0x13c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d108      	bne.n	8002f56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a35      	ldr	r2, [pc, #212]	@ (8003030 <TIM_Base_SetConfig+0x12c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d01f      	beq.n	8002f9e <TIM_Base_SetConfig+0x9a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f64:	d01b      	beq.n	8002f9e <TIM_Base_SetConfig+0x9a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a32      	ldr	r2, [pc, #200]	@ (8003034 <TIM_Base_SetConfig+0x130>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d017      	beq.n	8002f9e <TIM_Base_SetConfig+0x9a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a31      	ldr	r2, [pc, #196]	@ (8003038 <TIM_Base_SetConfig+0x134>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d013      	beq.n	8002f9e <TIM_Base_SetConfig+0x9a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a30      	ldr	r2, [pc, #192]	@ (800303c <TIM_Base_SetConfig+0x138>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00f      	beq.n	8002f9e <TIM_Base_SetConfig+0x9a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a2f      	ldr	r2, [pc, #188]	@ (8003040 <TIM_Base_SetConfig+0x13c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d00b      	beq.n	8002f9e <TIM_Base_SetConfig+0x9a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a2e      	ldr	r2, [pc, #184]	@ (8003044 <TIM_Base_SetConfig+0x140>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d007      	beq.n	8002f9e <TIM_Base_SetConfig+0x9a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a2d      	ldr	r2, [pc, #180]	@ (8003048 <TIM_Base_SetConfig+0x144>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d003      	beq.n	8002f9e <TIM_Base_SetConfig+0x9a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a2c      	ldr	r2, [pc, #176]	@ (800304c <TIM_Base_SetConfig+0x148>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d108      	bne.n	8002fb0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a16      	ldr	r2, [pc, #88]	@ (8003030 <TIM_Base_SetConfig+0x12c>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d00f      	beq.n	8002ffc <TIM_Base_SetConfig+0xf8>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a18      	ldr	r2, [pc, #96]	@ (8003040 <TIM_Base_SetConfig+0x13c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d00b      	beq.n	8002ffc <TIM_Base_SetConfig+0xf8>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a17      	ldr	r2, [pc, #92]	@ (8003044 <TIM_Base_SetConfig+0x140>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d007      	beq.n	8002ffc <TIM_Base_SetConfig+0xf8>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a16      	ldr	r2, [pc, #88]	@ (8003048 <TIM_Base_SetConfig+0x144>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d003      	beq.n	8002ffc <TIM_Base_SetConfig+0xf8>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a15      	ldr	r2, [pc, #84]	@ (800304c <TIM_Base_SetConfig+0x148>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d103      	bne.n	8003004 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b01      	cmp	r3, #1
 8003014:	d105      	bne.n	8003022 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f023 0201 	bic.w	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	611a      	str	r2, [r3, #16]
  }
}
 8003022:	bf00      	nop
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40012c00 	.word	0x40012c00
 8003034:	40000400 	.word	0x40000400
 8003038:	40000800 	.word	0x40000800
 800303c:	40000c00 	.word	0x40000c00
 8003040:	40013400 	.word	0x40013400
 8003044:	40014000 	.word	0x40014000
 8003048:	40014400 	.word	0x40014400
 800304c:	40014800 	.word	0x40014800

08003050 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	f023 0201 	bic.w	r2, r3, #1
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800307e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f023 0303 	bic.w	r3, r3, #3
 800308a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	4313      	orrs	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f023 0302 	bic.w	r3, r3, #2
 800309c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a2c      	ldr	r2, [pc, #176]	@ (800315c <TIM_OC1_SetConfig+0x10c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d00f      	beq.n	80030d0 <TIM_OC1_SetConfig+0x80>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a2b      	ldr	r2, [pc, #172]	@ (8003160 <TIM_OC1_SetConfig+0x110>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d00b      	beq.n	80030d0 <TIM_OC1_SetConfig+0x80>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a2a      	ldr	r2, [pc, #168]	@ (8003164 <TIM_OC1_SetConfig+0x114>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d007      	beq.n	80030d0 <TIM_OC1_SetConfig+0x80>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a29      	ldr	r2, [pc, #164]	@ (8003168 <TIM_OC1_SetConfig+0x118>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d003      	beq.n	80030d0 <TIM_OC1_SetConfig+0x80>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a28      	ldr	r2, [pc, #160]	@ (800316c <TIM_OC1_SetConfig+0x11c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d10c      	bne.n	80030ea <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f023 0308 	bic.w	r3, r3, #8
 80030d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	4313      	orrs	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f023 0304 	bic.w	r3, r3, #4
 80030e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a1b      	ldr	r2, [pc, #108]	@ (800315c <TIM_OC1_SetConfig+0x10c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00f      	beq.n	8003112 <TIM_OC1_SetConfig+0xc2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a1a      	ldr	r2, [pc, #104]	@ (8003160 <TIM_OC1_SetConfig+0x110>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00b      	beq.n	8003112 <TIM_OC1_SetConfig+0xc2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a19      	ldr	r2, [pc, #100]	@ (8003164 <TIM_OC1_SetConfig+0x114>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d007      	beq.n	8003112 <TIM_OC1_SetConfig+0xc2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a18      	ldr	r2, [pc, #96]	@ (8003168 <TIM_OC1_SetConfig+0x118>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d003      	beq.n	8003112 <TIM_OC1_SetConfig+0xc2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a17      	ldr	r2, [pc, #92]	@ (800316c <TIM_OC1_SetConfig+0x11c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d111      	bne.n	8003136 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003118:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003120:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	621a      	str	r2, [r3, #32]
}
 8003150:	bf00      	nop
 8003152:	371c      	adds	r7, #28
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	40012c00 	.word	0x40012c00
 8003160:	40013400 	.word	0x40013400
 8003164:	40014000 	.word	0x40014000
 8003168:	40014400 	.word	0x40014400
 800316c:	40014800 	.word	0x40014800

08003170 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	f023 0210 	bic.w	r2, r3, #16
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800319e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f023 0320 	bic.w	r3, r3, #32
 80031be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a28      	ldr	r2, [pc, #160]	@ (8003270 <TIM_OC2_SetConfig+0x100>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d003      	beq.n	80031dc <TIM_OC2_SetConfig+0x6c>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a27      	ldr	r2, [pc, #156]	@ (8003274 <TIM_OC2_SetConfig+0x104>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d10d      	bne.n	80031f8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a1d      	ldr	r2, [pc, #116]	@ (8003270 <TIM_OC2_SetConfig+0x100>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d00f      	beq.n	8003220 <TIM_OC2_SetConfig+0xb0>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a1c      	ldr	r2, [pc, #112]	@ (8003274 <TIM_OC2_SetConfig+0x104>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d00b      	beq.n	8003220 <TIM_OC2_SetConfig+0xb0>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a1b      	ldr	r2, [pc, #108]	@ (8003278 <TIM_OC2_SetConfig+0x108>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d007      	beq.n	8003220 <TIM_OC2_SetConfig+0xb0>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a1a      	ldr	r2, [pc, #104]	@ (800327c <TIM_OC2_SetConfig+0x10c>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d003      	beq.n	8003220 <TIM_OC2_SetConfig+0xb0>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a19      	ldr	r2, [pc, #100]	@ (8003280 <TIM_OC2_SetConfig+0x110>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d113      	bne.n	8003248 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003226:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800322e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	621a      	str	r2, [r3, #32]
}
 8003262:	bf00      	nop
 8003264:	371c      	adds	r7, #28
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40012c00 	.word	0x40012c00
 8003274:	40013400 	.word	0x40013400
 8003278:	40014000 	.word	0x40014000
 800327c:	40014400 	.word	0x40014400
 8003280:	40014800 	.word	0x40014800

08003284 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003284:	b480      	push	{r7}
 8003286:	b087      	sub	sp, #28
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0303 	bic.w	r3, r3, #3
 80032be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80032d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	021b      	lsls	r3, r3, #8
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a27      	ldr	r2, [pc, #156]	@ (8003380 <TIM_OC3_SetConfig+0xfc>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d003      	beq.n	80032ee <TIM_OC3_SetConfig+0x6a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a26      	ldr	r2, [pc, #152]	@ (8003384 <TIM_OC3_SetConfig+0x100>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d10d      	bne.n	800330a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80032f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	021b      	lsls	r3, r3, #8
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	4313      	orrs	r3, r2
 8003300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003308:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a1c      	ldr	r2, [pc, #112]	@ (8003380 <TIM_OC3_SetConfig+0xfc>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d00f      	beq.n	8003332 <TIM_OC3_SetConfig+0xae>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a1b      	ldr	r2, [pc, #108]	@ (8003384 <TIM_OC3_SetConfig+0x100>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d00b      	beq.n	8003332 <TIM_OC3_SetConfig+0xae>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a1a      	ldr	r2, [pc, #104]	@ (8003388 <TIM_OC3_SetConfig+0x104>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d007      	beq.n	8003332 <TIM_OC3_SetConfig+0xae>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a19      	ldr	r2, [pc, #100]	@ (800338c <TIM_OC3_SetConfig+0x108>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d003      	beq.n	8003332 <TIM_OC3_SetConfig+0xae>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a18      	ldr	r2, [pc, #96]	@ (8003390 <TIM_OC3_SetConfig+0x10c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d113      	bne.n	800335a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003338:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003340:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	621a      	str	r2, [r3, #32]
}
 8003374:	bf00      	nop
 8003376:	371c      	adds	r7, #28
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	40012c00 	.word	0x40012c00
 8003384:	40013400 	.word	0x40013400
 8003388:	40014000 	.word	0x40014000
 800338c:	40014400 	.word	0x40014400
 8003390:	40014800 	.word	0x40014800

08003394 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	021b      	lsls	r3, r3, #8
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4313      	orrs	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80033e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	031b      	lsls	r3, r3, #12
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a18      	ldr	r2, [pc, #96]	@ (8003454 <TIM_OC4_SetConfig+0xc0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d00f      	beq.n	8003418 <TIM_OC4_SetConfig+0x84>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a17      	ldr	r2, [pc, #92]	@ (8003458 <TIM_OC4_SetConfig+0xc4>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d00b      	beq.n	8003418 <TIM_OC4_SetConfig+0x84>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a16      	ldr	r2, [pc, #88]	@ (800345c <TIM_OC4_SetConfig+0xc8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d007      	beq.n	8003418 <TIM_OC4_SetConfig+0x84>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a15      	ldr	r2, [pc, #84]	@ (8003460 <TIM_OC4_SetConfig+0xcc>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d003      	beq.n	8003418 <TIM_OC4_SetConfig+0x84>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a14      	ldr	r2, [pc, #80]	@ (8003464 <TIM_OC4_SetConfig+0xd0>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d109      	bne.n	800342c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800341e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	019b      	lsls	r3, r3, #6
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4313      	orrs	r3, r2
 800342a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	621a      	str	r2, [r3, #32]
}
 8003446:	bf00      	nop
 8003448:	371c      	adds	r7, #28
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	40012c00 	.word	0x40012c00
 8003458:	40013400 	.word	0x40013400
 800345c:	40014000 	.word	0x40014000
 8003460:	40014400 	.word	0x40014400
 8003464:	40014800 	.word	0x40014800

08003468 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003468:	b480      	push	{r7}
 800346a:	b087      	sub	sp, #28
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800348e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800349a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80034ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	041b      	lsls	r3, r3, #16
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a17      	ldr	r2, [pc, #92]	@ (800351c <TIM_OC5_SetConfig+0xb4>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00f      	beq.n	80034e2 <TIM_OC5_SetConfig+0x7a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a16      	ldr	r2, [pc, #88]	@ (8003520 <TIM_OC5_SetConfig+0xb8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00b      	beq.n	80034e2 <TIM_OC5_SetConfig+0x7a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a15      	ldr	r2, [pc, #84]	@ (8003524 <TIM_OC5_SetConfig+0xbc>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d007      	beq.n	80034e2 <TIM_OC5_SetConfig+0x7a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a14      	ldr	r2, [pc, #80]	@ (8003528 <TIM_OC5_SetConfig+0xc0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d003      	beq.n	80034e2 <TIM_OC5_SetConfig+0x7a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a13      	ldr	r2, [pc, #76]	@ (800352c <TIM_OC5_SetConfig+0xc4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d109      	bne.n	80034f6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	021b      	lsls	r3, r3, #8
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	621a      	str	r2, [r3, #32]
}
 8003510:	bf00      	nop
 8003512:	371c      	adds	r7, #28
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	40012c00 	.word	0x40012c00
 8003520:	40013400 	.word	0x40013400
 8003524:	40014000 	.word	0x40014000
 8003528:	40014400 	.word	0x40014400
 800352c:	40014800 	.word	0x40014800

08003530 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003530:	b480      	push	{r7}
 8003532:	b087      	sub	sp, #28
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800355e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	021b      	lsls	r3, r3, #8
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	4313      	orrs	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003576:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	051b      	lsls	r3, r3, #20
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a18      	ldr	r2, [pc, #96]	@ (80035e8 <TIM_OC6_SetConfig+0xb8>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d00f      	beq.n	80035ac <TIM_OC6_SetConfig+0x7c>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a17      	ldr	r2, [pc, #92]	@ (80035ec <TIM_OC6_SetConfig+0xbc>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d00b      	beq.n	80035ac <TIM_OC6_SetConfig+0x7c>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a16      	ldr	r2, [pc, #88]	@ (80035f0 <TIM_OC6_SetConfig+0xc0>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d007      	beq.n	80035ac <TIM_OC6_SetConfig+0x7c>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a15      	ldr	r2, [pc, #84]	@ (80035f4 <TIM_OC6_SetConfig+0xc4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d003      	beq.n	80035ac <TIM_OC6_SetConfig+0x7c>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a14      	ldr	r2, [pc, #80]	@ (80035f8 <TIM_OC6_SetConfig+0xc8>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d109      	bne.n	80035c0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	029b      	lsls	r3, r3, #10
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	4313      	orrs	r3, r2
 80035be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	621a      	str	r2, [r3, #32]
}
 80035da:	bf00      	nop
 80035dc:	371c      	adds	r7, #28
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40012c00 	.word	0x40012c00
 80035ec:	40013400 	.word	0x40013400
 80035f0:	40014000 	.word	0x40014000
 80035f4:	40014400 	.word	0x40014400
 80035f8:	40014800 	.word	0x40014800

080035fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b087      	sub	sp, #28
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	f023 0201 	bic.w	r2, r3, #1
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003626:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f023 030a 	bic.w	r3, r3, #10
 8003638:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4313      	orrs	r3, r2
 8003640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	621a      	str	r2, [r3, #32]
}
 800364e:	bf00      	nop
 8003650:	371c      	adds	r7, #28
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800365a:	b480      	push	{r7}
 800365c:	b087      	sub	sp, #28
 800365e:	af00      	add	r7, sp, #0
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	f023 0210 	bic.w	r2, r3, #16
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003684:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	031b      	lsls	r3, r3, #12
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003696:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	4313      	orrs	r3, r2
 80036a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	621a      	str	r2, [r3, #32]
}
 80036ae:	bf00      	nop
 80036b0:	371c      	adds	r7, #28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b085      	sub	sp, #20
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f043 0307 	orr.w	r3, r3, #7
 80036dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	609a      	str	r2, [r3, #8]
}
 80036e4:	bf00      	nop
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b087      	sub	sp, #28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800370a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	021a      	lsls	r2, r3, #8
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	431a      	orrs	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4313      	orrs	r3, r2
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	4313      	orrs	r3, r2
 800371c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	609a      	str	r2, [r3, #8]
}
 8003724:	bf00      	nop
 8003726:	371c      	adds	r7, #28
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003730:	b480      	push	{r7}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f003 031f 	and.w	r3, r3, #31
 8003742:	2201      	movs	r2, #1
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a1a      	ldr	r2, [r3, #32]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	43db      	mvns	r3, r3
 8003752:	401a      	ands	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a1a      	ldr	r2, [r3, #32]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f003 031f 	and.w	r3, r3, #31
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	fa01 f303 	lsl.w	r3, r1, r3
 8003768:	431a      	orrs	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	621a      	str	r2, [r3, #32]
}
 800376e:	bf00      	nop
 8003770:	371c      	adds	r7, #28
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
	...

0800377c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003790:	2302      	movs	r3, #2
 8003792:	e068      	b.n	8003866 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a2e      	ldr	r2, [pc, #184]	@ (8003874 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d004      	beq.n	80037c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a2d      	ldr	r2, [pc, #180]	@ (8003878 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d108      	bne.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80037ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a1e      	ldr	r2, [pc, #120]	@ (8003874 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d01d      	beq.n	800383a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003806:	d018      	beq.n	800383a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a1b      	ldr	r2, [pc, #108]	@ (800387c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d013      	beq.n	800383a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a1a      	ldr	r2, [pc, #104]	@ (8003880 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d00e      	beq.n	800383a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a18      	ldr	r2, [pc, #96]	@ (8003884 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d009      	beq.n	800383a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a13      	ldr	r2, [pc, #76]	@ (8003878 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d004      	beq.n	800383a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a14      	ldr	r2, [pc, #80]	@ (8003888 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d10c      	bne.n	8003854 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003840:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	4313      	orrs	r3, r2
 800384a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40012c00 	.word	0x40012c00
 8003878:	40013400 	.word	0x40013400
 800387c:	40000400 	.word	0x40000400
 8003880:	40000800 	.word	0x40000800
 8003884:	40000c00 	.word	0x40000c00
 8003888:	40014000 	.word	0x40014000

0800388c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e040      	b.n	8003920 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d106      	bne.n	80038b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7fd f874 	bl	800099c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2224      	movs	r2, #36	@ 0x24
 80038b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0201 	bic.w	r2, r2, #1
 80038c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fae0 	bl	8003e98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f825 	bl	8003928 <UART_SetConfig>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d101      	bne.n	80038e8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e01b      	b.n	8003920 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003906:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0201 	orr.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 fb5f 	bl	8003fdc <UART_CheckIdleState>
 800391e:	4603      	mov	r3, r0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800392c:	b08a      	sub	sp, #40	@ 0x28
 800392e:	af00      	add	r7, sp, #0
 8003930:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	431a      	orrs	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	431a      	orrs	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	4313      	orrs	r3, r2
 800394e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	4ba4      	ldr	r3, [pc, #656]	@ (8003be8 <UART_SetConfig+0x2c0>)
 8003958:	4013      	ands	r3, r2
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	6812      	ldr	r2, [r2, #0]
 800395e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003960:	430b      	orrs	r3, r1
 8003962:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a99      	ldr	r2, [pc, #612]	@ (8003bec <UART_SetConfig+0x2c4>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d004      	beq.n	8003994 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003990:	4313      	orrs	r3, r2
 8003992:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039a4:	430a      	orrs	r2, r1
 80039a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a90      	ldr	r2, [pc, #576]	@ (8003bf0 <UART_SetConfig+0x2c8>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d126      	bne.n	8003a00 <UART_SetConfig+0xd8>
 80039b2:	4b90      	ldr	r3, [pc, #576]	@ (8003bf4 <UART_SetConfig+0x2cc>)
 80039b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d81b      	bhi.n	80039f8 <UART_SetConfig+0xd0>
 80039c0:	a201      	add	r2, pc, #4	@ (adr r2, 80039c8 <UART_SetConfig+0xa0>)
 80039c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c6:	bf00      	nop
 80039c8:	080039d9 	.word	0x080039d9
 80039cc:	080039e9 	.word	0x080039e9
 80039d0:	080039e1 	.word	0x080039e1
 80039d4:	080039f1 	.word	0x080039f1
 80039d8:	2301      	movs	r3, #1
 80039da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039de:	e116      	b.n	8003c0e <UART_SetConfig+0x2e6>
 80039e0:	2302      	movs	r3, #2
 80039e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039e6:	e112      	b.n	8003c0e <UART_SetConfig+0x2e6>
 80039e8:	2304      	movs	r3, #4
 80039ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039ee:	e10e      	b.n	8003c0e <UART_SetConfig+0x2e6>
 80039f0:	2308      	movs	r3, #8
 80039f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039f6:	e10a      	b.n	8003c0e <UART_SetConfig+0x2e6>
 80039f8:	2310      	movs	r3, #16
 80039fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039fe:	e106      	b.n	8003c0e <UART_SetConfig+0x2e6>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a7c      	ldr	r2, [pc, #496]	@ (8003bf8 <UART_SetConfig+0x2d0>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d138      	bne.n	8003a7c <UART_SetConfig+0x154>
 8003a0a:	4b7a      	ldr	r3, [pc, #488]	@ (8003bf4 <UART_SetConfig+0x2cc>)
 8003a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a10:	f003 030c 	and.w	r3, r3, #12
 8003a14:	2b0c      	cmp	r3, #12
 8003a16:	d82d      	bhi.n	8003a74 <UART_SetConfig+0x14c>
 8003a18:	a201      	add	r2, pc, #4	@ (adr r2, 8003a20 <UART_SetConfig+0xf8>)
 8003a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1e:	bf00      	nop
 8003a20:	08003a55 	.word	0x08003a55
 8003a24:	08003a75 	.word	0x08003a75
 8003a28:	08003a75 	.word	0x08003a75
 8003a2c:	08003a75 	.word	0x08003a75
 8003a30:	08003a65 	.word	0x08003a65
 8003a34:	08003a75 	.word	0x08003a75
 8003a38:	08003a75 	.word	0x08003a75
 8003a3c:	08003a75 	.word	0x08003a75
 8003a40:	08003a5d 	.word	0x08003a5d
 8003a44:	08003a75 	.word	0x08003a75
 8003a48:	08003a75 	.word	0x08003a75
 8003a4c:	08003a75 	.word	0x08003a75
 8003a50:	08003a6d 	.word	0x08003a6d
 8003a54:	2300      	movs	r3, #0
 8003a56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a5a:	e0d8      	b.n	8003c0e <UART_SetConfig+0x2e6>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a62:	e0d4      	b.n	8003c0e <UART_SetConfig+0x2e6>
 8003a64:	2304      	movs	r3, #4
 8003a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a6a:	e0d0      	b.n	8003c0e <UART_SetConfig+0x2e6>
 8003a6c:	2308      	movs	r3, #8
 8003a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a72:	e0cc      	b.n	8003c0e <UART_SetConfig+0x2e6>
 8003a74:	2310      	movs	r3, #16
 8003a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a7a:	e0c8      	b.n	8003c0e <UART_SetConfig+0x2e6>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a5e      	ldr	r2, [pc, #376]	@ (8003bfc <UART_SetConfig+0x2d4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d125      	bne.n	8003ad2 <UART_SetConfig+0x1aa>
 8003a86:	4b5b      	ldr	r3, [pc, #364]	@ (8003bf4 <UART_SetConfig+0x2cc>)
 8003a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a8c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003a90:	2b30      	cmp	r3, #48	@ 0x30
 8003a92:	d016      	beq.n	8003ac2 <UART_SetConfig+0x19a>
 8003a94:	2b30      	cmp	r3, #48	@ 0x30
 8003a96:	d818      	bhi.n	8003aca <UART_SetConfig+0x1a2>
 8003a98:	2b20      	cmp	r3, #32
 8003a9a:	d00a      	beq.n	8003ab2 <UART_SetConfig+0x18a>
 8003a9c:	2b20      	cmp	r3, #32
 8003a9e:	d814      	bhi.n	8003aca <UART_SetConfig+0x1a2>
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <UART_SetConfig+0x182>
 8003aa4:	2b10      	cmp	r3, #16
 8003aa6:	d008      	beq.n	8003aba <UART_SetConfig+0x192>
 8003aa8:	e00f      	b.n	8003aca <UART_SetConfig+0x1a2>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ab0:	e0ad      	b.n	8003c0e <UART_SetConfig+0x2e6>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ab8:	e0a9      	b.n	8003c0e <UART_SetConfig+0x2e6>
 8003aba:	2304      	movs	r3, #4
 8003abc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ac0:	e0a5      	b.n	8003c0e <UART_SetConfig+0x2e6>
 8003ac2:	2308      	movs	r3, #8
 8003ac4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ac8:	e0a1      	b.n	8003c0e <UART_SetConfig+0x2e6>
 8003aca:	2310      	movs	r3, #16
 8003acc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ad0:	e09d      	b.n	8003c0e <UART_SetConfig+0x2e6>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a4a      	ldr	r2, [pc, #296]	@ (8003c00 <UART_SetConfig+0x2d8>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d125      	bne.n	8003b28 <UART_SetConfig+0x200>
 8003adc:	4b45      	ldr	r3, [pc, #276]	@ (8003bf4 <UART_SetConfig+0x2cc>)
 8003ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ae2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ae6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ae8:	d016      	beq.n	8003b18 <UART_SetConfig+0x1f0>
 8003aea:	2bc0      	cmp	r3, #192	@ 0xc0
 8003aec:	d818      	bhi.n	8003b20 <UART_SetConfig+0x1f8>
 8003aee:	2b80      	cmp	r3, #128	@ 0x80
 8003af0:	d00a      	beq.n	8003b08 <UART_SetConfig+0x1e0>
 8003af2:	2b80      	cmp	r3, #128	@ 0x80
 8003af4:	d814      	bhi.n	8003b20 <UART_SetConfig+0x1f8>
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <UART_SetConfig+0x1d8>
 8003afa:	2b40      	cmp	r3, #64	@ 0x40
 8003afc:	d008      	beq.n	8003b10 <UART_SetConfig+0x1e8>
 8003afe:	e00f      	b.n	8003b20 <UART_SetConfig+0x1f8>
 8003b00:	2300      	movs	r3, #0
 8003b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b06:	e082      	b.n	8003c0e <UART_SetConfig+0x2e6>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b0e:	e07e      	b.n	8003c0e <UART_SetConfig+0x2e6>
 8003b10:	2304      	movs	r3, #4
 8003b12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b16:	e07a      	b.n	8003c0e <UART_SetConfig+0x2e6>
 8003b18:	2308      	movs	r3, #8
 8003b1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b1e:	e076      	b.n	8003c0e <UART_SetConfig+0x2e6>
 8003b20:	2310      	movs	r3, #16
 8003b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b26:	e072      	b.n	8003c0e <UART_SetConfig+0x2e6>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a35      	ldr	r2, [pc, #212]	@ (8003c04 <UART_SetConfig+0x2dc>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d12a      	bne.n	8003b88 <UART_SetConfig+0x260>
 8003b32:	4b30      	ldr	r3, [pc, #192]	@ (8003bf4 <UART_SetConfig+0x2cc>)
 8003b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b40:	d01a      	beq.n	8003b78 <UART_SetConfig+0x250>
 8003b42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b46:	d81b      	bhi.n	8003b80 <UART_SetConfig+0x258>
 8003b48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b4c:	d00c      	beq.n	8003b68 <UART_SetConfig+0x240>
 8003b4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b52:	d815      	bhi.n	8003b80 <UART_SetConfig+0x258>
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <UART_SetConfig+0x238>
 8003b58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b5c:	d008      	beq.n	8003b70 <UART_SetConfig+0x248>
 8003b5e:	e00f      	b.n	8003b80 <UART_SetConfig+0x258>
 8003b60:	2300      	movs	r3, #0
 8003b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b66:	e052      	b.n	8003c0e <UART_SetConfig+0x2e6>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b6e:	e04e      	b.n	8003c0e <UART_SetConfig+0x2e6>
 8003b70:	2304      	movs	r3, #4
 8003b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b76:	e04a      	b.n	8003c0e <UART_SetConfig+0x2e6>
 8003b78:	2308      	movs	r3, #8
 8003b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b7e:	e046      	b.n	8003c0e <UART_SetConfig+0x2e6>
 8003b80:	2310      	movs	r3, #16
 8003b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b86:	e042      	b.n	8003c0e <UART_SetConfig+0x2e6>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a17      	ldr	r2, [pc, #92]	@ (8003bec <UART_SetConfig+0x2c4>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d13a      	bne.n	8003c08 <UART_SetConfig+0x2e0>
 8003b92:	4b18      	ldr	r3, [pc, #96]	@ (8003bf4 <UART_SetConfig+0x2cc>)
 8003b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b98:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b9c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ba0:	d01a      	beq.n	8003bd8 <UART_SetConfig+0x2b0>
 8003ba2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ba6:	d81b      	bhi.n	8003be0 <UART_SetConfig+0x2b8>
 8003ba8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bac:	d00c      	beq.n	8003bc8 <UART_SetConfig+0x2a0>
 8003bae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bb2:	d815      	bhi.n	8003be0 <UART_SetConfig+0x2b8>
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <UART_SetConfig+0x298>
 8003bb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bbc:	d008      	beq.n	8003bd0 <UART_SetConfig+0x2a8>
 8003bbe:	e00f      	b.n	8003be0 <UART_SetConfig+0x2b8>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bc6:	e022      	b.n	8003c0e <UART_SetConfig+0x2e6>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bce:	e01e      	b.n	8003c0e <UART_SetConfig+0x2e6>
 8003bd0:	2304      	movs	r3, #4
 8003bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bd6:	e01a      	b.n	8003c0e <UART_SetConfig+0x2e6>
 8003bd8:	2308      	movs	r3, #8
 8003bda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bde:	e016      	b.n	8003c0e <UART_SetConfig+0x2e6>
 8003be0:	2310      	movs	r3, #16
 8003be2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003be6:	e012      	b.n	8003c0e <UART_SetConfig+0x2e6>
 8003be8:	efff69f3 	.word	0xefff69f3
 8003bec:	40008000 	.word	0x40008000
 8003bf0:	40013800 	.word	0x40013800
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	40004400 	.word	0x40004400
 8003bfc:	40004800 	.word	0x40004800
 8003c00:	40004c00 	.word	0x40004c00
 8003c04:	40005000 	.word	0x40005000
 8003c08:	2310      	movs	r3, #16
 8003c0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a9f      	ldr	r2, [pc, #636]	@ (8003e90 <UART_SetConfig+0x568>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d17a      	bne.n	8003d0e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d824      	bhi.n	8003c6a <UART_SetConfig+0x342>
 8003c20:	a201      	add	r2, pc, #4	@ (adr r2, 8003c28 <UART_SetConfig+0x300>)
 8003c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c26:	bf00      	nop
 8003c28:	08003c4d 	.word	0x08003c4d
 8003c2c:	08003c6b 	.word	0x08003c6b
 8003c30:	08003c55 	.word	0x08003c55
 8003c34:	08003c6b 	.word	0x08003c6b
 8003c38:	08003c5b 	.word	0x08003c5b
 8003c3c:	08003c6b 	.word	0x08003c6b
 8003c40:	08003c6b 	.word	0x08003c6b
 8003c44:	08003c6b 	.word	0x08003c6b
 8003c48:	08003c63 	.word	0x08003c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c4c:	f7fe f876 	bl	8001d3c <HAL_RCC_GetPCLK1Freq>
 8003c50:	61f8      	str	r0, [r7, #28]
        break;
 8003c52:	e010      	b.n	8003c76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c54:	4b8f      	ldr	r3, [pc, #572]	@ (8003e94 <UART_SetConfig+0x56c>)
 8003c56:	61fb      	str	r3, [r7, #28]
        break;
 8003c58:	e00d      	b.n	8003c76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c5a:	f7fd ffd7 	bl	8001c0c <HAL_RCC_GetSysClockFreq>
 8003c5e:	61f8      	str	r0, [r7, #28]
        break;
 8003c60:	e009      	b.n	8003c76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c66:	61fb      	str	r3, [r7, #28]
        break;
 8003c68:	e005      	b.n	8003c76 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003c74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 80fb 	beq.w	8003e74 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	4413      	add	r3, r2
 8003c88:	69fa      	ldr	r2, [r7, #28]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d305      	bcc.n	8003c9a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c94:	69fa      	ldr	r2, [r7, #28]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d903      	bls.n	8003ca2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ca0:	e0e8      	b.n	8003e74 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	461c      	mov	r4, r3
 8003ca8:	4615      	mov	r5, r2
 8003caa:	f04f 0200 	mov.w	r2, #0
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	022b      	lsls	r3, r5, #8
 8003cb4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003cb8:	0222      	lsls	r2, r4, #8
 8003cba:	68f9      	ldr	r1, [r7, #12]
 8003cbc:	6849      	ldr	r1, [r1, #4]
 8003cbe:	0849      	lsrs	r1, r1, #1
 8003cc0:	2000      	movs	r0, #0
 8003cc2:	4688      	mov	r8, r1
 8003cc4:	4681      	mov	r9, r0
 8003cc6:	eb12 0a08 	adds.w	sl, r2, r8
 8003cca:	eb43 0b09 	adc.w	fp, r3, r9
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	603b      	str	r3, [r7, #0]
 8003cd6:	607a      	str	r2, [r7, #4]
 8003cd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cdc:	4650      	mov	r0, sl
 8003cde:	4659      	mov	r1, fp
 8003ce0:	f7fc fa72 	bl	80001c8 <__aeabi_uldivmod>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4613      	mov	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cf2:	d308      	bcc.n	8003d06 <UART_SetConfig+0x3de>
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cfa:	d204      	bcs.n	8003d06 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	60da      	str	r2, [r3, #12]
 8003d04:	e0b6      	b.n	8003e74 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d0c:	e0b2      	b.n	8003e74 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d16:	d15e      	bne.n	8003dd6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003d18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d828      	bhi.n	8003d72 <UART_SetConfig+0x44a>
 8003d20:	a201      	add	r2, pc, #4	@ (adr r2, 8003d28 <UART_SetConfig+0x400>)
 8003d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d26:	bf00      	nop
 8003d28:	08003d4d 	.word	0x08003d4d
 8003d2c:	08003d55 	.word	0x08003d55
 8003d30:	08003d5d 	.word	0x08003d5d
 8003d34:	08003d73 	.word	0x08003d73
 8003d38:	08003d63 	.word	0x08003d63
 8003d3c:	08003d73 	.word	0x08003d73
 8003d40:	08003d73 	.word	0x08003d73
 8003d44:	08003d73 	.word	0x08003d73
 8003d48:	08003d6b 	.word	0x08003d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d4c:	f7fd fff6 	bl	8001d3c <HAL_RCC_GetPCLK1Freq>
 8003d50:	61f8      	str	r0, [r7, #28]
        break;
 8003d52:	e014      	b.n	8003d7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d54:	f7fe f808 	bl	8001d68 <HAL_RCC_GetPCLK2Freq>
 8003d58:	61f8      	str	r0, [r7, #28]
        break;
 8003d5a:	e010      	b.n	8003d7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d5c:	4b4d      	ldr	r3, [pc, #308]	@ (8003e94 <UART_SetConfig+0x56c>)
 8003d5e:	61fb      	str	r3, [r7, #28]
        break;
 8003d60:	e00d      	b.n	8003d7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d62:	f7fd ff53 	bl	8001c0c <HAL_RCC_GetSysClockFreq>
 8003d66:	61f8      	str	r0, [r7, #28]
        break;
 8003d68:	e009      	b.n	8003d7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d6e:	61fb      	str	r3, [r7, #28]
        break;
 8003d70:	e005      	b.n	8003d7e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d077      	beq.n	8003e74 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	005a      	lsls	r2, r3, #1
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	085b      	lsrs	r3, r3, #1
 8003d8e:	441a      	add	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d98:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	2b0f      	cmp	r3, #15
 8003d9e:	d916      	bls.n	8003dce <UART_SetConfig+0x4a6>
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003da6:	d212      	bcs.n	8003dce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	f023 030f 	bic.w	r3, r3, #15
 8003db0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	085b      	lsrs	r3, r3, #1
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	8afb      	ldrh	r3, [r7, #22]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	8afa      	ldrh	r2, [r7, #22]
 8003dca:	60da      	str	r2, [r3, #12]
 8003dcc:	e052      	b.n	8003e74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003dd4:	e04e      	b.n	8003e74 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003dd6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003dda:	2b08      	cmp	r3, #8
 8003ddc:	d827      	bhi.n	8003e2e <UART_SetConfig+0x506>
 8003dde:	a201      	add	r2, pc, #4	@ (adr r2, 8003de4 <UART_SetConfig+0x4bc>)
 8003de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de4:	08003e09 	.word	0x08003e09
 8003de8:	08003e11 	.word	0x08003e11
 8003dec:	08003e19 	.word	0x08003e19
 8003df0:	08003e2f 	.word	0x08003e2f
 8003df4:	08003e1f 	.word	0x08003e1f
 8003df8:	08003e2f 	.word	0x08003e2f
 8003dfc:	08003e2f 	.word	0x08003e2f
 8003e00:	08003e2f 	.word	0x08003e2f
 8003e04:	08003e27 	.word	0x08003e27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e08:	f7fd ff98 	bl	8001d3c <HAL_RCC_GetPCLK1Freq>
 8003e0c:	61f8      	str	r0, [r7, #28]
        break;
 8003e0e:	e014      	b.n	8003e3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e10:	f7fd ffaa 	bl	8001d68 <HAL_RCC_GetPCLK2Freq>
 8003e14:	61f8      	str	r0, [r7, #28]
        break;
 8003e16:	e010      	b.n	8003e3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e18:	4b1e      	ldr	r3, [pc, #120]	@ (8003e94 <UART_SetConfig+0x56c>)
 8003e1a:	61fb      	str	r3, [r7, #28]
        break;
 8003e1c:	e00d      	b.n	8003e3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e1e:	f7fd fef5 	bl	8001c0c <HAL_RCC_GetSysClockFreq>
 8003e22:	61f8      	str	r0, [r7, #28]
        break;
 8003e24:	e009      	b.n	8003e3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e2a:	61fb      	str	r3, [r7, #28]
        break;
 8003e2c:	e005      	b.n	8003e3a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e38:	bf00      	nop
    }

    if (pclk != 0U)
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d019      	beq.n	8003e74 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	085a      	lsrs	r2, r3, #1
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	441a      	add	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e52:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	2b0f      	cmp	r3, #15
 8003e58:	d909      	bls.n	8003e6e <UART_SetConfig+0x546>
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e60:	d205      	bcs.n	8003e6e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	60da      	str	r2, [r3, #12]
 8003e6c:	e002      	b.n	8003e74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e80:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3728      	adds	r7, #40	@ 0x28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e8e:	bf00      	nop
 8003e90:	40008000 	.word	0x40008000
 8003e94:	00f42400 	.word	0x00f42400

08003e98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00a      	beq.n	8003ec2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00a      	beq.n	8003ee4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00a      	beq.n	8003f06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0a:	f003 0304 	and.w	r3, r3, #4
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2c:	f003 0310 	and.w	r3, r3, #16
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00a      	beq.n	8003f4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4e:	f003 0320 	and.w	r3, r3, #32
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01a      	beq.n	8003fae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f96:	d10a      	bne.n	8003fae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	605a      	str	r2, [r3, #4]
  }
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b098      	sub	sp, #96	@ 0x60
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fec:	f7fc fe0e 	bl	8000c0c <HAL_GetTick>
 8003ff0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d12e      	bne.n	800405e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004000:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004008:	2200      	movs	r2, #0
 800400a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f88c 	bl	800412c <UART_WaitOnFlagUntilTimeout>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d021      	beq.n	800405e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004022:	e853 3f00 	ldrex	r3, [r3]
 8004026:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800402a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800402e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	461a      	mov	r2, r3
 8004036:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004038:	647b      	str	r3, [r7, #68]	@ 0x44
 800403a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800403e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004040:	e841 2300 	strex	r3, r2, [r1]
 8004044:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1e6      	bne.n	800401a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2220      	movs	r2, #32
 8004050:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e062      	b.n	8004124 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b04      	cmp	r3, #4
 800406a:	d149      	bne.n	8004100 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800406c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004074:	2200      	movs	r2, #0
 8004076:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f856 	bl	800412c <UART_WaitOnFlagUntilTimeout>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d03c      	beq.n	8004100 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408e:	e853 3f00 	ldrex	r3, [r3]
 8004092:	623b      	str	r3, [r7, #32]
   return(result);
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800409a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	461a      	mov	r2, r3
 80040a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80040a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040ac:	e841 2300 	strex	r3, r2, [r1]
 80040b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1e6      	bne.n	8004086 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3308      	adds	r3, #8
 80040be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	e853 3f00 	ldrex	r3, [r3]
 80040c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f023 0301 	bic.w	r3, r3, #1
 80040ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	3308      	adds	r3, #8
 80040d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040d8:	61fa      	str	r2, [r7, #28]
 80040da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040dc:	69b9      	ldr	r1, [r7, #24]
 80040de:	69fa      	ldr	r2, [r7, #28]
 80040e0:	e841 2300 	strex	r3, r2, [r1]
 80040e4:	617b      	str	r3, [r7, #20]
   return(result);
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1e5      	bne.n	80040b8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2220      	movs	r2, #32
 80040f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e011      	b.n	8004124 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2220      	movs	r2, #32
 8004104:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2220      	movs	r2, #32
 800410a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3758      	adds	r7, #88	@ 0x58
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	4613      	mov	r3, r2
 800413a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800413c:	e04f      	b.n	80041de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004144:	d04b      	beq.n	80041de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004146:	f7fc fd61 	bl	8000c0c <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	429a      	cmp	r2, r3
 8004154:	d302      	bcc.n	800415c <UART_WaitOnFlagUntilTimeout+0x30>
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e04e      	b.n	80041fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0304 	and.w	r3, r3, #4
 800416a:	2b00      	cmp	r3, #0
 800416c:	d037      	beq.n	80041de <UART_WaitOnFlagUntilTimeout+0xb2>
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2b80      	cmp	r3, #128	@ 0x80
 8004172:	d034      	beq.n	80041de <UART_WaitOnFlagUntilTimeout+0xb2>
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2b40      	cmp	r3, #64	@ 0x40
 8004178:	d031      	beq.n	80041de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b08      	cmp	r3, #8
 8004186:	d110      	bne.n	80041aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2208      	movs	r2, #8
 800418e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f000 f838 	bl	8004206 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2208      	movs	r2, #8
 800419a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e029      	b.n	80041fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041b8:	d111      	bne.n	80041de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f81e 	bl	8004206 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e00f      	b.n	80041fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	69da      	ldr	r2, [r3, #28]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4013      	ands	r3, r2
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	bf0c      	ite	eq
 80041ee:	2301      	moveq	r3, #1
 80041f0:	2300      	movne	r3, #0
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	461a      	mov	r2, r3
 80041f6:	79fb      	ldrb	r3, [r7, #7]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d0a0      	beq.n	800413e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004206:	b480      	push	{r7}
 8004208:	b095      	sub	sp, #84	@ 0x54
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004216:	e853 3f00 	ldrex	r3, [r3]
 800421a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800421c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	461a      	mov	r2, r3
 800422a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800422c:	643b      	str	r3, [r7, #64]	@ 0x40
 800422e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004230:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004232:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004234:	e841 2300 	strex	r3, r2, [r1]
 8004238:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800423a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1e6      	bne.n	800420e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3308      	adds	r3, #8
 8004246:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004248:	6a3b      	ldr	r3, [r7, #32]
 800424a:	e853 3f00 	ldrex	r3, [r3]
 800424e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f023 0301 	bic.w	r3, r3, #1
 8004256:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	3308      	adds	r3, #8
 800425e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004260:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004262:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004264:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004266:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004268:	e841 2300 	strex	r3, r2, [r1]
 800426c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800426e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1e5      	bne.n	8004240 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004278:	2b01      	cmp	r3, #1
 800427a:	d118      	bne.n	80042ae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	e853 3f00 	ldrex	r3, [r3]
 8004288:	60bb      	str	r3, [r7, #8]
   return(result);
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	f023 0310 	bic.w	r3, r3, #16
 8004290:	647b      	str	r3, [r7, #68]	@ 0x44
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800429a:	61bb      	str	r3, [r7, #24]
 800429c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429e:	6979      	ldr	r1, [r7, #20]
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	e841 2300 	strex	r3, r2, [r1]
 80042a6:	613b      	str	r3, [r7, #16]
   return(result);
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1e6      	bne.n	800427c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80042c2:	bf00      	nop
 80042c4:	3754      	adds	r7, #84	@ 0x54
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <memset>:
 80042ce:	4402      	add	r2, r0
 80042d0:	4603      	mov	r3, r0
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d100      	bne.n	80042d8 <memset+0xa>
 80042d6:	4770      	bx	lr
 80042d8:	f803 1b01 	strb.w	r1, [r3], #1
 80042dc:	e7f9      	b.n	80042d2 <memset+0x4>
	...

080042e0 <__libc_init_array>:
 80042e0:	b570      	push	{r4, r5, r6, lr}
 80042e2:	4d0d      	ldr	r5, [pc, #52]	@ (8004318 <__libc_init_array+0x38>)
 80042e4:	4c0d      	ldr	r4, [pc, #52]	@ (800431c <__libc_init_array+0x3c>)
 80042e6:	1b64      	subs	r4, r4, r5
 80042e8:	10a4      	asrs	r4, r4, #2
 80042ea:	2600      	movs	r6, #0
 80042ec:	42a6      	cmp	r6, r4
 80042ee:	d109      	bne.n	8004304 <__libc_init_array+0x24>
 80042f0:	4d0b      	ldr	r5, [pc, #44]	@ (8004320 <__libc_init_array+0x40>)
 80042f2:	4c0c      	ldr	r4, [pc, #48]	@ (8004324 <__libc_init_array+0x44>)
 80042f4:	f000 f818 	bl	8004328 <_init>
 80042f8:	1b64      	subs	r4, r4, r5
 80042fa:	10a4      	asrs	r4, r4, #2
 80042fc:	2600      	movs	r6, #0
 80042fe:	42a6      	cmp	r6, r4
 8004300:	d105      	bne.n	800430e <__libc_init_array+0x2e>
 8004302:	bd70      	pop	{r4, r5, r6, pc}
 8004304:	f855 3b04 	ldr.w	r3, [r5], #4
 8004308:	4798      	blx	r3
 800430a:	3601      	adds	r6, #1
 800430c:	e7ee      	b.n	80042ec <__libc_init_array+0xc>
 800430e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004312:	4798      	blx	r3
 8004314:	3601      	adds	r6, #1
 8004316:	e7f2      	b.n	80042fe <__libc_init_array+0x1e>
 8004318:	08004390 	.word	0x08004390
 800431c:	08004390 	.word	0x08004390
 8004320:	08004390 	.word	0x08004390
 8004324:	08004394 	.word	0x08004394

08004328 <_init>:
 8004328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432a:	bf00      	nop
 800432c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800432e:	bc08      	pop	{r3}
 8004330:	469e      	mov	lr, r3
 8004332:	4770      	bx	lr

08004334 <_fini>:
 8004334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004336:	bf00      	nop
 8004338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800433a:	bc08      	pop	{r3}
 800433c:	469e      	mov	lr, r3
 800433e:	4770      	bx	lr
