
adc_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005010  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080051a0  080051a0  000061a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005224  08005224  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005224  08005224  00006224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800522c  0800522c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800522c  0800522c  0000622c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005230  08005230  00006230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005234  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000005c  08005290  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08005290  000072b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6de  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e16  00000000  00000000  0001576a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00017580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c2  00000000  00000000  00018228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027831  00000000  00000000  00018bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb13  00000000  00000000  0004041b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fabf4  00000000  00000000  0004ef2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149b22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a18  00000000  00000000  00149b68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0014d580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005188 	.word	0x08005188

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005188 	.word	0x08005188

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fb31 	bl	8000bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f83f 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f935 	bl	80007ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000582:	f000 f903 	bl	800078c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000586:	f000 f88b 	bl	80006a0 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, SET);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000590:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000594:	f002 f874 	bl	8002680 <HAL_GPIO_WritePin>

	  HAL_ADC_Start(&hadc1);
 8000598:	4815      	ldr	r0, [pc, #84]	@ (80005f0 <main+0x80>)
 800059a:	f000 fef3 	bl	8001384 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800059e:	f04f 31ff 	mov.w	r1, #4294967295
 80005a2:	4813      	ldr	r0, [pc, #76]	@ (80005f0 <main+0x80>)
 80005a4:	f000 ffa8 	bl	80014f8 <HAL_ADC_PollForConversion>
	  raw= HAL_ADC_GetValue(&hadc1);
 80005a8:	4811      	ldr	r0, [pc, #68]	@ (80005f0 <main+0x80>)
 80005aa:	f001 f87d 	bl	80016a8 <HAL_ADC_GetValue>
 80005ae:	4603      	mov	r3, r0
 80005b0:	81fb      	strh	r3, [r7, #14]
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005bc:	f002 f860 	bl	8002680 <HAL_GPIO_WritePin>
	  sprintf(msg, "%hu\r\n", raw);
 80005c0:	89fa      	ldrh	r2, [r7, #14]
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	490b      	ldr	r1, [pc, #44]	@ (80005f4 <main+0x84>)
 80005c6:	4618      	mov	r0, r3
 80005c8:	f004 f93e 	bl	8004848 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff fdfe 	bl	80001d0 <strlen>
 80005d4:	4603      	mov	r3, r0
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	1d39      	adds	r1, r7, #4
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	4806      	ldr	r0, [pc, #24]	@ (80005f8 <main+0x88>)
 80005e0:	f003 fbd4 	bl	8003d8c <HAL_UART_Transmit>

	  HAL_Delay(1);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f000 fb75 	bl	8000cd4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, SET);
 80005ea:	bf00      	nop
 80005ec:	e7cd      	b.n	800058a <main+0x1a>
 80005ee:	bf00      	nop
 80005f0:	20000078 	.word	0x20000078
 80005f4:	080051a0 	.word	0x080051a0
 80005f8:	200000dc 	.word	0x200000dc

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b096      	sub	sp, #88	@ 0x58
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	2244      	movs	r2, #68	@ 0x44
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f004 f93c 	bl	8004888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	463b      	mov	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000622:	f002 f853 	bl	80026cc <HAL_PWREx_ControlVoltageScaling>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800062c:	f000 f946 	bl	80008bc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000638:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063a:	2310      	movs	r3, #16
 800063c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000642:	2302      	movs	r3, #2
 8000644:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000646:	2301      	movs	r3, #1
 8000648:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800064a:	230a      	movs	r3, #10
 800064c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800064e:	2307      	movs	r3, #7
 8000650:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000652:	2302      	movs	r3, #2
 8000654:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	4618      	mov	r0, r3
 8000660:	f002 f88a 	bl	8002778 <HAL_RCC_OscConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800066a:	f000 f927 	bl	80008bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
 8000670:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000672:	2303      	movs	r3, #3
 8000674:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000682:	463b      	mov	r3, r7
 8000684:	2104      	movs	r1, #4
 8000686:	4618      	mov	r0, r3
 8000688:	f002 fc52 	bl	8002f30 <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000692:	f000 f913 	bl	80008bc <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3758      	adds	r7, #88	@ 0x58
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	@ 0x28
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
 80006c0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006c2:	4b2f      	ldr	r3, [pc, #188]	@ (8000780 <MX_ADC1_Init+0xe0>)
 80006c4:	4a2f      	ldr	r2, [pc, #188]	@ (8000784 <MX_ADC1_Init+0xe4>)
 80006c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006c8:	4b2d      	ldr	r3, [pc, #180]	@ (8000780 <MX_ADC1_Init+0xe0>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000780 <MX_ADC1_Init+0xe0>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000780 <MX_ADC1_Init+0xe0>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <MX_ADC1_Init+0xe0>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e0:	4b27      	ldr	r3, [pc, #156]	@ (8000780 <MX_ADC1_Init+0xe0>)
 80006e2:	2204      	movs	r2, #4
 80006e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <MX_ADC1_Init+0xe0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ec:	4b24      	ldr	r3, [pc, #144]	@ (8000780 <MX_ADC1_Init+0xe0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006f2:	4b23      	ldr	r3, [pc, #140]	@ (8000780 <MX_ADC1_Init+0xe0>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f8:	4b21      	ldr	r3, [pc, #132]	@ (8000780 <MX_ADC1_Init+0xe0>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000700:	4b1f      	ldr	r3, [pc, #124]	@ (8000780 <MX_ADC1_Init+0xe0>)
 8000702:	2200      	movs	r2, #0
 8000704:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000706:	4b1e      	ldr	r3, [pc, #120]	@ (8000780 <MX_ADC1_Init+0xe0>)
 8000708:	2200      	movs	r2, #0
 800070a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800070c:	4b1c      	ldr	r3, [pc, #112]	@ (8000780 <MX_ADC1_Init+0xe0>)
 800070e:	2200      	movs	r2, #0
 8000710:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000714:	4b1a      	ldr	r3, [pc, #104]	@ (8000780 <MX_ADC1_Init+0xe0>)
 8000716:	2200      	movs	r2, #0
 8000718:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800071a:	4b19      	ldr	r3, [pc, #100]	@ (8000780 <MX_ADC1_Init+0xe0>)
 800071c:	2200      	movs	r2, #0
 800071e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000722:	4817      	ldr	r0, [pc, #92]	@ (8000780 <MX_ADC1_Init+0xe0>)
 8000724:	f000 fcde 	bl	80010e4 <HAL_ADC_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800072e:	f000 f8c5 	bl	80008bc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	4619      	mov	r1, r3
 800073c:	4810      	ldr	r0, [pc, #64]	@ (8000780 <MX_ADC1_Init+0xe0>)
 800073e:	f001 fc5f 	bl	8002000 <HAL_ADCEx_MultiModeConfigChannel>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000748:	f000 f8b8 	bl	80008bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800074c:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <MX_ADC1_Init+0xe8>)
 800074e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000750:	2306      	movs	r3, #6
 8000752:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000758:	237f      	movs	r3, #127	@ 0x7f
 800075a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800075c:	2304      	movs	r3, #4
 800075e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	4619      	mov	r1, r3
 8000768:	4805      	ldr	r0, [pc, #20]	@ (8000780 <MX_ADC1_Init+0xe0>)
 800076a:	f000 ffab 	bl	80016c4 <HAL_ADC_ConfigChannel>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000774:	f000 f8a2 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	3728      	adds	r7, #40	@ 0x28
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000078 	.word	0x20000078
 8000784:	50040000 	.word	0x50040000
 8000788:	14f00020 	.word	0x14f00020

0800078c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000790:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 8000792:	4a15      	ldr	r2, [pc, #84]	@ (80007e8 <MX_USART2_UART_Init+0x5c>)
 8000794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000796:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 8000798:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800079c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007d0:	f003 fa8e 	bl	8003cf0 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007da:	f000 f86f 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200000dc 	.word	0x200000dc
 80007e8:	40004400 	.word	0x40004400

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	@ 0x28
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	4b2c      	ldr	r3, [pc, #176]	@ (80008b4 <MX_GPIO_Init+0xc8>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000806:	4a2b      	ldr	r2, [pc, #172]	@ (80008b4 <MX_GPIO_Init+0xc8>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080e:	4b29      	ldr	r3, [pc, #164]	@ (80008b4 <MX_GPIO_Init+0xc8>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	4b26      	ldr	r3, [pc, #152]	@ (80008b4 <MX_GPIO_Init+0xc8>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081e:	4a25      	ldr	r2, [pc, #148]	@ (80008b4 <MX_GPIO_Init+0xc8>)
 8000820:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000824:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000826:	4b23      	ldr	r3, [pc, #140]	@ (80008b4 <MX_GPIO_Init+0xc8>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b20      	ldr	r3, [pc, #128]	@ (80008b4 <MX_GPIO_Init+0xc8>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000836:	4a1f      	ldr	r2, [pc, #124]	@ (80008b4 <MX_GPIO_Init+0xc8>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083e:	4b1d      	ldr	r3, [pc, #116]	@ (80008b4 <MX_GPIO_Init+0xc8>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	4b1a      	ldr	r3, [pc, #104]	@ (80008b4 <MX_GPIO_Init+0xc8>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084e:	4a19      	ldr	r2, [pc, #100]	@ (80008b4 <MX_GPIO_Init+0xc8>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000856:	4b17      	ldr	r3, [pc, #92]	@ (80008b4 <MX_GPIO_Init+0xc8>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8000868:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800086c:	f001 ff08 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000870:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000876:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800087a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	480c      	ldr	r0, [pc, #48]	@ (80008b8 <MX_GPIO_Init+0xcc>)
 8000888:	f001 fd50 	bl	800232c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 800088c:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8000890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4619      	mov	r1, r3
 80008a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a8:	f001 fd40 	bl	800232c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ac:	bf00      	nop
 80008ae:	3728      	adds	r7, #40	@ 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40021000 	.word	0x40021000
 80008b8:	48000800 	.word	0x48000800

080008bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c0:	b672      	cpsid	i
}
 80008c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <Error_Handler+0x8>

080008c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	4b0f      	ldr	r3, [pc, #60]	@ (800090c <HAL_MspInit+0x44>)
 80008d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008d2:	4a0e      	ldr	r2, [pc, #56]	@ (800090c <HAL_MspInit+0x44>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80008da:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <HAL_MspInit+0x44>)
 80008dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	4b09      	ldr	r3, [pc, #36]	@ (800090c <HAL_MspInit+0x44>)
 80008e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ea:	4a08      	ldr	r2, [pc, #32]	@ (800090c <HAL_MspInit+0x44>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80008f2:	4b06      	ldr	r3, [pc, #24]	@ (800090c <HAL_MspInit+0x44>)
 80008f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	40021000 	.word	0x40021000

08000910 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b0ac      	sub	sp, #176	@ 0xb0
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2288      	movs	r2, #136	@ 0x88
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f003 ffa9 	bl	8004888 <memset>
  if(hadc->Instance==ADC1)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a27      	ldr	r2, [pc, #156]	@ (80009d8 <HAL_ADC_MspInit+0xc8>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d147      	bne.n	80009d0 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000940:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000944:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000946:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800094a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800094e:	2302      	movs	r3, #2
 8000950:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000952:	2301      	movs	r3, #1
 8000954:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000956:	2308      	movs	r3, #8
 8000958:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800095a:	2307      	movs	r3, #7
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800095e:	2302      	movs	r3, #2
 8000960:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000962:	2302      	movs	r3, #2
 8000964:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000966:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800096a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4618      	mov	r0, r3
 8000972:	f002 fd01 	bl	8003378 <HAL_RCCEx_PeriphCLKConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800097c:	f7ff ff9e 	bl	80008bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000980:	4b16      	ldr	r3, [pc, #88]	@ (80009dc <HAL_ADC_MspInit+0xcc>)
 8000982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000984:	4a15      	ldr	r2, [pc, #84]	@ (80009dc <HAL_ADC_MspInit+0xcc>)
 8000986:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800098a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800098c:	4b13      	ldr	r3, [pc, #76]	@ (80009dc <HAL_ADC_MspInit+0xcc>)
 800098e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000990:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000998:	4b10      	ldr	r3, [pc, #64]	@ (80009dc <HAL_ADC_MspInit+0xcc>)
 800099a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099c:	4a0f      	ldr	r2, [pc, #60]	@ (80009dc <HAL_ADC_MspInit+0xcc>)
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a4:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <HAL_ADC_MspInit+0xcc>)
 80009a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a8:	f003 0301 	and.w	r3, r3, #1
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009b0:	2301      	movs	r3, #1
 80009b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009b6:	230b      	movs	r3, #11
 80009b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009c6:	4619      	mov	r1, r3
 80009c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009cc:	f001 fcae 	bl	800232c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80009d0:	bf00      	nop
 80009d2:	37b0      	adds	r7, #176	@ 0xb0
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	50040000 	.word	0x50040000
 80009dc:	40021000 	.word	0x40021000

080009e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b0ac      	sub	sp, #176	@ 0xb0
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	2288      	movs	r2, #136	@ 0x88
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f003 ff41 	bl	8004888 <memset>
  if(huart->Instance==USART2)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a21      	ldr	r2, [pc, #132]	@ (8000a90 <HAL_UART_MspInit+0xb0>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d13b      	bne.n	8000a88 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a10:	2302      	movs	r3, #2
 8000a12:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f002 fcab 	bl	8003378 <HAL_RCCEx_PeriphCLKConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a28:	f7ff ff48 	bl	80008bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a2c:	4b19      	ldr	r3, [pc, #100]	@ (8000a94 <HAL_UART_MspInit+0xb4>)
 8000a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a30:	4a18      	ldr	r2, [pc, #96]	@ (8000a94 <HAL_UART_MspInit+0xb4>)
 8000a32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a36:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a38:	4b16      	ldr	r3, [pc, #88]	@ (8000a94 <HAL_UART_MspInit+0xb4>)
 8000a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a44:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <HAL_UART_MspInit+0xb4>)
 8000a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a48:	4a12      	ldr	r2, [pc, #72]	@ (8000a94 <HAL_UART_MspInit+0xb4>)
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a50:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <HAL_UART_MspInit+0xb4>)
 8000a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a5c:	230c      	movs	r3, #12
 8000a5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a74:	2307      	movs	r3, #7
 8000a76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a7e:	4619      	mov	r1, r3
 8000a80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a84:	f001 fc52 	bl	800232c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a88:	bf00      	nop
 8000a8a:	37b0      	adds	r7, #176	@ 0xb0
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40004400 	.word	0x40004400
 8000a94:	40021000 	.word	0x40021000

08000a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <NMI_Handler+0x4>

08000aa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <HardFault_Handler+0x4>

08000aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <MemManage_Handler+0x4>

08000ab0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <BusFault_Handler+0x4>

08000ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <UsageFault_Handler+0x4>

08000ac0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aee:	f000 f8d1 	bl	8000c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b00:	4a14      	ldr	r2, [pc, #80]	@ (8000b54 <_sbrk+0x5c>)
 8000b02:	4b15      	ldr	r3, [pc, #84]	@ (8000b58 <_sbrk+0x60>)
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b0c:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <_sbrk+0x64>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d102      	bne.n	8000b1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b14:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <_sbrk+0x64>)
 8000b16:	4a12      	ldr	r2, [pc, #72]	@ (8000b60 <_sbrk+0x68>)
 8000b18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b1a:	4b10      	ldr	r3, [pc, #64]	@ (8000b5c <_sbrk+0x64>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d207      	bcs.n	8000b38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b28:	f003 feb6 	bl	8004898 <__errno>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	220c      	movs	r2, #12
 8000b30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
 8000b36:	e009      	b.n	8000b4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b38:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <_sbrk+0x64>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b3e:	4b07      	ldr	r3, [pc, #28]	@ (8000b5c <_sbrk+0x64>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	4a05      	ldr	r2, [pc, #20]	@ (8000b5c <_sbrk+0x64>)
 8000b48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3718      	adds	r7, #24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20018000 	.word	0x20018000
 8000b58:	00000400 	.word	0x00000400
 8000b5c:	20000164 	.word	0x20000164
 8000b60:	200002b8 	.word	0x200002b8

08000b64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b68:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <SystemInit+0x20>)
 8000b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b6e:	4a05      	ldr	r2, [pc, #20]	@ (8000b84 <SystemInit+0x20>)
 8000b70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bc0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b8c:	f7ff ffea 	bl	8000b64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b90:	480c      	ldr	r0, [pc, #48]	@ (8000bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b92:	490d      	ldr	r1, [pc, #52]	@ (8000bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b94:	4a0d      	ldr	r2, [pc, #52]	@ (8000bcc <LoopForever+0xe>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba8:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd4 <LoopForever+0x16>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f003 fe75 	bl	80048a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bba:	f7ff fcd9 	bl	8000570 <main>

08000bbe <LoopForever>:

LoopForever:
    b LoopForever
 8000bbe:	e7fe      	b.n	8000bbe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bcc:	08005234 	.word	0x08005234
  ldr r2, =_sbss
 8000bd0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bd4:	200002b4 	.word	0x200002b4

08000bd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC1_2_IRQHandler>
	...

08000bdc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000be2:	2300      	movs	r3, #0
 8000be4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <HAL_Init+0x3c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a0b      	ldr	r2, [pc, #44]	@ (8000c18 <HAL_Init+0x3c>)
 8000bec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bf0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf2:	2003      	movs	r0, #3
 8000bf4:	f001 fb66 	bl	80022c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f000 f80f 	bl	8000c1c <HAL_InitTick>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d002      	beq.n	8000c0a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	71fb      	strb	r3, [r7, #7]
 8000c08:	e001      	b.n	8000c0e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c0a:	f7ff fe5d 	bl	80008c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40022000 	.word	0x40022000

08000c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c24:	2300      	movs	r3, #0
 8000c26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c28:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <HAL_InitTick+0x6c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d023      	beq.n	8000c78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c30:	4b16      	ldr	r3, [pc, #88]	@ (8000c8c <HAL_InitTick+0x70>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <HAL_InitTick+0x6c>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c46:	4618      	mov	r0, r3
 8000c48:	f001 fb63 	bl	8002312 <HAL_SYSTICK_Config>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d10f      	bne.n	8000c72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b0f      	cmp	r3, #15
 8000c56:	d809      	bhi.n	8000c6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f001 fb3b 	bl	80022da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c64:	4a0a      	ldr	r2, [pc, #40]	@ (8000c90 <HAL_InitTick+0x74>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
 8000c6a:	e007      	b.n	8000c7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	e004      	b.n	8000c7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	73fb      	strb	r3, [r7, #15]
 8000c76:	e001      	b.n	8000c7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	20000004 	.word	0x20000004

08000c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c98:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <HAL_IncTick+0x20>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <HAL_IncTick+0x24>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a04      	ldr	r2, [pc, #16]	@ (8000cb8 <HAL_IncTick+0x24>)
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	20000168 	.word	0x20000168

08000cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	@ (8000cd0 <HAL_GetTick+0x14>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000168 	.word	0x20000168

08000cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cdc:	f7ff ffee 	bl	8000cbc <HAL_GetTick>
 8000ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cec:	d005      	beq.n	8000cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cee:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <HAL_Delay+0x44>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cfa:	bf00      	nop
 8000cfc:	f7ff ffde 	bl	8000cbc <HAL_GetTick>
 8000d00:	4602      	mov	r2, r0
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d8f7      	bhi.n	8000cfc <HAL_Delay+0x28>
  {
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000008 	.word	0x20000008

08000d1c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	431a      	orrs	r2, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	609a      	str	r2, [r3, #8]
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b083      	sub	sp, #12
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
 8000d4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	431a      	orrs	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b087      	sub	sp, #28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	3360      	adds	r3, #96	@ 0x60
 8000d96:	461a      	mov	r2, r3
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b08      	ldr	r3, [pc, #32]	@ (8000dc8 <LL_ADC_SetOffset+0x44>)
 8000da6:	4013      	ands	r3, r2
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000dae:	683a      	ldr	r2, [r7, #0]
 8000db0:	430a      	orrs	r2, r1
 8000db2:	4313      	orrs	r3, r2
 8000db4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000dbc:	bf00      	nop
 8000dbe:	371c      	adds	r7, #28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	03fff000 	.word	0x03fff000

08000dcc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3360      	adds	r3, #96	@ 0x60
 8000dda:	461a      	mov	r2, r3
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	4413      	add	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	3360      	adds	r3, #96	@ 0x60
 8000e08:	461a      	mov	r2, r3
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	4413      	add	r3, r2
 8000e10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	431a      	orrs	r2, r3
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e22:	bf00      	nop
 8000e24:	371c      	adds	r7, #28
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e42:	2301      	movs	r3, #1
 8000e44:	e000      	b.n	8000e48 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b087      	sub	sp, #28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	3330      	adds	r3, #48	@ 0x30
 8000e64:	461a      	mov	r2, r3
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	0a1b      	lsrs	r3, r3, #8
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	f003 030c 	and.w	r3, r3, #12
 8000e70:	4413      	add	r3, r2
 8000e72:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	f003 031f 	and.w	r3, r3, #31
 8000e7e:	211f      	movs	r1, #31
 8000e80:	fa01 f303 	lsl.w	r3, r1, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	401a      	ands	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	0e9b      	lsrs	r3, r3, #26
 8000e8c:	f003 011f 	and.w	r1, r3, #31
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	f003 031f 	and.w	r3, r3, #31
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ea0:	bf00      	nop
 8000ea2:	371c      	adds	r7, #28
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b087      	sub	sp, #28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	3314      	adds	r3, #20
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	0e5b      	lsrs	r3, r3, #25
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	f003 0304 	and.w	r3, r3, #4
 8000ec8:	4413      	add	r3, r2
 8000eca:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	0d1b      	lsrs	r3, r3, #20
 8000ed4:	f003 031f 	and.w	r3, r3, #31
 8000ed8:	2107      	movs	r1, #7
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	401a      	ands	r2, r3
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	0d1b      	lsrs	r3, r3, #20
 8000ee6:	f003 031f 	and.w	r3, r3, #31
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ef6:	bf00      	nop
 8000ef8:	371c      	adds	r7, #28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	401a      	ands	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f003 0318 	and.w	r3, r3, #24
 8000f26:	4908      	ldr	r1, [pc, #32]	@ (8000f48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f28:	40d9      	lsrs	r1, r3
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	400b      	ands	r3, r1
 8000f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f32:	431a      	orrs	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	0007ffff 	.word	0x0007ffff

08000f4c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f003 031f 	and.w	r3, r3, #31
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000f94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	6093      	str	r3, [r2, #8]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000fb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000fbc:	d101      	bne.n	8000fc2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000fe0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000fe4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001008:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800100c:	d101      	bne.n	8001012 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800100e:	2301      	movs	r3, #1
 8001010:	e000      	b.n	8001014 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001030:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001034:	f043 0201 	orr.w	r2, r3, #1
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b01      	cmp	r3, #1
 800105a:	d101      	bne.n	8001060 <LL_ADC_IsEnabled+0x18>
 800105c:	2301      	movs	r3, #1
 800105e:	e000      	b.n	8001062 <LL_ADC_IsEnabled+0x1a>
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800107e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001082:	f043 0204 	orr.w	r2, r3, #4
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f003 0304 	and.w	r3, r3, #4
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	d101      	bne.n	80010ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f003 0308 	and.w	r3, r3, #8
 80010cc:	2b08      	cmp	r3, #8
 80010ce:	d101      	bne.n	80010d4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80010d0:	2301      	movs	r3, #1
 80010d2:	e000      	b.n	80010d6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b089      	sub	sp, #36	@ 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010ec:	2300      	movs	r3, #0
 80010ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e130      	b.n	8001360 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001108:	2b00      	cmp	r3, #0
 800110a:	d109      	bne.n	8001120 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff fbff 	bl	8000910 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff3f 	bl	8000fa8 <LL_ADC_IsDeepPowerDownEnabled>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d004      	beq.n	800113a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff25 	bl	8000f84 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff5a 	bl	8000ff8 <LL_ADC_IsInternalRegulatorEnabled>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d115      	bne.n	8001176 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff3e 	bl	8000fd0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001154:	4b84      	ldr	r3, [pc, #528]	@ (8001368 <HAL_ADC_Init+0x284>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	099b      	lsrs	r3, r3, #6
 800115a:	4a84      	ldr	r2, [pc, #528]	@ (800136c <HAL_ADC_Init+0x288>)
 800115c:	fba2 2303 	umull	r2, r3, r2, r3
 8001160:	099b      	lsrs	r3, r3, #6
 8001162:	3301      	adds	r3, #1
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001168:	e002      	b.n	8001170 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	3b01      	subs	r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f9      	bne.n	800116a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff3c 	bl	8000ff8 <LL_ADC_IsInternalRegulatorEnabled>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10d      	bne.n	80011a2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800118a:	f043 0210 	orr.w	r2, r3, #16
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001196:	f043 0201 	orr.w	r2, r3, #1
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ff75 	bl	8001096 <LL_ADC_REG_IsConversionOngoing>
 80011ac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011b2:	f003 0310 	and.w	r3, r3, #16
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f040 80c9 	bne.w	800134e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f040 80c5 	bne.w	800134e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011c8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80011cc:	f043 0202 	orr.w	r2, r3, #2
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff35 	bl	8001048 <LL_ADC_IsEnabled>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d115      	bne.n	8001210 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011e4:	4862      	ldr	r0, [pc, #392]	@ (8001370 <HAL_ADC_Init+0x28c>)
 80011e6:	f7ff ff2f 	bl	8001048 <LL_ADC_IsEnabled>
 80011ea:	4604      	mov	r4, r0
 80011ec:	4861      	ldr	r0, [pc, #388]	@ (8001374 <HAL_ADC_Init+0x290>)
 80011ee:	f7ff ff2b 	bl	8001048 <LL_ADC_IsEnabled>
 80011f2:	4603      	mov	r3, r0
 80011f4:	431c      	orrs	r4, r3
 80011f6:	4860      	ldr	r0, [pc, #384]	@ (8001378 <HAL_ADC_Init+0x294>)
 80011f8:	f7ff ff26 	bl	8001048 <LL_ADC_IsEnabled>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4323      	orrs	r3, r4
 8001200:	2b00      	cmp	r3, #0
 8001202:	d105      	bne.n	8001210 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	4619      	mov	r1, r3
 800120a:	485c      	ldr	r0, [pc, #368]	@ (800137c <HAL_ADC_Init+0x298>)
 800120c:	f7ff fd86 	bl	8000d1c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	7e5b      	ldrb	r3, [r3, #25]
 8001214:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800121a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001220:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001226:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800122e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 3020 	ldrb.w	r3, [r3, #32]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d106      	bne.n	800124c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001242:	3b01      	subs	r3, #1
 8001244:	045b      	lsls	r3, r3, #17
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001250:	2b00      	cmp	r3, #0
 8001252:	d009      	beq.n	8001268 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001258:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001260:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	4b44      	ldr	r3, [pc, #272]	@ (8001380 <HAL_ADC_Init+0x29c>)
 8001270:	4013      	ands	r3, r2
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	6812      	ldr	r2, [r2, #0]
 8001276:	69b9      	ldr	r1, [r7, #24]
 8001278:	430b      	orrs	r3, r1
 800127a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff1b 	bl	80010bc <LL_ADC_INJ_IsConversionOngoing>
 8001286:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d13d      	bne.n	800130a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d13a      	bne.n	800130a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001298:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80012a0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80012b0:	f023 0302 	bic.w	r3, r3, #2
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	6812      	ldr	r2, [r2, #0]
 80012b8:	69b9      	ldr	r1, [r7, #24]
 80012ba:	430b      	orrs	r3, r1
 80012bc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d118      	bne.n	80012fa <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80012d2:	f023 0304 	bic.w	r3, r3, #4
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80012de:	4311      	orrs	r1, r2
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80012e4:	4311      	orrs	r1, r2
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80012ea:	430a      	orrs	r2, r1
 80012ec:	431a      	orrs	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0201 	orr.w	r2, r2, #1
 80012f6:	611a      	str	r2, [r3, #16]
 80012f8:	e007      	b.n	800130a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	691a      	ldr	r2, [r3, #16]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0201 	bic.w	r2, r2, #1
 8001308:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d10c      	bne.n	800132c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001318:	f023 010f 	bic.w	r1, r3, #15
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	1e5a      	subs	r2, r3, #1
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	430a      	orrs	r2, r1
 8001328:	631a      	str	r2, [r3, #48]	@ 0x30
 800132a:	e007      	b.n	800133c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 020f 	bic.w	r2, r2, #15
 800133a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001340:	f023 0303 	bic.w	r3, r3, #3
 8001344:	f043 0201 	orr.w	r2, r3, #1
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	655a      	str	r2, [r3, #84]	@ 0x54
 800134c:	e007      	b.n	800135e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001352:	f043 0210 	orr.w	r2, r3, #16
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800135e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3724      	adds	r7, #36	@ 0x24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd90      	pop	{r4, r7, pc}
 8001368:	20000000 	.word	0x20000000
 800136c:	053e2d63 	.word	0x053e2d63
 8001370:	50040000 	.word	0x50040000
 8001374:	50040100 	.word	0x50040100
 8001378:	50040200 	.word	0x50040200
 800137c:	50040300 	.word	0x50040300
 8001380:	fff0c007 	.word	0xfff0c007

08001384 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800138c:	4857      	ldr	r0, [pc, #348]	@ (80014ec <HAL_ADC_Start+0x168>)
 800138e:	f7ff fddd 	bl	8000f4c <LL_ADC_GetMultimode>
 8001392:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fe7c 	bl	8001096 <LL_ADC_REG_IsConversionOngoing>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f040 809c 	bne.w	80014de <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <HAL_ADC_Start+0x30>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e097      	b.n	80014e4 <HAL_ADC_Start+0x160>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 fd73 	bl	8001ea8 <ADC_Enable>
 80013c2:	4603      	mov	r3, r0
 80013c4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80013c6:	7dfb      	ldrb	r3, [r7, #23]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f040 8083 	bne.w	80014d4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013d2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80013d6:	f023 0301 	bic.w	r3, r3, #1
 80013da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a42      	ldr	r2, [pc, #264]	@ (80014f0 <HAL_ADC_Start+0x16c>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d002      	beq.n	80013f2 <HAL_ADC_Start+0x6e>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	e000      	b.n	80013f4 <HAL_ADC_Start+0x70>
 80013f2:	4b40      	ldr	r3, [pc, #256]	@ (80014f4 <HAL_ADC_Start+0x170>)
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	6812      	ldr	r2, [r2, #0]
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d002      	beq.n	8001402 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d105      	bne.n	800140e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001406:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001412:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001416:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800141a:	d106      	bne.n	800142a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001420:	f023 0206 	bic.w	r2, r3, #6
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	659a      	str	r2, [r3, #88]	@ 0x58
 8001428:	e002      	b.n	8001430 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	221c      	movs	r2, #28
 8001436:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a2a      	ldr	r2, [pc, #168]	@ (80014f0 <HAL_ADC_Start+0x16c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d002      	beq.n	8001450 <HAL_ADC_Start+0xcc>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	e000      	b.n	8001452 <HAL_ADC_Start+0xce>
 8001450:	4b28      	ldr	r3, [pc, #160]	@ (80014f4 <HAL_ADC_Start+0x170>)
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	6812      	ldr	r2, [r2, #0]
 8001456:	4293      	cmp	r3, r2
 8001458:	d008      	beq.n	800146c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d005      	beq.n	800146c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	2b05      	cmp	r3, #5
 8001464:	d002      	beq.n	800146c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	2b09      	cmp	r3, #9
 800146a:	d114      	bne.n	8001496 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d007      	beq.n	800148a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800147e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001482:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fded 	bl	800106e <LL_ADC_REG_StartConversion>
 8001494:	e025      	b.n	80014e2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800149a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a12      	ldr	r2, [pc, #72]	@ (80014f0 <HAL_ADC_Start+0x16c>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d002      	beq.n	80014b2 <HAL_ADC_Start+0x12e>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	e000      	b.n	80014b4 <HAL_ADC_Start+0x130>
 80014b2:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <HAL_ADC_Start+0x170>)
 80014b4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00f      	beq.n	80014e2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014c6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80014ca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	655a      	str	r2, [r3, #84]	@ 0x54
 80014d2:	e006      	b.n	80014e2 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80014dc:	e001      	b.n	80014e2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014de:	2302      	movs	r3, #2
 80014e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80014e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	50040300 	.word	0x50040300
 80014f0:	50040100 	.word	0x50040100
 80014f4:	50040000 	.word	0x50040000

080014f8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001502:	4866      	ldr	r0, [pc, #408]	@ (800169c <HAL_ADC_PollForConversion+0x1a4>)
 8001504:	f7ff fd22 	bl	8000f4c <LL_ADC_GetMultimode>
 8001508:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	2b08      	cmp	r3, #8
 8001510:	d102      	bne.n	8001518 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001512:	2308      	movs	r3, #8
 8001514:	61fb      	str	r3, [r7, #28]
 8001516:	e02a      	b.n	800156e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d005      	beq.n	800152a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	2b05      	cmp	r3, #5
 8001522:	d002      	beq.n	800152a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	2b09      	cmp	r3, #9
 8001528:	d111      	bne.n	800154e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	2b00      	cmp	r3, #0
 8001536:	d007      	beq.n	8001548 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800153c:	f043 0220 	orr.w	r2, r3, #32
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e0a4      	b.n	8001692 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001548:	2304      	movs	r3, #4
 800154a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800154c:	e00f      	b.n	800156e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800154e:	4853      	ldr	r0, [pc, #332]	@ (800169c <HAL_ADC_PollForConversion+0x1a4>)
 8001550:	f7ff fd0a 	bl	8000f68 <LL_ADC_GetMultiDMATransfer>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d007      	beq.n	800156a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800155e:	f043 0220 	orr.w	r2, r3, #32
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e093      	b.n	8001692 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800156a:	2304      	movs	r3, #4
 800156c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800156e:	f7ff fba5 	bl	8000cbc <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001574:	e021      	b.n	80015ba <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800157c:	d01d      	beq.n	80015ba <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800157e:	f7ff fb9d 	bl	8000cbc <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	d302      	bcc.n	8001594 <HAL_ADC_PollForConversion+0x9c>
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d112      	bne.n	80015ba <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	4013      	ands	r3, r2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10b      	bne.n	80015ba <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015a6:	f043 0204 	orr.w	r2, r3, #4
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e06b      	b.n	8001692 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	4013      	ands	r3, r2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0d6      	beq.n	8001576 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015cc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fc28 	bl	8000e2e <LL_ADC_REG_IsTriggerSourceSWStart>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d01c      	beq.n	800161e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7e5b      	ldrb	r3, [r3, #25]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d118      	bne.n	800161e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d111      	bne.n	800161e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015fe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800160a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d105      	bne.n	800161e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001616:	f043 0201 	orr.w	r2, r3, #1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a1f      	ldr	r2, [pc, #124]	@ (80016a0 <HAL_ADC_PollForConversion+0x1a8>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d002      	beq.n	800162e <HAL_ADC_PollForConversion+0x136>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	e000      	b.n	8001630 <HAL_ADC_PollForConversion+0x138>
 800162e:	4b1d      	ldr	r3, [pc, #116]	@ (80016a4 <HAL_ADC_PollForConversion+0x1ac>)
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	4293      	cmp	r3, r2
 8001636:	d008      	beq.n	800164a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d005      	beq.n	800164a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	2b05      	cmp	r3, #5
 8001642:	d002      	beq.n	800164a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	2b09      	cmp	r3, #9
 8001648:	d104      	bne.n	8001654 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	61bb      	str	r3, [r7, #24]
 8001652:	e00c      	b.n	800166e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a11      	ldr	r2, [pc, #68]	@ (80016a0 <HAL_ADC_PollForConversion+0x1a8>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d002      	beq.n	8001664 <HAL_ADC_PollForConversion+0x16c>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	e000      	b.n	8001666 <HAL_ADC_PollForConversion+0x16e>
 8001664:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <HAL_ADC_PollForConversion+0x1ac>)
 8001666:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	2b08      	cmp	r3, #8
 8001672:	d104      	bne.n	800167e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2208      	movs	r2, #8
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	e008      	b.n	8001690 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d103      	bne.n	8001690 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	220c      	movs	r2, #12
 800168e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3720      	adds	r7, #32
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	50040300 	.word	0x50040300
 80016a0:	50040100 	.word	0x50040100
 80016a4:	50040000 	.word	0x50040000

080016a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b0b6      	sub	sp, #216	@ 0xd8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d101      	bne.n	80016e6 <HAL_ADC_ConfigChannel+0x22>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e3c9      	b.n	8001e7a <HAL_ADC_ConfigChannel+0x7b6>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fccf 	bl	8001096 <LL_ADC_REG_IsConversionOngoing>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f040 83aa 	bne.w	8001e54 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b05      	cmp	r3, #5
 800170e:	d824      	bhi.n	800175a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	3b02      	subs	r3, #2
 8001716:	2b03      	cmp	r3, #3
 8001718:	d81b      	bhi.n	8001752 <HAL_ADC_ConfigChannel+0x8e>
 800171a:	a201      	add	r2, pc, #4	@ (adr r2, 8001720 <HAL_ADC_ConfigChannel+0x5c>)
 800171c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001720:	08001731 	.word	0x08001731
 8001724:	08001739 	.word	0x08001739
 8001728:	08001741 	.word	0x08001741
 800172c:	08001749 	.word	0x08001749
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001730:	230c      	movs	r3, #12
 8001732:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001736:	e010      	b.n	800175a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001738:	2312      	movs	r3, #18
 800173a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800173e:	e00c      	b.n	800175a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001740:	2318      	movs	r3, #24
 8001742:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001746:	e008      	b.n	800175a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001748:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800174c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001750:	e003      	b.n	800175a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001752:	2306      	movs	r3, #6
 8001754:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001758:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6818      	ldr	r0, [r3, #0]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001768:	f7ff fb74 	bl	8000e54 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fc90 	bl	8001096 <LL_ADC_REG_IsConversionOngoing>
 8001776:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fc9c 	bl	80010bc <LL_ADC_INJ_IsConversionOngoing>
 8001784:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001788:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800178c:	2b00      	cmp	r3, #0
 800178e:	f040 81a4 	bne.w	8001ada <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001792:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001796:	2b00      	cmp	r3, #0
 8001798:	f040 819f 	bne.w	8001ada <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	6819      	ldr	r1, [r3, #0]
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	461a      	mov	r2, r3
 80017aa:	f7ff fb7f 	bl	8000eac <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	695a      	ldr	r2, [r3, #20]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	08db      	lsrs	r3, r3, #3
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	691b      	ldr	r3, [r3, #16]
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d00a      	beq.n	80017e6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	6919      	ldr	r1, [r3, #16]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80017e0:	f7ff fad0 	bl	8000d84 <LL_ADC_SetOffset>
 80017e4:	e179      	b.n	8001ada <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff faed 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 80017f2:	4603      	mov	r3, r0
 80017f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d10a      	bne.n	8001812 <HAL_ADC_ConfigChannel+0x14e>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fae2 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 8001808:	4603      	mov	r3, r0
 800180a:	0e9b      	lsrs	r3, r3, #26
 800180c:	f003 021f 	and.w	r2, r3, #31
 8001810:	e01e      	b.n	8001850 <HAL_ADC_ConfigChannel+0x18c>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2100      	movs	r1, #0
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fad7 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 800181e:	4603      	mov	r3, r0
 8001820:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001824:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001828:	fa93 f3a3 	rbit	r3, r3
 800182c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001830:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001834:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001838:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001840:	2320      	movs	r3, #32
 8001842:	e004      	b.n	800184e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001844:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001848:	fab3 f383 	clz	r3, r3
 800184c:	b2db      	uxtb	r3, r3
 800184e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001858:	2b00      	cmp	r3, #0
 800185a:	d105      	bne.n	8001868 <HAL_ADC_ConfigChannel+0x1a4>
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	0e9b      	lsrs	r3, r3, #26
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	e018      	b.n	800189a <HAL_ADC_ConfigChannel+0x1d6>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001870:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001874:	fa93 f3a3 	rbit	r3, r3
 8001878:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800187c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001880:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001884:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800188c:	2320      	movs	r3, #32
 800188e:	e004      	b.n	800189a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001890:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001894:	fab3 f383 	clz	r3, r3
 8001898:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800189a:	429a      	cmp	r2, r3
 800189c:	d106      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff faa6 	bl	8000df8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2101      	movs	r1, #1
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fa8a 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 80018b8:	4603      	mov	r3, r0
 80018ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10a      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x214>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2101      	movs	r1, #1
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fa7f 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 80018ce:	4603      	mov	r3, r0
 80018d0:	0e9b      	lsrs	r3, r3, #26
 80018d2:	f003 021f 	and.w	r2, r3, #31
 80018d6:	e01e      	b.n	8001916 <HAL_ADC_ConfigChannel+0x252>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2101      	movs	r1, #1
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fa74 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80018ee:	fa93 f3a3 	rbit	r3, r3
 80018f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80018f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80018fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80018fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001906:	2320      	movs	r3, #32
 8001908:	e004      	b.n	8001914 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800190a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800190e:	fab3 f383 	clz	r3, r3
 8001912:	b2db      	uxtb	r3, r3
 8001914:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800191e:	2b00      	cmp	r3, #0
 8001920:	d105      	bne.n	800192e <HAL_ADC_ConfigChannel+0x26a>
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	0e9b      	lsrs	r3, r3, #26
 8001928:	f003 031f 	and.w	r3, r3, #31
 800192c:	e018      	b.n	8001960 <HAL_ADC_ConfigChannel+0x29c>
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001936:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800193a:	fa93 f3a3 	rbit	r3, r3
 800193e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001942:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001946:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800194a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001952:	2320      	movs	r3, #32
 8001954:	e004      	b.n	8001960 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001956:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800195a:	fab3 f383 	clz	r3, r3
 800195e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001960:	429a      	cmp	r2, r3
 8001962:	d106      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2200      	movs	r2, #0
 800196a:	2101      	movs	r1, #1
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fa43 	bl	8000df8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2102      	movs	r1, #2
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fa27 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 800197e:	4603      	mov	r3, r0
 8001980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001984:	2b00      	cmp	r3, #0
 8001986:	d10a      	bne.n	800199e <HAL_ADC_ConfigChannel+0x2da>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2102      	movs	r1, #2
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fa1c 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 8001994:	4603      	mov	r3, r0
 8001996:	0e9b      	lsrs	r3, r3, #26
 8001998:	f003 021f 	and.w	r2, r3, #31
 800199c:	e01e      	b.n	80019dc <HAL_ADC_ConfigChannel+0x318>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2102      	movs	r1, #2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fa11 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 80019aa:	4603      	mov	r3, r0
 80019ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80019b4:	fa93 f3a3 	rbit	r3, r3
 80019b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80019bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80019c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80019c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80019cc:	2320      	movs	r3, #32
 80019ce:	e004      	b.n	80019da <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80019d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80019d4:	fab3 f383 	clz	r3, r3
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d105      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x330>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	0e9b      	lsrs	r3, r3, #26
 80019ee:	f003 031f 	and.w	r3, r3, #31
 80019f2:	e014      	b.n	8001a1e <HAL_ADC_ConfigChannel+0x35a>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80019fc:	fa93 f3a3 	rbit	r3, r3
 8001a00:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001a02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001a04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001a08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001a10:	2320      	movs	r3, #32
 8001a12:	e004      	b.n	8001a1e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001a14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a18:	fab3 f383 	clz	r3, r3
 8001a1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d106      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2200      	movs	r2, #0
 8001a28:	2102      	movs	r1, #2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff f9e4 	bl	8000df8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2103      	movs	r1, #3
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff f9c8 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10a      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x398>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2103      	movs	r1, #3
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff f9bd 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 8001a52:	4603      	mov	r3, r0
 8001a54:	0e9b      	lsrs	r3, r3, #26
 8001a56:	f003 021f 	and.w	r2, r3, #31
 8001a5a:	e017      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x3c8>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2103      	movs	r1, #3
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff f9b2 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001a6e:	fa93 f3a3 	rbit	r3, r3
 8001a72:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001a74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a76:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001a78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001a7e:	2320      	movs	r3, #32
 8001a80:	e003      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001a82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a84:	fab3 f383 	clz	r3, r3
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d105      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x3e0>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	0e9b      	lsrs	r3, r3, #26
 8001a9e:	f003 031f 	and.w	r3, r3, #31
 8001aa2:	e011      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x404>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001ab2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ab4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001ab6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001abc:	2320      	movs	r3, #32
 8001abe:	e003      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001ac0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ac2:	fab3 f383 	clz	r3, r3
 8001ac6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d106      	bne.n	8001ada <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2103      	movs	r1, #3
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff f98f 	bl	8000df8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fab2 	bl	8001048 <LL_ADC_IsEnabled>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f040 8140 	bne.w	8001d6c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6818      	ldr	r0, [r3, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	6819      	ldr	r1, [r3, #0]
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	461a      	mov	r2, r3
 8001afa:	f7ff fa03 	bl	8000f04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	4a8f      	ldr	r2, [pc, #572]	@ (8001d40 <HAL_ADC_ConfigChannel+0x67c>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	f040 8131 	bne.w	8001d6c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10b      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x46e>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	0e9b      	lsrs	r3, r3, #26
 8001b20:	3301      	adds	r3, #1
 8001b22:	f003 031f 	and.w	r3, r3, #31
 8001b26:	2b09      	cmp	r3, #9
 8001b28:	bf94      	ite	ls
 8001b2a:	2301      	movls	r3, #1
 8001b2c:	2300      	movhi	r3, #0
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	e019      	b.n	8001b66 <HAL_ADC_ConfigChannel+0x4a2>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b3a:	fa93 f3a3 	rbit	r3, r3
 8001b3e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001b40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b42:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001b44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001b4a:	2320      	movs	r3, #32
 8001b4c:	e003      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001b4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b50:	fab3 f383 	clz	r3, r3
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	3301      	adds	r3, #1
 8001b58:	f003 031f 	and.w	r3, r3, #31
 8001b5c:	2b09      	cmp	r3, #9
 8001b5e:	bf94      	ite	ls
 8001b60:	2301      	movls	r3, #1
 8001b62:	2300      	movhi	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d079      	beq.n	8001c5e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d107      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x4c2>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	0e9b      	lsrs	r3, r3, #26
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	069b      	lsls	r3, r3, #26
 8001b80:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b84:	e015      	b.n	8001bb2 <HAL_ADC_ConfigChannel+0x4ee>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b8e:	fa93 f3a3 	rbit	r3, r3
 8001b92:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001b94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b96:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001b98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001b9e:	2320      	movs	r3, #32
 8001ba0:	e003      	b.n	8001baa <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001ba2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ba4:	fab3 f383 	clz	r3, r3
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	3301      	adds	r3, #1
 8001bac:	069b      	lsls	r3, r3, #26
 8001bae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d109      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x50e>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	0e9b      	lsrs	r3, r3, #26
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	f003 031f 	and.w	r3, r3, #31
 8001bca:	2101      	movs	r1, #1
 8001bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd0:	e017      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x53e>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bda:	fa93 f3a3 	rbit	r3, r3
 8001bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001be0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001be2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001be4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001bea:	2320      	movs	r3, #32
 8001bec:	e003      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001bee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bf0:	fab3 f383 	clz	r3, r3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	f003 031f 	and.w	r3, r3, #31
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001c02:	ea42 0103 	orr.w	r1, r2, r3
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10a      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x564>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	0e9b      	lsrs	r3, r3, #26
 8001c18:	3301      	adds	r3, #1
 8001c1a:	f003 021f 	and.w	r2, r3, #31
 8001c1e:	4613      	mov	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	051b      	lsls	r3, r3, #20
 8001c26:	e018      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x596>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c30:	fa93 f3a3 	rbit	r3, r3
 8001c34:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c38:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001c40:	2320      	movs	r3, #32
 8001c42:	e003      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c46:	fab3 f383 	clz	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	f003 021f 	and.w	r2, r3, #31
 8001c52:	4613      	mov	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c5a:	430b      	orrs	r3, r1
 8001c5c:	e081      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d107      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x5b6>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	0e9b      	lsrs	r3, r3, #26
 8001c70:	3301      	adds	r3, #1
 8001c72:	069b      	lsls	r3, r3, #26
 8001c74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c78:	e015      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x5e2>
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c82:	fa93 f3a3 	rbit	r3, r3
 8001c86:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001c92:	2320      	movs	r3, #32
 8001c94:	e003      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c98:	fab3 f383 	clz	r3, r3
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	069b      	lsls	r3, r3, #26
 8001ca2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d109      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x602>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	0e9b      	lsrs	r3, r3, #26
 8001cb8:	3301      	adds	r3, #1
 8001cba:	f003 031f 	and.w	r3, r3, #31
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc4:	e017      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x632>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	fa93 f3a3 	rbit	r3, r3
 8001cd2:	61bb      	str	r3, [r7, #24]
  return result;
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001cd8:	6a3b      	ldr	r3, [r7, #32]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001cde:	2320      	movs	r3, #32
 8001ce0:	e003      	b.n	8001cea <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	fab3 f383 	clz	r3, r3
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	3301      	adds	r3, #1
 8001cec:	f003 031f 	and.w	r3, r3, #31
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf6:	ea42 0103 	orr.w	r1, r2, r3
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10d      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x65e>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	0e9b      	lsrs	r3, r3, #26
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	f003 021f 	and.w	r2, r3, #31
 8001d12:	4613      	mov	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	4413      	add	r3, r2
 8001d18:	3b1e      	subs	r3, #30
 8001d1a:	051b      	lsls	r3, r3, #20
 8001d1c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d20:	e01e      	b.n	8001d60 <HAL_ADC_ConfigChannel+0x69c>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	fa93 f3a3 	rbit	r3, r3
 8001d2e:	60fb      	str	r3, [r7, #12]
  return result;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d104      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001d3a:	2320      	movs	r3, #32
 8001d3c:	e006      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x688>
 8001d3e:	bf00      	nop
 8001d40:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	fab3 f383 	clz	r3, r3
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	f003 021f 	and.w	r2, r3, #31
 8001d52:	4613      	mov	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4413      	add	r3, r2
 8001d58:	3b1e      	subs	r3, #30
 8001d5a:	051b      	lsls	r3, r3, #20
 8001d5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d60:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d66:	4619      	mov	r1, r3
 8001d68:	f7ff f8a0 	bl	8000eac <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b44      	ldr	r3, [pc, #272]	@ (8001e84 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d07a      	beq.n	8001e6e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d78:	4843      	ldr	r0, [pc, #268]	@ (8001e88 <HAL_ADC_ConfigChannel+0x7c4>)
 8001d7a:	f7fe fff5 	bl	8000d68 <LL_ADC_GetCommonPathInternalCh>
 8001d7e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a41      	ldr	r2, [pc, #260]	@ (8001e8c <HAL_ADC_ConfigChannel+0x7c8>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d12c      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d126      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a3c      	ldr	r2, [pc, #240]	@ (8001e90 <HAL_ADC_ConfigChannel+0x7cc>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d004      	beq.n	8001dac <HAL_ADC_ConfigChannel+0x6e8>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a3b      	ldr	r2, [pc, #236]	@ (8001e94 <HAL_ADC_ConfigChannel+0x7d0>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d15d      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001db0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001db4:	4619      	mov	r1, r3
 8001db6:	4834      	ldr	r0, [pc, #208]	@ (8001e88 <HAL_ADC_ConfigChannel+0x7c4>)
 8001db8:	f7fe ffc3 	bl	8000d42 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dbc:	4b36      	ldr	r3, [pc, #216]	@ (8001e98 <HAL_ADC_ConfigChannel+0x7d4>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	099b      	lsrs	r3, r3, #6
 8001dc2:	4a36      	ldr	r2, [pc, #216]	@ (8001e9c <HAL_ADC_ConfigChannel+0x7d8>)
 8001dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc8:	099b      	lsrs	r3, r3, #6
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	4613      	mov	r3, r2
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	4413      	add	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001dd6:	e002      	b.n	8001dde <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f9      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001de4:	e040      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a2d      	ldr	r2, [pc, #180]	@ (8001ea0 <HAL_ADC_ConfigChannel+0x7dc>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d118      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001df0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001df4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d112      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a23      	ldr	r2, [pc, #140]	@ (8001e90 <HAL_ADC_ConfigChannel+0x7cc>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d004      	beq.n	8001e10 <HAL_ADC_ConfigChannel+0x74c>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a22      	ldr	r2, [pc, #136]	@ (8001e94 <HAL_ADC_ConfigChannel+0x7d0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d12d      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e14:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e18:	4619      	mov	r1, r3
 8001e1a:	481b      	ldr	r0, [pc, #108]	@ (8001e88 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e1c:	f7fe ff91 	bl	8000d42 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e20:	e024      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a1f      	ldr	r2, [pc, #124]	@ (8001ea4 <HAL_ADC_ConfigChannel+0x7e0>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d120      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d11a      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a14      	ldr	r2, [pc, #80]	@ (8001e90 <HAL_ADC_ConfigChannel+0x7cc>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d115      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e46:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	480e      	ldr	r0, [pc, #56]	@ (8001e88 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e4e:	f7fe ff78 	bl	8000d42 <LL_ADC_SetCommonPathInternalCh>
 8001e52:	e00c      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e58:	f043 0220 	orr.w	r2, r3, #32
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001e66:	e002      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e68:	bf00      	nop
 8001e6a:	e000      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e6c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e76:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	37d8      	adds	r7, #216	@ 0xd8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	80080000 	.word	0x80080000
 8001e88:	50040300 	.word	0x50040300
 8001e8c:	c7520000 	.word	0xc7520000
 8001e90:	50040000 	.word	0x50040000
 8001e94:	50040200 	.word	0x50040200
 8001e98:	20000000 	.word	0x20000000
 8001e9c:	053e2d63 	.word	0x053e2d63
 8001ea0:	cb840000 	.word	0xcb840000
 8001ea4:	80000001 	.word	0x80000001

08001ea8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff f8c5 	bl	8001048 <LL_ADC_IsEnabled>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d169      	bne.n	8001f98 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	4b36      	ldr	r3, [pc, #216]	@ (8001fa4 <ADC_Enable+0xfc>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00d      	beq.n	8001eee <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed6:	f043 0210 	orr.w	r2, r3, #16
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee2:	f043 0201 	orr.w	r2, r3, #1
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e055      	b.n	8001f9a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff f894 	bl	8001020 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001ef8:	482b      	ldr	r0, [pc, #172]	@ (8001fa8 <ADC_Enable+0x100>)
 8001efa:	f7fe ff35 	bl	8000d68 <LL_ADC_GetCommonPathInternalCh>
 8001efe:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001f00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d013      	beq.n	8001f30 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f08:	4b28      	ldr	r3, [pc, #160]	@ (8001fac <ADC_Enable+0x104>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	099b      	lsrs	r3, r3, #6
 8001f0e:	4a28      	ldr	r2, [pc, #160]	@ (8001fb0 <ADC_Enable+0x108>)
 8001f10:	fba2 2303 	umull	r2, r3, r2, r3
 8001f14:	099b      	lsrs	r3, r3, #6
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	4613      	mov	r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4413      	add	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f22:	e002      	b.n	8001f2a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f9      	bne.n	8001f24 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f30:	f7fe fec4 	bl	8000cbc <HAL_GetTick>
 8001f34:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f36:	e028      	b.n	8001f8a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff f883 	bl	8001048 <LL_ADC_IsEnabled>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d104      	bne.n	8001f52 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff f867 	bl	8001020 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f52:	f7fe feb3 	bl	8000cbc <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d914      	bls.n	8001f8a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d00d      	beq.n	8001f8a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f72:	f043 0210 	orr.w	r2, r3, #16
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7e:	f043 0201 	orr.w	r2, r3, #1
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e007      	b.n	8001f9a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d1cf      	bne.n	8001f38 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	8000003f 	.word	0x8000003f
 8001fa8:	50040300 	.word	0x50040300
 8001fac:	20000000 	.word	0x20000000
 8001fb0:	053e2d63 	.word	0x053e2d63

08001fb4 <LL_ADC_IsEnabled>:
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <LL_ADC_IsEnabled+0x18>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <LL_ADC_IsEnabled+0x1a>
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <LL_ADC_REG_IsConversionOngoing>:
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d101      	bne.n	8001ff2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	b09f      	sub	sp, #124	@ 0x7c
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800201a:	2302      	movs	r3, #2
 800201c:	e093      	b.n	8002146 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002026:	2300      	movs	r3, #0
 8002028:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800202a:	2300      	movs	r3, #0
 800202c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a47      	ldr	r2, [pc, #284]	@ (8002150 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d102      	bne.n	800203e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002038:	4b46      	ldr	r3, [pc, #280]	@ (8002154 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	e001      	b.n	8002042 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800203e:	2300      	movs	r3, #0
 8002040:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10b      	bne.n	8002060 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800204c:	f043 0220 	orr.w	r2, r3, #32
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e072      	b.n	8002146 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff ffb9 	bl	8001fda <LL_ADC_REG_IsConversionOngoing>
 8002068:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff ffb3 	bl	8001fda <LL_ADC_REG_IsConversionOngoing>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d154      	bne.n	8002124 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800207a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800207c:	2b00      	cmp	r3, #0
 800207e:	d151      	bne.n	8002124 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002080:	4b35      	ldr	r3, [pc, #212]	@ (8002158 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002082:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d02c      	beq.n	80020e6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800208c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	6859      	ldr	r1, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800209e:	035b      	lsls	r3, r3, #13
 80020a0:	430b      	orrs	r3, r1
 80020a2:	431a      	orrs	r2, r3
 80020a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020a6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020a8:	4829      	ldr	r0, [pc, #164]	@ (8002150 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80020aa:	f7ff ff83 	bl	8001fb4 <LL_ADC_IsEnabled>
 80020ae:	4604      	mov	r4, r0
 80020b0:	4828      	ldr	r0, [pc, #160]	@ (8002154 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80020b2:	f7ff ff7f 	bl	8001fb4 <LL_ADC_IsEnabled>
 80020b6:	4603      	mov	r3, r0
 80020b8:	431c      	orrs	r4, r3
 80020ba:	4828      	ldr	r0, [pc, #160]	@ (800215c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80020bc:	f7ff ff7a 	bl	8001fb4 <LL_ADC_IsEnabled>
 80020c0:	4603      	mov	r3, r0
 80020c2:	4323      	orrs	r3, r4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d137      	bne.n	8002138 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80020c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80020d0:	f023 030f 	bic.w	r3, r3, #15
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	6811      	ldr	r1, [r2, #0]
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	6892      	ldr	r2, [r2, #8]
 80020dc:	430a      	orrs	r2, r1
 80020de:	431a      	orrs	r2, r3
 80020e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020e2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80020e4:	e028      	b.n	8002138 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80020e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020f0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020f2:	4817      	ldr	r0, [pc, #92]	@ (8002150 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80020f4:	f7ff ff5e 	bl	8001fb4 <LL_ADC_IsEnabled>
 80020f8:	4604      	mov	r4, r0
 80020fa:	4816      	ldr	r0, [pc, #88]	@ (8002154 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80020fc:	f7ff ff5a 	bl	8001fb4 <LL_ADC_IsEnabled>
 8002100:	4603      	mov	r3, r0
 8002102:	431c      	orrs	r4, r3
 8002104:	4815      	ldr	r0, [pc, #84]	@ (800215c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002106:	f7ff ff55 	bl	8001fb4 <LL_ADC_IsEnabled>
 800210a:	4603      	mov	r3, r0
 800210c:	4323      	orrs	r3, r4
 800210e:	2b00      	cmp	r3, #0
 8002110:	d112      	bne.n	8002138 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002112:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800211a:	f023 030f 	bic.w	r3, r3, #15
 800211e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002120:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002122:	e009      	b.n	8002138 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002128:	f043 0220 	orr.w	r2, r3, #32
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002136:	e000      	b.n	800213a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002138:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002142:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002146:	4618      	mov	r0, r3
 8002148:	377c      	adds	r7, #124	@ 0x7c
 800214a:	46bd      	mov	sp, r7
 800214c:	bd90      	pop	{r4, r7, pc}
 800214e:	bf00      	nop
 8002150:	50040000 	.word	0x50040000
 8002154:	50040100 	.word	0x50040100
 8002158:	50040300 	.word	0x50040300
 800215c:	50040200 	.word	0x50040200

08002160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002170:	4b0c      	ldr	r3, [pc, #48]	@ (80021a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800217c:	4013      	ands	r3, r2
 800217e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002188:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800218c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002192:	4a04      	ldr	r2, [pc, #16]	@ (80021a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	60d3      	str	r3, [r2, #12]
}
 8002198:	bf00      	nop
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ac:	4b04      	ldr	r3, [pc, #16]	@ (80021c0 <__NVIC_GetPriorityGrouping+0x18>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	0a1b      	lsrs	r3, r3, #8
 80021b2:	f003 0307 	and.w	r3, r3, #7
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	6039      	str	r1, [r7, #0]
 80021ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	db0a      	blt.n	80021ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	490c      	ldr	r1, [pc, #48]	@ (8002210 <__NVIC_SetPriority+0x4c>)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	0112      	lsls	r2, r2, #4
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	440b      	add	r3, r1
 80021e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021ec:	e00a      	b.n	8002204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4908      	ldr	r1, [pc, #32]	@ (8002214 <__NVIC_SetPriority+0x50>)
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	3b04      	subs	r3, #4
 80021fc:	0112      	lsls	r2, r2, #4
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	440b      	add	r3, r1
 8002202:	761a      	strb	r2, [r3, #24]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000e100 	.word	0xe000e100
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002218:	b480      	push	{r7}
 800221a:	b089      	sub	sp, #36	@ 0x24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f1c3 0307 	rsb	r3, r3, #7
 8002232:	2b04      	cmp	r3, #4
 8002234:	bf28      	it	cs
 8002236:	2304      	movcs	r3, #4
 8002238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3304      	adds	r3, #4
 800223e:	2b06      	cmp	r3, #6
 8002240:	d902      	bls.n	8002248 <NVIC_EncodePriority+0x30>
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3b03      	subs	r3, #3
 8002246:	e000      	b.n	800224a <NVIC_EncodePriority+0x32>
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	f04f 32ff 	mov.w	r2, #4294967295
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43da      	mvns	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	401a      	ands	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002260:	f04f 31ff 	mov.w	r1, #4294967295
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	fa01 f303 	lsl.w	r3, r1, r3
 800226a:	43d9      	mvns	r1, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002270:	4313      	orrs	r3, r2
         );
}
 8002272:	4618      	mov	r0, r3
 8002274:	3724      	adds	r7, #36	@ 0x24
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002290:	d301      	bcc.n	8002296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002292:	2301      	movs	r3, #1
 8002294:	e00f      	b.n	80022b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002296:	4a0a      	ldr	r2, [pc, #40]	@ (80022c0 <SysTick_Config+0x40>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800229e:	210f      	movs	r1, #15
 80022a0:	f04f 30ff 	mov.w	r0, #4294967295
 80022a4:	f7ff ff8e 	bl	80021c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a8:	4b05      	ldr	r3, [pc, #20]	@ (80022c0 <SysTick_Config+0x40>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ae:	4b04      	ldr	r3, [pc, #16]	@ (80022c0 <SysTick_Config+0x40>)
 80022b0:	2207      	movs	r2, #7
 80022b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	e000e010 	.word	0xe000e010

080022c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ff47 	bl	8002160 <__NVIC_SetPriorityGrouping>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022ec:	f7ff ff5c 	bl	80021a8 <__NVIC_GetPriorityGrouping>
 80022f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	6978      	ldr	r0, [r7, #20]
 80022f8:	f7ff ff8e 	bl	8002218 <NVIC_EncodePriority>
 80022fc:	4602      	mov	r2, r0
 80022fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff5d 	bl	80021c4 <__NVIC_SetPriority>
}
 800230a:	bf00      	nop
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff ffb0 	bl	8002280 <SysTick_Config>
 8002320:	4603      	mov	r3, r0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800232c:	b480      	push	{r7}
 800232e:	b087      	sub	sp, #28
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800233a:	e17f      	b.n	800263c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	2101      	movs	r1, #1
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	fa01 f303 	lsl.w	r3, r1, r3
 8002348:	4013      	ands	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 8171 	beq.w	8002636 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	2b01      	cmp	r3, #1
 800235e:	d005      	beq.n	800236c <HAL_GPIO_Init+0x40>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d130      	bne.n	80023ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	2203      	movs	r2, #3
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4013      	ands	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	68da      	ldr	r2, [r3, #12]
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4313      	orrs	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023a2:	2201      	movs	r2, #1
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4013      	ands	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	091b      	lsrs	r3, r3, #4
 80023b8:	f003 0201 	and.w	r2, r3, #1
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	d118      	bne.n	800240c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80023e0:	2201      	movs	r2, #1
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	08db      	lsrs	r3, r3, #3
 80023f6:	f003 0201 	and.w	r2, r3, #1
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	2b03      	cmp	r3, #3
 8002416:	d017      	beq.n	8002448 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	2203      	movs	r2, #3
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	4013      	ands	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4313      	orrs	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 0303 	and.w	r3, r3, #3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d123      	bne.n	800249c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	08da      	lsrs	r2, r3, #3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3208      	adds	r2, #8
 800245c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002460:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	220f      	movs	r2, #15
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4013      	ands	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	691a      	ldr	r2, [r3, #16]
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	08da      	lsrs	r2, r3, #3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3208      	adds	r2, #8
 8002496:	6939      	ldr	r1, [r7, #16]
 8002498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	2203      	movs	r2, #3
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4013      	ands	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 0203 	and.w	r2, r3, #3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 80ac 	beq.w	8002636 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024de:	4b5f      	ldr	r3, [pc, #380]	@ (800265c <HAL_GPIO_Init+0x330>)
 80024e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024e2:	4a5e      	ldr	r2, [pc, #376]	@ (800265c <HAL_GPIO_Init+0x330>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80024ea:	4b5c      	ldr	r3, [pc, #368]	@ (800265c <HAL_GPIO_Init+0x330>)
 80024ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024f6:	4a5a      	ldr	r2, [pc, #360]	@ (8002660 <HAL_GPIO_Init+0x334>)
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	089b      	lsrs	r3, r3, #2
 80024fc:	3302      	adds	r3, #2
 80024fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002502:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	220f      	movs	r2, #15
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	4013      	ands	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002520:	d025      	beq.n	800256e <HAL_GPIO_Init+0x242>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a4f      	ldr	r2, [pc, #316]	@ (8002664 <HAL_GPIO_Init+0x338>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d01f      	beq.n	800256a <HAL_GPIO_Init+0x23e>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a4e      	ldr	r2, [pc, #312]	@ (8002668 <HAL_GPIO_Init+0x33c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d019      	beq.n	8002566 <HAL_GPIO_Init+0x23a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a4d      	ldr	r2, [pc, #308]	@ (800266c <HAL_GPIO_Init+0x340>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d013      	beq.n	8002562 <HAL_GPIO_Init+0x236>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a4c      	ldr	r2, [pc, #304]	@ (8002670 <HAL_GPIO_Init+0x344>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00d      	beq.n	800255e <HAL_GPIO_Init+0x232>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a4b      	ldr	r2, [pc, #300]	@ (8002674 <HAL_GPIO_Init+0x348>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d007      	beq.n	800255a <HAL_GPIO_Init+0x22e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a4a      	ldr	r2, [pc, #296]	@ (8002678 <HAL_GPIO_Init+0x34c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d101      	bne.n	8002556 <HAL_GPIO_Init+0x22a>
 8002552:	2306      	movs	r3, #6
 8002554:	e00c      	b.n	8002570 <HAL_GPIO_Init+0x244>
 8002556:	2307      	movs	r3, #7
 8002558:	e00a      	b.n	8002570 <HAL_GPIO_Init+0x244>
 800255a:	2305      	movs	r3, #5
 800255c:	e008      	b.n	8002570 <HAL_GPIO_Init+0x244>
 800255e:	2304      	movs	r3, #4
 8002560:	e006      	b.n	8002570 <HAL_GPIO_Init+0x244>
 8002562:	2303      	movs	r3, #3
 8002564:	e004      	b.n	8002570 <HAL_GPIO_Init+0x244>
 8002566:	2302      	movs	r3, #2
 8002568:	e002      	b.n	8002570 <HAL_GPIO_Init+0x244>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <HAL_GPIO_Init+0x244>
 800256e:	2300      	movs	r3, #0
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	f002 0203 	and.w	r2, r2, #3
 8002576:	0092      	lsls	r2, r2, #2
 8002578:	4093      	lsls	r3, r2
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002580:	4937      	ldr	r1, [pc, #220]	@ (8002660 <HAL_GPIO_Init+0x334>)
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	089b      	lsrs	r3, r3, #2
 8002586:	3302      	adds	r3, #2
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800258e:	4b3b      	ldr	r3, [pc, #236]	@ (800267c <HAL_GPIO_Init+0x350>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	43db      	mvns	r3, r3
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4013      	ands	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025b2:	4a32      	ldr	r2, [pc, #200]	@ (800267c <HAL_GPIO_Init+0x350>)
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025b8:	4b30      	ldr	r3, [pc, #192]	@ (800267c <HAL_GPIO_Init+0x350>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	43db      	mvns	r3, r3
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	4013      	ands	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4313      	orrs	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025dc:	4a27      	ldr	r2, [pc, #156]	@ (800267c <HAL_GPIO_Init+0x350>)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025e2:	4b26      	ldr	r3, [pc, #152]	@ (800267c <HAL_GPIO_Init+0x350>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	43db      	mvns	r3, r3
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	4013      	ands	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4313      	orrs	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002606:	4a1d      	ldr	r2, [pc, #116]	@ (800267c <HAL_GPIO_Init+0x350>)
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800260c:	4b1b      	ldr	r3, [pc, #108]	@ (800267c <HAL_GPIO_Init+0x350>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	43db      	mvns	r3, r3
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4013      	ands	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	4313      	orrs	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002630:	4a12      	ldr	r2, [pc, #72]	@ (800267c <HAL_GPIO_Init+0x350>)
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	3301      	adds	r3, #1
 800263a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	fa22 f303 	lsr.w	r3, r2, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	f47f ae78 	bne.w	800233c <HAL_GPIO_Init+0x10>
  }
}
 800264c:	bf00      	nop
 800264e:	bf00      	nop
 8002650:	371c      	adds	r7, #28
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40021000 	.word	0x40021000
 8002660:	40010000 	.word	0x40010000
 8002664:	48000400 	.word	0x48000400
 8002668:	48000800 	.word	0x48000800
 800266c:	48000c00 	.word	0x48000c00
 8002670:	48001000 	.word	0x48001000
 8002674:	48001400 	.word	0x48001400
 8002678:	48001800 	.word	0x48001800
 800267c:	40010400 	.word	0x40010400

08002680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	807b      	strh	r3, [r7, #2]
 800268c:	4613      	mov	r3, r2
 800268e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002690:	787b      	ldrb	r3, [r7, #1]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002696:	887a      	ldrh	r2, [r7, #2]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800269c:	e002      	b.n	80026a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800269e:	887a      	ldrh	r2, [r7, #2]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026b4:	4b04      	ldr	r3, [pc, #16]	@ (80026c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80026bc:	4618      	mov	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	40007000 	.word	0x40007000

080026cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026da:	d130      	bne.n	800273e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026dc:	4b23      	ldr	r3, [pc, #140]	@ (800276c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026e8:	d038      	beq.n	800275c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026ea:	4b20      	ldr	r3, [pc, #128]	@ (800276c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026f2:	4a1e      	ldr	r2, [pc, #120]	@ (800276c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002770 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2232      	movs	r2, #50	@ 0x32
 8002700:	fb02 f303 	mul.w	r3, r2, r3
 8002704:	4a1b      	ldr	r2, [pc, #108]	@ (8002774 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	0c9b      	lsrs	r3, r3, #18
 800270c:	3301      	adds	r3, #1
 800270e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002710:	e002      	b.n	8002718 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	3b01      	subs	r3, #1
 8002716:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002718:	4b14      	ldr	r3, [pc, #80]	@ (800276c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002720:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002724:	d102      	bne.n	800272c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1f2      	bne.n	8002712 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800272c:	4b0f      	ldr	r3, [pc, #60]	@ (800276c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002734:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002738:	d110      	bne.n	800275c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e00f      	b.n	800275e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800273e:	4b0b      	ldr	r3, [pc, #44]	@ (800276c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800274a:	d007      	beq.n	800275c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800274c:	4b07      	ldr	r3, [pc, #28]	@ (800276c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002754:	4a05      	ldr	r2, [pc, #20]	@ (800276c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002756:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800275a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40007000 	.word	0x40007000
 8002770:	20000000 	.word	0x20000000
 8002774:	431bde83 	.word	0x431bde83

08002778 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e3ca      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800278a:	4b97      	ldr	r3, [pc, #604]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002794:	4b94      	ldr	r3, [pc, #592]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f003 0303 	and.w	r3, r3, #3
 800279c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0310 	and.w	r3, r3, #16
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 80e4 	beq.w	8002974 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d007      	beq.n	80027c2 <HAL_RCC_OscConfig+0x4a>
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	2b0c      	cmp	r3, #12
 80027b6:	f040 808b 	bne.w	80028d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	f040 8087 	bne.w	80028d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027c2:	4b89      	ldr	r3, [pc, #548]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d005      	beq.n	80027da <HAL_RCC_OscConfig+0x62>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e3a2      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1a      	ldr	r2, [r3, #32]
 80027de:	4b82      	ldr	r3, [pc, #520]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d004      	beq.n	80027f4 <HAL_RCC_OscConfig+0x7c>
 80027ea:	4b7f      	ldr	r3, [pc, #508]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027f2:	e005      	b.n	8002800 <HAL_RCC_OscConfig+0x88>
 80027f4:	4b7c      	ldr	r3, [pc, #496]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 80027f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027fa:	091b      	lsrs	r3, r3, #4
 80027fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002800:	4293      	cmp	r3, r2
 8002802:	d223      	bcs.n	800284c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	4618      	mov	r0, r3
 800280a:	f000 fd55 	bl	80032b8 <RCC_SetFlashLatencyFromMSIRange>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e383      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002818:	4b73      	ldr	r3, [pc, #460]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a72      	ldr	r2, [pc, #456]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 800281e:	f043 0308 	orr.w	r3, r3, #8
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	4b70      	ldr	r3, [pc, #448]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	496d      	ldr	r1, [pc, #436]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002832:	4313      	orrs	r3, r2
 8002834:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002836:	4b6c      	ldr	r3, [pc, #432]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	021b      	lsls	r3, r3, #8
 8002844:	4968      	ldr	r1, [pc, #416]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002846:	4313      	orrs	r3, r2
 8002848:	604b      	str	r3, [r1, #4]
 800284a:	e025      	b.n	8002898 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800284c:	4b66      	ldr	r3, [pc, #408]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a65      	ldr	r2, [pc, #404]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002852:	f043 0308 	orr.w	r3, r3, #8
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	4b63      	ldr	r3, [pc, #396]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	4960      	ldr	r1, [pc, #384]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800286a:	4b5f      	ldr	r3, [pc, #380]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	021b      	lsls	r3, r3, #8
 8002878:	495b      	ldr	r1, [pc, #364]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 800287a:	4313      	orrs	r3, r2
 800287c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d109      	bne.n	8002898 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	4618      	mov	r0, r3
 800288a:	f000 fd15 	bl	80032b8 <RCC_SetFlashLatencyFromMSIRange>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e343      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002898:	f000 fc4a 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 800289c:	4602      	mov	r2, r0
 800289e:	4b52      	ldr	r3, [pc, #328]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	091b      	lsrs	r3, r3, #4
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	4950      	ldr	r1, [pc, #320]	@ (80029ec <HAL_RCC_OscConfig+0x274>)
 80028aa:	5ccb      	ldrb	r3, [r1, r3]
 80028ac:	f003 031f 	and.w	r3, r3, #31
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
 80028b4:	4a4e      	ldr	r2, [pc, #312]	@ (80029f0 <HAL_RCC_OscConfig+0x278>)
 80028b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028b8:	4b4e      	ldr	r3, [pc, #312]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fe f9ad 	bl	8000c1c <HAL_InitTick>
 80028c2:	4603      	mov	r3, r0
 80028c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d052      	beq.n	8002972 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
 80028ce:	e327      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d032      	beq.n	800293e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028d8:	4b43      	ldr	r3, [pc, #268]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a42      	ldr	r2, [pc, #264]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028e4:	f7fe f9ea 	bl	8000cbc <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028ec:	f7fe f9e6 	bl	8000cbc <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e310      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028fe:	4b3a      	ldr	r3, [pc, #232]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f0      	beq.n	80028ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800290a:	4b37      	ldr	r3, [pc, #220]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a36      	ldr	r2, [pc, #216]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002910:	f043 0308 	orr.w	r3, r3, #8
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	4b34      	ldr	r3, [pc, #208]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	4931      	ldr	r1, [pc, #196]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002924:	4313      	orrs	r3, r2
 8002926:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002928:	4b2f      	ldr	r3, [pc, #188]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	021b      	lsls	r3, r3, #8
 8002936:	492c      	ldr	r1, [pc, #176]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002938:	4313      	orrs	r3, r2
 800293a:	604b      	str	r3, [r1, #4]
 800293c:	e01a      	b.n	8002974 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800293e:	4b2a      	ldr	r3, [pc, #168]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a29      	ldr	r2, [pc, #164]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002944:	f023 0301 	bic.w	r3, r3, #1
 8002948:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800294a:	f7fe f9b7 	bl	8000cbc <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002952:	f7fe f9b3 	bl	8000cbc <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e2dd      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002964:	4b20      	ldr	r3, [pc, #128]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1f0      	bne.n	8002952 <HAL_RCC_OscConfig+0x1da>
 8002970:	e000      	b.n	8002974 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002972:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	d074      	beq.n	8002a6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	2b08      	cmp	r3, #8
 8002984:	d005      	beq.n	8002992 <HAL_RCC_OscConfig+0x21a>
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	2b0c      	cmp	r3, #12
 800298a:	d10e      	bne.n	80029aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	2b03      	cmp	r3, #3
 8002990:	d10b      	bne.n	80029aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002992:	4b15      	ldr	r3, [pc, #84]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d064      	beq.n	8002a68 <HAL_RCC_OscConfig+0x2f0>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d160      	bne.n	8002a68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e2ba      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029b2:	d106      	bne.n	80029c2 <HAL_RCC_OscConfig+0x24a>
 80029b4:	4b0c      	ldr	r3, [pc, #48]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a0b      	ldr	r2, [pc, #44]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 80029ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029be:	6013      	str	r3, [r2, #0]
 80029c0:	e026      	b.n	8002a10 <HAL_RCC_OscConfig+0x298>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029ca:	d115      	bne.n	80029f8 <HAL_RCC_OscConfig+0x280>
 80029cc:	4b06      	ldr	r3, [pc, #24]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a05      	ldr	r2, [pc, #20]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 80029d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	4b03      	ldr	r3, [pc, #12]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a02      	ldr	r2, [pc, #8]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 80029de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	e014      	b.n	8002a10 <HAL_RCC_OscConfig+0x298>
 80029e6:	bf00      	nop
 80029e8:	40021000 	.word	0x40021000
 80029ec:	080051a8 	.word	0x080051a8
 80029f0:	20000000 	.word	0x20000000
 80029f4:	20000004 	.word	0x20000004
 80029f8:	4ba0      	ldr	r3, [pc, #640]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a9f      	ldr	r2, [pc, #636]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 80029fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a02:	6013      	str	r3, [r2, #0]
 8002a04:	4b9d      	ldr	r3, [pc, #628]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a9c      	ldr	r2, [pc, #624]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002a0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d013      	beq.n	8002a40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a18:	f7fe f950 	bl	8000cbc <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a20:	f7fe f94c 	bl	8000cbc <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b64      	cmp	r3, #100	@ 0x64
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e276      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a32:	4b92      	ldr	r3, [pc, #584]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0x2a8>
 8002a3e:	e014      	b.n	8002a6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a40:	f7fe f93c 	bl	8000cbc <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a48:	f7fe f938 	bl	8000cbc <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b64      	cmp	r3, #100	@ 0x64
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e262      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a5a:	4b88      	ldr	r3, [pc, #544]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x2d0>
 8002a66:	e000      	b.n	8002a6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d060      	beq.n	8002b38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_OscConfig+0x310>
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	2b0c      	cmp	r3, #12
 8002a80:	d119      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d116      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a88:	4b7c      	ldr	r3, [pc, #496]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x328>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e23f      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa0:	4b76      	ldr	r3, [pc, #472]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	061b      	lsls	r3, r3, #24
 8002aae:	4973      	ldr	r1, [pc, #460]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ab4:	e040      	b.n	8002b38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d023      	beq.n	8002b06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002abe:	4b6f      	ldr	r3, [pc, #444]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a6e      	ldr	r2, [pc, #440]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aca:	f7fe f8f7 	bl	8000cbc <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ad2:	f7fe f8f3 	bl	8000cbc <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e21d      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ae4:	4b65      	ldr	r3, [pc, #404]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0f0      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af0:	4b62      	ldr	r3, [pc, #392]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	061b      	lsls	r3, r3, #24
 8002afe:	495f      	ldr	r1, [pc, #380]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]
 8002b04:	e018      	b.n	8002b38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b06:	4b5d      	ldr	r3, [pc, #372]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a5c      	ldr	r2, [pc, #368]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002b0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b12:	f7fe f8d3 	bl	8000cbc <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b1a:	f7fe f8cf 	bl	8000cbc <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e1f9      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b2c:	4b53      	ldr	r3, [pc, #332]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f0      	bne.n	8002b1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d03c      	beq.n	8002bbe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d01c      	beq.n	8002b86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b4c:	4b4b      	ldr	r3, [pc, #300]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b52:	4a4a      	ldr	r2, [pc, #296]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5c:	f7fe f8ae 	bl	8000cbc <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b64:	f7fe f8aa 	bl	8000cbc <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e1d4      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b76:	4b41      	ldr	r3, [pc, #260]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0ef      	beq.n	8002b64 <HAL_RCC_OscConfig+0x3ec>
 8002b84:	e01b      	b.n	8002bbe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b86:	4b3d      	ldr	r3, [pc, #244]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b8c:	4a3b      	ldr	r2, [pc, #236]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002b8e:	f023 0301 	bic.w	r3, r3, #1
 8002b92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b96:	f7fe f891 	bl	8000cbc <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b9e:	f7fe f88d 	bl	8000cbc <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e1b7      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bb0:	4b32      	ldr	r3, [pc, #200]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1ef      	bne.n	8002b9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 80a6 	beq.w	8002d18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bd0:	4b2a      	ldr	r3, [pc, #168]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10d      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bdc:	4b27      	ldr	r3, [pc, #156]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be0:	4a26      	ldr	r2, [pc, #152]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002be2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002be8:	4b24      	ldr	r3, [pc, #144]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bf8:	4b21      	ldr	r3, [pc, #132]	@ (8002c80 <HAL_RCC_OscConfig+0x508>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d118      	bne.n	8002c36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c04:	4b1e      	ldr	r3, [pc, #120]	@ (8002c80 <HAL_RCC_OscConfig+0x508>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a1d      	ldr	r2, [pc, #116]	@ (8002c80 <HAL_RCC_OscConfig+0x508>)
 8002c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c10:	f7fe f854 	bl	8000cbc <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c18:	f7fe f850 	bl	8000cbc <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e17a      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c2a:	4b15      	ldr	r3, [pc, #84]	@ (8002c80 <HAL_RCC_OscConfig+0x508>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f0      	beq.n	8002c18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d108      	bne.n	8002c50 <HAL_RCC_OscConfig+0x4d8>
 8002c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c44:	4a0d      	ldr	r2, [pc, #52]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002c46:	f043 0301 	orr.w	r3, r3, #1
 8002c4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c4e:	e029      	b.n	8002ca4 <HAL_RCC_OscConfig+0x52c>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2b05      	cmp	r3, #5
 8002c56:	d115      	bne.n	8002c84 <HAL_RCC_OscConfig+0x50c>
 8002c58:	4b08      	ldr	r3, [pc, #32]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c5e:	4a07      	ldr	r2, [pc, #28]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002c60:	f043 0304 	orr.w	r3, r3, #4
 8002c64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c68:	4b04      	ldr	r3, [pc, #16]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c6e:	4a03      	ldr	r2, [pc, #12]	@ (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c78:	e014      	b.n	8002ca4 <HAL_RCC_OscConfig+0x52c>
 8002c7a:	bf00      	nop
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	40007000 	.word	0x40007000
 8002c84:	4b9c      	ldr	r3, [pc, #624]	@ (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c8a:	4a9b      	ldr	r2, [pc, #620]	@ (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002c8c:	f023 0301 	bic.w	r3, r3, #1
 8002c90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c94:	4b98      	ldr	r3, [pc, #608]	@ (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c9a:	4a97      	ldr	r2, [pc, #604]	@ (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002c9c:	f023 0304 	bic.w	r3, r3, #4
 8002ca0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d016      	beq.n	8002cda <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cac:	f7fe f806 	bl	8000cbc <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb2:	e00a      	b.n	8002cca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb4:	f7fe f802 	bl	8000cbc <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e12a      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cca:	4b8b      	ldr	r3, [pc, #556]	@ (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0ed      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x53c>
 8002cd8:	e015      	b.n	8002d06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cda:	f7fd ffef 	bl	8000cbc <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ce0:	e00a      	b.n	8002cf8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce2:	f7fd ffeb 	bl	8000cbc <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e113      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cf8:	4b7f      	ldr	r3, [pc, #508]	@ (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1ed      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d06:	7ffb      	ldrb	r3, [r7, #31]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d105      	bne.n	8002d18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d0c:	4b7a      	ldr	r3, [pc, #488]	@ (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d10:	4a79      	ldr	r2, [pc, #484]	@ (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002d12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d16:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 80fe 	beq.w	8002f1e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	f040 80d0 	bne.w	8002ecc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d2c:	4b72      	ldr	r3, [pc, #456]	@ (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f003 0203 	and.w	r2, r3, #3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d130      	bne.n	8002da2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d127      	bne.n	8002da2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d11f      	bne.n	8002da2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d6c:	2a07      	cmp	r2, #7
 8002d6e:	bf14      	ite	ne
 8002d70:	2201      	movne	r2, #1
 8002d72:	2200      	moveq	r2, #0
 8002d74:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d113      	bne.n	8002da2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d84:	085b      	lsrs	r3, r3, #1
 8002d86:	3b01      	subs	r3, #1
 8002d88:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d109      	bne.n	8002da2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d98:	085b      	lsrs	r3, r3, #1
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d06e      	beq.n	8002e80 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	2b0c      	cmp	r3, #12
 8002da6:	d069      	beq.n	8002e7c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002da8:	4b53      	ldr	r3, [pc, #332]	@ (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d105      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002db4:	4b50      	ldr	r3, [pc, #320]	@ (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0ad      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002dc4:	4b4c      	ldr	r3, [pc, #304]	@ (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a4b      	ldr	r2, [pc, #300]	@ (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002dca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dd0:	f7fd ff74 	bl	8000cbc <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd8:	f7fd ff70 	bl	8000cbc <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e09a      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dea:	4b43      	ldr	r3, [pc, #268]	@ (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002df6:	4b40      	ldr	r3, [pc, #256]	@ (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	4b40      	ldr	r3, [pc, #256]	@ (8002efc <HAL_RCC_OscConfig+0x784>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002e06:	3a01      	subs	r2, #1
 8002e08:	0112      	lsls	r2, r2, #4
 8002e0a:	4311      	orrs	r1, r2
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e10:	0212      	lsls	r2, r2, #8
 8002e12:	4311      	orrs	r1, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e18:	0852      	lsrs	r2, r2, #1
 8002e1a:	3a01      	subs	r2, #1
 8002e1c:	0552      	lsls	r2, r2, #21
 8002e1e:	4311      	orrs	r1, r2
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e24:	0852      	lsrs	r2, r2, #1
 8002e26:	3a01      	subs	r2, #1
 8002e28:	0652      	lsls	r2, r2, #25
 8002e2a:	4311      	orrs	r1, r2
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e30:	0912      	lsrs	r2, r2, #4
 8002e32:	0452      	lsls	r2, r2, #17
 8002e34:	430a      	orrs	r2, r1
 8002e36:	4930      	ldr	r1, [pc, #192]	@ (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e3c:	4b2e      	ldr	r3, [pc, #184]	@ (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a2d      	ldr	r2, [pc, #180]	@ (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002e42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e48:	4b2b      	ldr	r3, [pc, #172]	@ (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	4a2a      	ldr	r2, [pc, #168]	@ (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002e4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e54:	f7fd ff32 	bl	8000cbc <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e5c:	f7fd ff2e 	bl	8000cbc <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e058      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e6e:	4b22      	ldr	r3, [pc, #136]	@ (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e7a:	e050      	b.n	8002f1e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e04f      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e80:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d148      	bne.n	8002f1e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a19      	ldr	r2, [pc, #100]	@ (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002e92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e98:	4b17      	ldr	r3, [pc, #92]	@ (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	4a16      	ldr	r2, [pc, #88]	@ (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002e9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ea2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ea4:	f7fd ff0a 	bl	8000cbc <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eac:	f7fd ff06 	bl	8000cbc <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e030      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0x734>
 8002eca:	e028      	b.n	8002f1e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	2b0c      	cmp	r3, #12
 8002ed0:	d023      	beq.n	8002f1a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed2:	4b09      	ldr	r3, [pc, #36]	@ (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a08      	ldr	r2, [pc, #32]	@ (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002ed8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ede:	f7fd feed 	bl	8000cbc <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ee4:	e00c      	b.n	8002f00 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee6:	f7fd fee9 	bl	8000cbc <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d905      	bls.n	8002f00 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e013      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f00:	4b09      	ldr	r3, [pc, #36]	@ (8002f28 <HAL_RCC_OscConfig+0x7b0>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1ec      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f0c:	4b06      	ldr	r3, [pc, #24]	@ (8002f28 <HAL_RCC_OscConfig+0x7b0>)
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	4905      	ldr	r1, [pc, #20]	@ (8002f28 <HAL_RCC_OscConfig+0x7b0>)
 8002f12:	4b06      	ldr	r3, [pc, #24]	@ (8002f2c <HAL_RCC_OscConfig+0x7b4>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	60cb      	str	r3, [r1, #12]
 8002f18:	e001      	b.n	8002f1e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3720      	adds	r7, #32
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	feeefffc 	.word	0xfeeefffc

08002f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0e7      	b.n	8003114 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f44:	4b75      	ldr	r3, [pc, #468]	@ (800311c <HAL_RCC_ClockConfig+0x1ec>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d910      	bls.n	8002f74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f52:	4b72      	ldr	r3, [pc, #456]	@ (800311c <HAL_RCC_ClockConfig+0x1ec>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f023 0207 	bic.w	r2, r3, #7
 8002f5a:	4970      	ldr	r1, [pc, #448]	@ (800311c <HAL_RCC_ClockConfig+0x1ec>)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f62:	4b6e      	ldr	r3, [pc, #440]	@ (800311c <HAL_RCC_ClockConfig+0x1ec>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d001      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0cf      	b.n	8003114 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d010      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	4b66      	ldr	r3, [pc, #408]	@ (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d908      	bls.n	8002fa2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f90:	4b63      	ldr	r3, [pc, #396]	@ (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	4960      	ldr	r1, [pc, #384]	@ (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d04c      	beq.n	8003048 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fb6:	4b5a      	ldr	r3, [pc, #360]	@ (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d121      	bne.n	8003006 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e0a6      	b.n	8003114 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d107      	bne.n	8002fde <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fce:	4b54      	ldr	r3, [pc, #336]	@ (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d115      	bne.n	8003006 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e09a      	b.n	8003114 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fe6:	4b4e      	ldr	r3, [pc, #312]	@ (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d109      	bne.n	8003006 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e08e      	b.n	8003114 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ff6:	4b4a      	ldr	r3, [pc, #296]	@ (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e086      	b.n	8003114 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003006:	4b46      	ldr	r3, [pc, #280]	@ (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f023 0203 	bic.w	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4943      	ldr	r1, [pc, #268]	@ (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8003014:	4313      	orrs	r3, r2
 8003016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003018:	f7fd fe50 	bl	8000cbc <HAL_GetTick>
 800301c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301e:	e00a      	b.n	8003036 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003020:	f7fd fe4c 	bl	8000cbc <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e06e      	b.n	8003114 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	4b3a      	ldr	r3, [pc, #232]	@ (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 020c 	and.w	r2, r3, #12
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	429a      	cmp	r2, r3
 8003046:	d1eb      	bne.n	8003020 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d010      	beq.n	8003076 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	4b31      	ldr	r3, [pc, #196]	@ (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003060:	429a      	cmp	r2, r3
 8003062:	d208      	bcs.n	8003076 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003064:	4b2e      	ldr	r3, [pc, #184]	@ (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	492b      	ldr	r1, [pc, #172]	@ (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8003072:	4313      	orrs	r3, r2
 8003074:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003076:	4b29      	ldr	r3, [pc, #164]	@ (800311c <HAL_RCC_ClockConfig+0x1ec>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d210      	bcs.n	80030a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003084:	4b25      	ldr	r3, [pc, #148]	@ (800311c <HAL_RCC_ClockConfig+0x1ec>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f023 0207 	bic.w	r2, r3, #7
 800308c:	4923      	ldr	r1, [pc, #140]	@ (800311c <HAL_RCC_ClockConfig+0x1ec>)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	4313      	orrs	r3, r2
 8003092:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003094:	4b21      	ldr	r3, [pc, #132]	@ (800311c <HAL_RCC_ClockConfig+0x1ec>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d001      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e036      	b.n	8003114 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d008      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	4918      	ldr	r1, [pc, #96]	@ (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d009      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030d0:	4b13      	ldr	r3, [pc, #76]	@ (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4910      	ldr	r1, [pc, #64]	@ (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030e4:	f000 f824 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 80030e8:	4602      	mov	r2, r0
 80030ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	091b      	lsrs	r3, r3, #4
 80030f0:	f003 030f 	and.w	r3, r3, #15
 80030f4:	490b      	ldr	r1, [pc, #44]	@ (8003124 <HAL_RCC_ClockConfig+0x1f4>)
 80030f6:	5ccb      	ldrb	r3, [r1, r3]
 80030f8:	f003 031f 	and.w	r3, r3, #31
 80030fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003100:	4a09      	ldr	r2, [pc, #36]	@ (8003128 <HAL_RCC_ClockConfig+0x1f8>)
 8003102:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003104:	4b09      	ldr	r3, [pc, #36]	@ (800312c <HAL_RCC_ClockConfig+0x1fc>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f7fd fd87 	bl	8000c1c <HAL_InitTick>
 800310e:	4603      	mov	r3, r0
 8003110:	72fb      	strb	r3, [r7, #11]

  return status;
 8003112:	7afb      	ldrb	r3, [r7, #11]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40022000 	.word	0x40022000
 8003120:	40021000 	.word	0x40021000
 8003124:	080051a8 	.word	0x080051a8
 8003128:	20000000 	.word	0x20000000
 800312c:	20000004 	.word	0x20000004

08003130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003130:	b480      	push	{r7}
 8003132:	b089      	sub	sp, #36	@ 0x24
 8003134:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003136:	2300      	movs	r3, #0
 8003138:	61fb      	str	r3, [r7, #28]
 800313a:	2300      	movs	r3, #0
 800313c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800313e:	4b3e      	ldr	r3, [pc, #248]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x108>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 030c 	and.w	r3, r3, #12
 8003146:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003148:	4b3b      	ldr	r3, [pc, #236]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x108>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_RCC_GetSysClockFreq+0x34>
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	2b0c      	cmp	r3, #12
 800315c:	d121      	bne.n	80031a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d11e      	bne.n	80031a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003164:	4b34      	ldr	r3, [pc, #208]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x108>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d107      	bne.n	8003180 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003170:	4b31      	ldr	r3, [pc, #196]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x108>)
 8003172:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003176:	0a1b      	lsrs	r3, r3, #8
 8003178:	f003 030f 	and.w	r3, r3, #15
 800317c:	61fb      	str	r3, [r7, #28]
 800317e:	e005      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003180:	4b2d      	ldr	r3, [pc, #180]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x108>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	091b      	lsrs	r3, r3, #4
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800318c:	4a2b      	ldr	r2, [pc, #172]	@ (800323c <HAL_RCC_GetSysClockFreq+0x10c>)
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003194:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10d      	bne.n	80031b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031a0:	e00a      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d102      	bne.n	80031ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031a8:	4b25      	ldr	r3, [pc, #148]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x110>)
 80031aa:	61bb      	str	r3, [r7, #24]
 80031ac:	e004      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d101      	bne.n	80031b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031b4:	4b23      	ldr	r3, [pc, #140]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x114>)
 80031b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	2b0c      	cmp	r3, #12
 80031bc:	d134      	bne.n	8003228 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031be:	4b1e      	ldr	r3, [pc, #120]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x108>)
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d003      	beq.n	80031d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d003      	beq.n	80031dc <HAL_RCC_GetSysClockFreq+0xac>
 80031d4:	e005      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x110>)
 80031d8:	617b      	str	r3, [r7, #20]
      break;
 80031da:	e005      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031dc:	4b19      	ldr	r3, [pc, #100]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x114>)
 80031de:	617b      	str	r3, [r7, #20]
      break;
 80031e0:	e002      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	617b      	str	r3, [r7, #20]
      break;
 80031e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031e8:	4b13      	ldr	r3, [pc, #76]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	091b      	lsrs	r3, r3, #4
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	3301      	adds	r3, #1
 80031f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031f6:	4b10      	ldr	r3, [pc, #64]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x108>)
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	0a1b      	lsrs	r3, r3, #8
 80031fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	fb03 f202 	mul.w	r2, r3, r2
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	fbb2 f3f3 	udiv	r3, r2, r3
 800320c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800320e:	4b0a      	ldr	r3, [pc, #40]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x108>)
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	0e5b      	lsrs	r3, r3, #25
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	3301      	adds	r3, #1
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	fbb2 f3f3 	udiv	r3, r2, r3
 8003226:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003228:	69bb      	ldr	r3, [r7, #24]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3724      	adds	r7, #36	@ 0x24
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40021000 	.word	0x40021000
 800323c:	080051c0 	.word	0x080051c0
 8003240:	00f42400 	.word	0x00f42400
 8003244:	007a1200 	.word	0x007a1200

08003248 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800324c:	4b03      	ldr	r3, [pc, #12]	@ (800325c <HAL_RCC_GetHCLKFreq+0x14>)
 800324e:	681b      	ldr	r3, [r3, #0]
}
 8003250:	4618      	mov	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	20000000 	.word	0x20000000

08003260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003264:	f7ff fff0 	bl	8003248 <HAL_RCC_GetHCLKFreq>
 8003268:	4602      	mov	r2, r0
 800326a:	4b06      	ldr	r3, [pc, #24]	@ (8003284 <HAL_RCC_GetPCLK1Freq+0x24>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	0a1b      	lsrs	r3, r3, #8
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	4904      	ldr	r1, [pc, #16]	@ (8003288 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003276:	5ccb      	ldrb	r3, [r1, r3]
 8003278:	f003 031f 	and.w	r3, r3, #31
 800327c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003280:	4618      	mov	r0, r3
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40021000 	.word	0x40021000
 8003288:	080051b8 	.word	0x080051b8

0800328c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003290:	f7ff ffda 	bl	8003248 <HAL_RCC_GetHCLKFreq>
 8003294:	4602      	mov	r2, r0
 8003296:	4b06      	ldr	r3, [pc, #24]	@ (80032b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	0adb      	lsrs	r3, r3, #11
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	4904      	ldr	r1, [pc, #16]	@ (80032b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032a2:	5ccb      	ldrb	r3, [r1, r3]
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40021000 	.word	0x40021000
 80032b4:	080051b8 	.word	0x080051b8

080032b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032c0:	2300      	movs	r3, #0
 80032c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032d0:	f7ff f9ee 	bl	80026b0 <HAL_PWREx_GetVoltageRange>
 80032d4:	6178      	str	r0, [r7, #20]
 80032d6:	e014      	b.n	8003302 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032d8:	4b25      	ldr	r3, [pc, #148]	@ (8003370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032dc:	4a24      	ldr	r2, [pc, #144]	@ (8003370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80032e4:	4b22      	ldr	r3, [pc, #136]	@ (8003370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032f0:	f7ff f9de 	bl	80026b0 <HAL_PWREx_GetVoltageRange>
 80032f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fa:	4a1d      	ldr	r2, [pc, #116]	@ (8003370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003300:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003308:	d10b      	bne.n	8003322 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b80      	cmp	r3, #128	@ 0x80
 800330e:	d919      	bls.n	8003344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2ba0      	cmp	r3, #160	@ 0xa0
 8003314:	d902      	bls.n	800331c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003316:	2302      	movs	r3, #2
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	e013      	b.n	8003344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800331c:	2301      	movs	r3, #1
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	e010      	b.n	8003344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b80      	cmp	r3, #128	@ 0x80
 8003326:	d902      	bls.n	800332e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003328:	2303      	movs	r3, #3
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	e00a      	b.n	8003344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b80      	cmp	r3, #128	@ 0x80
 8003332:	d102      	bne.n	800333a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003334:	2302      	movs	r3, #2
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	e004      	b.n	8003344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b70      	cmp	r3, #112	@ 0x70
 800333e:	d101      	bne.n	8003344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003340:	2301      	movs	r3, #1
 8003342:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003344:	4b0b      	ldr	r3, [pc, #44]	@ (8003374 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f023 0207 	bic.w	r2, r3, #7
 800334c:	4909      	ldr	r1, [pc, #36]	@ (8003374 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003354:	4b07      	ldr	r3, [pc, #28]	@ (8003374 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	429a      	cmp	r2, r3
 8003360:	d001      	beq.n	8003366 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40021000 	.word	0x40021000
 8003374:	40022000 	.word	0x40022000

08003378 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003380:	2300      	movs	r3, #0
 8003382:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003384:	2300      	movs	r3, #0
 8003386:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003390:	2b00      	cmp	r3, #0
 8003392:	d041      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003398:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800339c:	d02a      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800339e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80033a2:	d824      	bhi.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033a8:	d008      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80033aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033ae:	d81e      	bhi.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00a      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80033b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033b8:	d010      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033ba:	e018      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033bc:	4b86      	ldr	r3, [pc, #536]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	4a85      	ldr	r2, [pc, #532]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033c8:	e015      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3304      	adds	r3, #4
 80033ce:	2100      	movs	r1, #0
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 fabb 	bl	800394c <RCCEx_PLLSAI1_Config>
 80033d6:	4603      	mov	r3, r0
 80033d8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033da:	e00c      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3320      	adds	r3, #32
 80033e0:	2100      	movs	r1, #0
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fba6 	bl	8003b34 <RCCEx_PLLSAI2_Config>
 80033e8:	4603      	mov	r3, r0
 80033ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033ec:	e003      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	74fb      	strb	r3, [r7, #19]
      break;
 80033f2:	e000      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80033f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033f6:	7cfb      	ldrb	r3, [r7, #19]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10b      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033fc:	4b76      	ldr	r3, [pc, #472]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003402:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800340a:	4973      	ldr	r1, [pc, #460]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003412:	e001      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003414:	7cfb      	ldrb	r3, [r7, #19]
 8003416:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d041      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003428:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800342c:	d02a      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800342e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003432:	d824      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003434:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003438:	d008      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800343a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800343e:	d81e      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003444:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003448:	d010      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800344a:	e018      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800344c:	4b62      	ldr	r3, [pc, #392]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	4a61      	ldr	r2, [pc, #388]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003452:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003456:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003458:	e015      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3304      	adds	r3, #4
 800345e:	2100      	movs	r1, #0
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fa73 	bl	800394c <RCCEx_PLLSAI1_Config>
 8003466:	4603      	mov	r3, r0
 8003468:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800346a:	e00c      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3320      	adds	r3, #32
 8003470:	2100      	movs	r1, #0
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fb5e 	bl	8003b34 <RCCEx_PLLSAI2_Config>
 8003478:	4603      	mov	r3, r0
 800347a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800347c:	e003      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	74fb      	strb	r3, [r7, #19]
      break;
 8003482:	e000      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003484:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003486:	7cfb      	ldrb	r3, [r7, #19]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10b      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800348c:	4b52      	ldr	r3, [pc, #328]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800348e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003492:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800349a:	494f      	ldr	r1, [pc, #316]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800349c:	4313      	orrs	r3, r2
 800349e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80034a2:	e001      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a4:	7cfb      	ldrb	r3, [r7, #19]
 80034a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 80a0 	beq.w	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034b6:	2300      	movs	r3, #0
 80034b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034ba:	4b47      	ldr	r3, [pc, #284]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x152>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80034ca:	2300      	movs	r3, #0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00d      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d0:	4b41      	ldr	r3, [pc, #260]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d4:	4a40      	ldr	r2, [pc, #256]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034da:	6593      	str	r3, [r2, #88]	@ 0x58
 80034dc:	4b3e      	ldr	r3, [pc, #248]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034e8:	2301      	movs	r3, #1
 80034ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034ec:	4b3b      	ldr	r3, [pc, #236]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a3a      	ldr	r2, [pc, #232]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034f8:	f7fd fbe0 	bl	8000cbc <HAL_GetTick>
 80034fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034fe:	e009      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003500:	f7fd fbdc 	bl	8000cbc <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d902      	bls.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	74fb      	strb	r3, [r7, #19]
        break;
 8003512:	e005      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003514:	4b31      	ldr	r3, [pc, #196]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0ef      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003520:	7cfb      	ldrb	r3, [r7, #19]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d15c      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003526:	4b2c      	ldr	r3, [pc, #176]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800352c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003530:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d01f      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	429a      	cmp	r2, r3
 8003542:	d019      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003544:	4b24      	ldr	r3, [pc, #144]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800354a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800354e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003550:	4b21      	ldr	r3, [pc, #132]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003556:	4a20      	ldr	r2, [pc, #128]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800355c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003560:	4b1d      	ldr	r3, [pc, #116]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003566:	4a1c      	ldr	r2, [pc, #112]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003568:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800356c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003570:	4a19      	ldr	r2, [pc, #100]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d016      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003582:	f7fd fb9b 	bl	8000cbc <HAL_GetTick>
 8003586:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003588:	e00b      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358a:	f7fd fb97 	bl	8000cbc <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003598:	4293      	cmp	r3, r2
 800359a:	d902      	bls.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	74fb      	strb	r3, [r7, #19]
            break;
 80035a0:	e006      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a2:	4b0d      	ldr	r3, [pc, #52]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0ec      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80035b0:	7cfb      	ldrb	r3, [r7, #19]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10c      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035b6:	4b08      	ldr	r3, [pc, #32]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035c6:	4904      	ldr	r1, [pc, #16]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80035ce:	e009      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035d0:	7cfb      	ldrb	r3, [r7, #19]
 80035d2:	74bb      	strb	r3, [r7, #18]
 80035d4:	e006      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80035d6:	bf00      	nop
 80035d8:	40021000 	.word	0x40021000
 80035dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e0:	7cfb      	ldrb	r3, [r7, #19]
 80035e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035e4:	7c7b      	ldrb	r3, [r7, #17]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d105      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ea:	4b9e      	ldr	r3, [pc, #632]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ee:	4a9d      	ldr	r2, [pc, #628]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035f4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003602:	4b98      	ldr	r3, [pc, #608]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003608:	f023 0203 	bic.w	r2, r3, #3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003610:	4994      	ldr	r1, [pc, #592]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003612:	4313      	orrs	r3, r2
 8003614:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00a      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003624:	4b8f      	ldr	r3, [pc, #572]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800362a:	f023 020c 	bic.w	r2, r3, #12
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003632:	498c      	ldr	r1, [pc, #560]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003646:	4b87      	ldr	r3, [pc, #540]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800364c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003654:	4983      	ldr	r1, [pc, #524]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0308 	and.w	r3, r3, #8
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003668:	4b7e      	ldr	r3, [pc, #504]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800366e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003676:	497b      	ldr	r1, [pc, #492]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800368a:	4b76      	ldr	r3, [pc, #472]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003690:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003698:	4972      	ldr	r1, [pc, #456]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0320 	and.w	r3, r3, #32
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036ac:	4b6d      	ldr	r3, [pc, #436]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ba:	496a      	ldr	r1, [pc, #424]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036ce:	4b65      	ldr	r3, [pc, #404]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036dc:	4961      	ldr	r1, [pc, #388]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00a      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036f0:	4b5c      	ldr	r3, [pc, #368]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036fe:	4959      	ldr	r1, [pc, #356]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003712:	4b54      	ldr	r3, [pc, #336]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003718:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003720:	4950      	ldr	r1, [pc, #320]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00a      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003734:	4b4b      	ldr	r3, [pc, #300]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800373a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003742:	4948      	ldr	r1, [pc, #288]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003756:	4b43      	ldr	r3, [pc, #268]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800375c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003764:	493f      	ldr	r1, [pc, #252]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d028      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003778:	4b3a      	ldr	r3, [pc, #232]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800377e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003786:	4937      	ldr	r1, [pc, #220]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003792:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003796:	d106      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003798:	4b32      	ldr	r3, [pc, #200]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	4a31      	ldr	r2, [pc, #196]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800379e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037a2:	60d3      	str	r3, [r2, #12]
 80037a4:	e011      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037ae:	d10c      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3304      	adds	r3, #4
 80037b4:	2101      	movs	r1, #1
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 f8c8 	bl	800394c <RCCEx_PLLSAI1_Config>
 80037bc:	4603      	mov	r3, r0
 80037be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037c0:	7cfb      	ldrb	r3, [r7, #19]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80037c6:	7cfb      	ldrb	r3, [r7, #19]
 80037c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d028      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037d6:	4b23      	ldr	r3, [pc, #140]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037dc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e4:	491f      	ldr	r1, [pc, #124]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037f4:	d106      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003800:	60d3      	str	r3, [r2, #12]
 8003802:	e011      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003808:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800380c:	d10c      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3304      	adds	r3, #4
 8003812:	2101      	movs	r1, #1
 8003814:	4618      	mov	r0, r3
 8003816:	f000 f899 	bl	800394c <RCCEx_PLLSAI1_Config>
 800381a:	4603      	mov	r3, r0
 800381c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800381e:	7cfb      	ldrb	r3, [r7, #19]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003824:	7cfb      	ldrb	r3, [r7, #19]
 8003826:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d02b      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003834:	4b0b      	ldr	r3, [pc, #44]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800383a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003842:	4908      	ldr	r1, [pc, #32]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800384e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003852:	d109      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003854:	4b03      	ldr	r3, [pc, #12]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	4a02      	ldr	r2, [pc, #8]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800385e:	60d3      	str	r3, [r2, #12]
 8003860:	e014      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003862:	bf00      	nop
 8003864:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800386c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003870:	d10c      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3304      	adds	r3, #4
 8003876:	2101      	movs	r1, #1
 8003878:	4618      	mov	r0, r3
 800387a:	f000 f867 	bl	800394c <RCCEx_PLLSAI1_Config>
 800387e:	4603      	mov	r3, r0
 8003880:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003882:	7cfb      	ldrb	r3, [r7, #19]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003888:	7cfb      	ldrb	r3, [r7, #19]
 800388a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d02f      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003898:	4b2b      	ldr	r3, [pc, #172]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800389a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800389e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038a6:	4928      	ldr	r1, [pc, #160]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038b6:	d10d      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3304      	adds	r3, #4
 80038bc:	2102      	movs	r1, #2
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 f844 	bl	800394c <RCCEx_PLLSAI1_Config>
 80038c4:	4603      	mov	r3, r0
 80038c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038c8:	7cfb      	ldrb	r3, [r7, #19]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d014      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038ce:	7cfb      	ldrb	r3, [r7, #19]
 80038d0:	74bb      	strb	r3, [r7, #18]
 80038d2:	e011      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038dc:	d10c      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3320      	adds	r3, #32
 80038e2:	2102      	movs	r1, #2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 f925 	bl	8003b34 <RCCEx_PLLSAI2_Config>
 80038ea:	4603      	mov	r3, r0
 80038ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038ee:	7cfb      	ldrb	r3, [r7, #19]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038f4:	7cfb      	ldrb	r3, [r7, #19]
 80038f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00a      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003904:	4b10      	ldr	r3, [pc, #64]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800390a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003912:	490d      	ldr	r1, [pc, #52]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003914:	4313      	orrs	r3, r2
 8003916:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00b      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003926:	4b08      	ldr	r3, [pc, #32]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800392c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003936:	4904      	ldr	r1, [pc, #16]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003938:	4313      	orrs	r3, r2
 800393a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800393e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40021000 	.word	0x40021000

0800394c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800395a:	4b75      	ldr	r3, [pc, #468]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d018      	beq.n	8003998 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003966:	4b72      	ldr	r3, [pc, #456]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f003 0203 	and.w	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d10d      	bne.n	8003992 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
       ||
 800397a:	2b00      	cmp	r3, #0
 800397c:	d009      	beq.n	8003992 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800397e:	4b6c      	ldr	r3, [pc, #432]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	091b      	lsrs	r3, r3, #4
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
       ||
 800398e:	429a      	cmp	r2, r3
 8003990:	d047      	beq.n	8003a22 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	73fb      	strb	r3, [r7, #15]
 8003996:	e044      	b.n	8003a22 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b03      	cmp	r3, #3
 800399e:	d018      	beq.n	80039d2 <RCCEx_PLLSAI1_Config+0x86>
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d825      	bhi.n	80039f0 <RCCEx_PLLSAI1_Config+0xa4>
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d002      	beq.n	80039ae <RCCEx_PLLSAI1_Config+0x62>
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d009      	beq.n	80039c0 <RCCEx_PLLSAI1_Config+0x74>
 80039ac:	e020      	b.n	80039f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039ae:	4b60      	ldr	r3, [pc, #384]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d11d      	bne.n	80039f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039be:	e01a      	b.n	80039f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039c0:	4b5b      	ldr	r3, [pc, #364]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d116      	bne.n	80039fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039d0:	e013      	b.n	80039fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039d2:	4b57      	ldr	r3, [pc, #348]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10f      	bne.n	80039fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039de:	4b54      	ldr	r3, [pc, #336]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d109      	bne.n	80039fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039ee:	e006      	b.n	80039fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	73fb      	strb	r3, [r7, #15]
      break;
 80039f4:	e004      	b.n	8003a00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039f6:	bf00      	nop
 80039f8:	e002      	b.n	8003a00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039fa:	bf00      	nop
 80039fc:	e000      	b.n	8003a00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10d      	bne.n	8003a22 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a06:	4b4a      	ldr	r3, [pc, #296]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6819      	ldr	r1, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	430b      	orrs	r3, r1
 8003a1c:	4944      	ldr	r1, [pc, #272]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d17d      	bne.n	8003b24 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a28:	4b41      	ldr	r3, [pc, #260]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a40      	ldr	r2, [pc, #256]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003a32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a34:	f7fd f942 	bl	8000cbc <HAL_GetTick>
 8003a38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a3a:	e009      	b.n	8003a50 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a3c:	f7fd f93e 	bl	8000cbc <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d902      	bls.n	8003a50 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	73fb      	strb	r3, [r7, #15]
        break;
 8003a4e:	e005      	b.n	8003a5c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a50:	4b37      	ldr	r3, [pc, #220]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1ef      	bne.n	8003a3c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d160      	bne.n	8003b24 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d111      	bne.n	8003a8c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a68:	4b31      	ldr	r3, [pc, #196]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003a70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6892      	ldr	r2, [r2, #8]
 8003a78:	0211      	lsls	r1, r2, #8
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	68d2      	ldr	r2, [r2, #12]
 8003a7e:	0912      	lsrs	r2, r2, #4
 8003a80:	0452      	lsls	r2, r2, #17
 8003a82:	430a      	orrs	r2, r1
 8003a84:	492a      	ldr	r1, [pc, #168]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	610b      	str	r3, [r1, #16]
 8003a8a:	e027      	b.n	8003adc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d112      	bne.n	8003ab8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a92:	4b27      	ldr	r3, [pc, #156]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003a9a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6892      	ldr	r2, [r2, #8]
 8003aa2:	0211      	lsls	r1, r2, #8
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6912      	ldr	r2, [r2, #16]
 8003aa8:	0852      	lsrs	r2, r2, #1
 8003aaa:	3a01      	subs	r2, #1
 8003aac:	0552      	lsls	r2, r2, #21
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	491f      	ldr	r1, [pc, #124]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	610b      	str	r3, [r1, #16]
 8003ab6:	e011      	b.n	8003adc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003ac0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6892      	ldr	r2, [r2, #8]
 8003ac8:	0211      	lsls	r1, r2, #8
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6952      	ldr	r2, [r2, #20]
 8003ace:	0852      	lsrs	r2, r2, #1
 8003ad0:	3a01      	subs	r2, #1
 8003ad2:	0652      	lsls	r2, r2, #25
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	4916      	ldr	r1, [pc, #88]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003adc:	4b14      	ldr	r3, [pc, #80]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a13      	ldr	r2, [pc, #76]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ae6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae8:	f7fd f8e8 	bl	8000cbc <HAL_GetTick>
 8003aec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003aee:	e009      	b.n	8003b04 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003af0:	f7fd f8e4 	bl	8000cbc <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d902      	bls.n	8003b04 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	73fb      	strb	r3, [r7, #15]
          break;
 8003b02:	e005      	b.n	8003b10 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b04:	4b0a      	ldr	r3, [pc, #40]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0ef      	beq.n	8003af0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b16:	4b06      	ldr	r3, [pc, #24]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b18:	691a      	ldr	r2, [r3, #16]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	4904      	ldr	r1, [pc, #16]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40021000 	.word	0x40021000

08003b34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b42:	4b6a      	ldr	r3, [pc, #424]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d018      	beq.n	8003b80 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b4e:	4b67      	ldr	r3, [pc, #412]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0203 	and.w	r2, r3, #3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d10d      	bne.n	8003b7a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
       ||
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d009      	beq.n	8003b7a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003b66:	4b61      	ldr	r3, [pc, #388]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	091b      	lsrs	r3, r3, #4
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	1c5a      	adds	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
       ||
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d047      	beq.n	8003c0a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	73fb      	strb	r3, [r7, #15]
 8003b7e:	e044      	b.n	8003c0a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d018      	beq.n	8003bba <RCCEx_PLLSAI2_Config+0x86>
 8003b88:	2b03      	cmp	r3, #3
 8003b8a:	d825      	bhi.n	8003bd8 <RCCEx_PLLSAI2_Config+0xa4>
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d002      	beq.n	8003b96 <RCCEx_PLLSAI2_Config+0x62>
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d009      	beq.n	8003ba8 <RCCEx_PLLSAI2_Config+0x74>
 8003b94:	e020      	b.n	8003bd8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b96:	4b55      	ldr	r3, [pc, #340]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d11d      	bne.n	8003bde <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ba6:	e01a      	b.n	8003bde <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ba8:	4b50      	ldr	r3, [pc, #320]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d116      	bne.n	8003be2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bb8:	e013      	b.n	8003be2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bba:	4b4c      	ldr	r3, [pc, #304]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10f      	bne.n	8003be6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bc6:	4b49      	ldr	r3, [pc, #292]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d109      	bne.n	8003be6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bd6:	e006      	b.n	8003be6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	73fb      	strb	r3, [r7, #15]
      break;
 8003bdc:	e004      	b.n	8003be8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bde:	bf00      	nop
 8003be0:	e002      	b.n	8003be8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003be2:	bf00      	nop
 8003be4:	e000      	b.n	8003be8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003be6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10d      	bne.n	8003c0a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bee:	4b3f      	ldr	r3, [pc, #252]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6819      	ldr	r1, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	430b      	orrs	r3, r1
 8003c04:	4939      	ldr	r1, [pc, #228]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d167      	bne.n	8003ce0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c10:	4b36      	ldr	r3, [pc, #216]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a35      	ldr	r2, [pc, #212]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c1c:	f7fd f84e 	bl	8000cbc <HAL_GetTick>
 8003c20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c22:	e009      	b.n	8003c38 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c24:	f7fd f84a 	bl	8000cbc <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d902      	bls.n	8003c38 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	73fb      	strb	r3, [r7, #15]
        break;
 8003c36:	e005      	b.n	8003c44 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c38:	4b2c      	ldr	r3, [pc, #176]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1ef      	bne.n	8003c24 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d14a      	bne.n	8003ce0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d111      	bne.n	8003c74 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c50:	4b26      	ldr	r3, [pc, #152]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003c58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6892      	ldr	r2, [r2, #8]
 8003c60:	0211      	lsls	r1, r2, #8
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	68d2      	ldr	r2, [r2, #12]
 8003c66:	0912      	lsrs	r2, r2, #4
 8003c68:	0452      	lsls	r2, r2, #17
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	491f      	ldr	r1, [pc, #124]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	614b      	str	r3, [r1, #20]
 8003c72:	e011      	b.n	8003c98 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c74:	4b1d      	ldr	r3, [pc, #116]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003c7c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6892      	ldr	r2, [r2, #8]
 8003c84:	0211      	lsls	r1, r2, #8
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6912      	ldr	r2, [r2, #16]
 8003c8a:	0852      	lsrs	r2, r2, #1
 8003c8c:	3a01      	subs	r2, #1
 8003c8e:	0652      	lsls	r2, r2, #25
 8003c90:	430a      	orrs	r2, r1
 8003c92:	4916      	ldr	r1, [pc, #88]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c98:	4b14      	ldr	r3, [pc, #80]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a13      	ldr	r2, [pc, #76]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ca2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca4:	f7fd f80a 	bl	8000cbc <HAL_GetTick>
 8003ca8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003caa:	e009      	b.n	8003cc0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cac:	f7fd f806 	bl	8000cbc <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d902      	bls.n	8003cc0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	73fb      	strb	r3, [r7, #15]
          break;
 8003cbe:	e005      	b.n	8003ccc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0ef      	beq.n	8003cac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003cd2:	4b06      	ldr	r3, [pc, #24]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd4:	695a      	ldr	r2, [r3, #20]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	4904      	ldr	r1, [pc, #16]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40021000 	.word	0x40021000

08003cf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e040      	b.n	8003d84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d106      	bne.n	8003d18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7fc fe64 	bl	80009e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2224      	movs	r2, #36	@ 0x24
 8003d1c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0201 	bic.w	r2, r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fb6a 	bl	8004410 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f8af 	bl	8003ea0 <UART_SetConfig>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e01b      	b.n	8003d84 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0201 	orr.w	r2, r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 fbe9 	bl	8004554 <UART_CheckIdleState>
 8003d82:	4603      	mov	r3, r0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08a      	sub	sp, #40	@ 0x28
 8003d90:	af02      	add	r7, sp, #8
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	d177      	bne.n	8003e94 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <HAL_UART_Transmit+0x24>
 8003daa:	88fb      	ldrh	r3, [r7, #6]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d101      	bne.n	8003db4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e070      	b.n	8003e96 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2221      	movs	r2, #33	@ 0x21
 8003dc0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dc2:	f7fc ff7b 	bl	8000cbc <HAL_GetTick>
 8003dc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	88fa      	ldrh	r2, [r7, #6]
 8003dcc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	88fa      	ldrh	r2, [r7, #6]
 8003dd4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003de0:	d108      	bne.n	8003df4 <HAL_UART_Transmit+0x68>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d104      	bne.n	8003df4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003dea:	2300      	movs	r3, #0
 8003dec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	61bb      	str	r3, [r7, #24]
 8003df2:	e003      	b.n	8003dfc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003dfc:	e02f      	b.n	8003e5e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2200      	movs	r2, #0
 8003e06:	2180      	movs	r1, #128	@ 0x80
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 fc4b 	bl	80046a4 <UART_WaitOnFlagUntilTimeout>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d004      	beq.n	8003e1e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2220      	movs	r2, #32
 8003e18:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e03b      	b.n	8003e96 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10b      	bne.n	8003e3c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	881a      	ldrh	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e30:	b292      	uxth	r2, r2
 8003e32:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	3302      	adds	r3, #2
 8003e38:	61bb      	str	r3, [r7, #24]
 8003e3a:	e007      	b.n	8003e4c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	781a      	ldrb	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1c9      	bne.n	8003dfe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	2200      	movs	r2, #0
 8003e72:	2140      	movs	r1, #64	@ 0x40
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 fc15 	bl	80046a4 <UART_WaitOnFlagUntilTimeout>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d004      	beq.n	8003e8a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2220      	movs	r2, #32
 8003e84:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e005      	b.n	8003e96 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	e000      	b.n	8003e96 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003e94:	2302      	movs	r3, #2
  }
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3720      	adds	r7, #32
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
	...

08003ea0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ea4:	b08a      	sub	sp, #40	@ 0x28
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	4ba4      	ldr	r3, [pc, #656]	@ (8004160 <UART_SetConfig+0x2c0>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	6812      	ldr	r2, [r2, #0]
 8003ed6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ed8:	430b      	orrs	r3, r1
 8003eda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a99      	ldr	r2, [pc, #612]	@ (8004164 <UART_SetConfig+0x2c4>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d004      	beq.n	8003f0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a90      	ldr	r2, [pc, #576]	@ (8004168 <UART_SetConfig+0x2c8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d126      	bne.n	8003f78 <UART_SetConfig+0xd8>
 8003f2a:	4b90      	ldr	r3, [pc, #576]	@ (800416c <UART_SetConfig+0x2cc>)
 8003f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f30:	f003 0303 	and.w	r3, r3, #3
 8003f34:	2b03      	cmp	r3, #3
 8003f36:	d81b      	bhi.n	8003f70 <UART_SetConfig+0xd0>
 8003f38:	a201      	add	r2, pc, #4	@ (adr r2, 8003f40 <UART_SetConfig+0xa0>)
 8003f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3e:	bf00      	nop
 8003f40:	08003f51 	.word	0x08003f51
 8003f44:	08003f61 	.word	0x08003f61
 8003f48:	08003f59 	.word	0x08003f59
 8003f4c:	08003f69 	.word	0x08003f69
 8003f50:	2301      	movs	r3, #1
 8003f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f56:	e116      	b.n	8004186 <UART_SetConfig+0x2e6>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f5e:	e112      	b.n	8004186 <UART_SetConfig+0x2e6>
 8003f60:	2304      	movs	r3, #4
 8003f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f66:	e10e      	b.n	8004186 <UART_SetConfig+0x2e6>
 8003f68:	2308      	movs	r3, #8
 8003f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f6e:	e10a      	b.n	8004186 <UART_SetConfig+0x2e6>
 8003f70:	2310      	movs	r3, #16
 8003f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f76:	e106      	b.n	8004186 <UART_SetConfig+0x2e6>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a7c      	ldr	r2, [pc, #496]	@ (8004170 <UART_SetConfig+0x2d0>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d138      	bne.n	8003ff4 <UART_SetConfig+0x154>
 8003f82:	4b7a      	ldr	r3, [pc, #488]	@ (800416c <UART_SetConfig+0x2cc>)
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f88:	f003 030c 	and.w	r3, r3, #12
 8003f8c:	2b0c      	cmp	r3, #12
 8003f8e:	d82d      	bhi.n	8003fec <UART_SetConfig+0x14c>
 8003f90:	a201      	add	r2, pc, #4	@ (adr r2, 8003f98 <UART_SetConfig+0xf8>)
 8003f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f96:	bf00      	nop
 8003f98:	08003fcd 	.word	0x08003fcd
 8003f9c:	08003fed 	.word	0x08003fed
 8003fa0:	08003fed 	.word	0x08003fed
 8003fa4:	08003fed 	.word	0x08003fed
 8003fa8:	08003fdd 	.word	0x08003fdd
 8003fac:	08003fed 	.word	0x08003fed
 8003fb0:	08003fed 	.word	0x08003fed
 8003fb4:	08003fed 	.word	0x08003fed
 8003fb8:	08003fd5 	.word	0x08003fd5
 8003fbc:	08003fed 	.word	0x08003fed
 8003fc0:	08003fed 	.word	0x08003fed
 8003fc4:	08003fed 	.word	0x08003fed
 8003fc8:	08003fe5 	.word	0x08003fe5
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fd2:	e0d8      	b.n	8004186 <UART_SetConfig+0x2e6>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fda:	e0d4      	b.n	8004186 <UART_SetConfig+0x2e6>
 8003fdc:	2304      	movs	r3, #4
 8003fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fe2:	e0d0      	b.n	8004186 <UART_SetConfig+0x2e6>
 8003fe4:	2308      	movs	r3, #8
 8003fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fea:	e0cc      	b.n	8004186 <UART_SetConfig+0x2e6>
 8003fec:	2310      	movs	r3, #16
 8003fee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ff2:	e0c8      	b.n	8004186 <UART_SetConfig+0x2e6>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a5e      	ldr	r2, [pc, #376]	@ (8004174 <UART_SetConfig+0x2d4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d125      	bne.n	800404a <UART_SetConfig+0x1aa>
 8003ffe:	4b5b      	ldr	r3, [pc, #364]	@ (800416c <UART_SetConfig+0x2cc>)
 8004000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004004:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004008:	2b30      	cmp	r3, #48	@ 0x30
 800400a:	d016      	beq.n	800403a <UART_SetConfig+0x19a>
 800400c:	2b30      	cmp	r3, #48	@ 0x30
 800400e:	d818      	bhi.n	8004042 <UART_SetConfig+0x1a2>
 8004010:	2b20      	cmp	r3, #32
 8004012:	d00a      	beq.n	800402a <UART_SetConfig+0x18a>
 8004014:	2b20      	cmp	r3, #32
 8004016:	d814      	bhi.n	8004042 <UART_SetConfig+0x1a2>
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <UART_SetConfig+0x182>
 800401c:	2b10      	cmp	r3, #16
 800401e:	d008      	beq.n	8004032 <UART_SetConfig+0x192>
 8004020:	e00f      	b.n	8004042 <UART_SetConfig+0x1a2>
 8004022:	2300      	movs	r3, #0
 8004024:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004028:	e0ad      	b.n	8004186 <UART_SetConfig+0x2e6>
 800402a:	2302      	movs	r3, #2
 800402c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004030:	e0a9      	b.n	8004186 <UART_SetConfig+0x2e6>
 8004032:	2304      	movs	r3, #4
 8004034:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004038:	e0a5      	b.n	8004186 <UART_SetConfig+0x2e6>
 800403a:	2308      	movs	r3, #8
 800403c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004040:	e0a1      	b.n	8004186 <UART_SetConfig+0x2e6>
 8004042:	2310      	movs	r3, #16
 8004044:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004048:	e09d      	b.n	8004186 <UART_SetConfig+0x2e6>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a4a      	ldr	r2, [pc, #296]	@ (8004178 <UART_SetConfig+0x2d8>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d125      	bne.n	80040a0 <UART_SetConfig+0x200>
 8004054:	4b45      	ldr	r3, [pc, #276]	@ (800416c <UART_SetConfig+0x2cc>)
 8004056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800405a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800405e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004060:	d016      	beq.n	8004090 <UART_SetConfig+0x1f0>
 8004062:	2bc0      	cmp	r3, #192	@ 0xc0
 8004064:	d818      	bhi.n	8004098 <UART_SetConfig+0x1f8>
 8004066:	2b80      	cmp	r3, #128	@ 0x80
 8004068:	d00a      	beq.n	8004080 <UART_SetConfig+0x1e0>
 800406a:	2b80      	cmp	r3, #128	@ 0x80
 800406c:	d814      	bhi.n	8004098 <UART_SetConfig+0x1f8>
 800406e:	2b00      	cmp	r3, #0
 8004070:	d002      	beq.n	8004078 <UART_SetConfig+0x1d8>
 8004072:	2b40      	cmp	r3, #64	@ 0x40
 8004074:	d008      	beq.n	8004088 <UART_SetConfig+0x1e8>
 8004076:	e00f      	b.n	8004098 <UART_SetConfig+0x1f8>
 8004078:	2300      	movs	r3, #0
 800407a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800407e:	e082      	b.n	8004186 <UART_SetConfig+0x2e6>
 8004080:	2302      	movs	r3, #2
 8004082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004086:	e07e      	b.n	8004186 <UART_SetConfig+0x2e6>
 8004088:	2304      	movs	r3, #4
 800408a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800408e:	e07a      	b.n	8004186 <UART_SetConfig+0x2e6>
 8004090:	2308      	movs	r3, #8
 8004092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004096:	e076      	b.n	8004186 <UART_SetConfig+0x2e6>
 8004098:	2310      	movs	r3, #16
 800409a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800409e:	e072      	b.n	8004186 <UART_SetConfig+0x2e6>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a35      	ldr	r2, [pc, #212]	@ (800417c <UART_SetConfig+0x2dc>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d12a      	bne.n	8004100 <UART_SetConfig+0x260>
 80040aa:	4b30      	ldr	r3, [pc, #192]	@ (800416c <UART_SetConfig+0x2cc>)
 80040ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040b8:	d01a      	beq.n	80040f0 <UART_SetConfig+0x250>
 80040ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040be:	d81b      	bhi.n	80040f8 <UART_SetConfig+0x258>
 80040c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040c4:	d00c      	beq.n	80040e0 <UART_SetConfig+0x240>
 80040c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040ca:	d815      	bhi.n	80040f8 <UART_SetConfig+0x258>
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <UART_SetConfig+0x238>
 80040d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040d4:	d008      	beq.n	80040e8 <UART_SetConfig+0x248>
 80040d6:	e00f      	b.n	80040f8 <UART_SetConfig+0x258>
 80040d8:	2300      	movs	r3, #0
 80040da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040de:	e052      	b.n	8004186 <UART_SetConfig+0x2e6>
 80040e0:	2302      	movs	r3, #2
 80040e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040e6:	e04e      	b.n	8004186 <UART_SetConfig+0x2e6>
 80040e8:	2304      	movs	r3, #4
 80040ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ee:	e04a      	b.n	8004186 <UART_SetConfig+0x2e6>
 80040f0:	2308      	movs	r3, #8
 80040f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040f6:	e046      	b.n	8004186 <UART_SetConfig+0x2e6>
 80040f8:	2310      	movs	r3, #16
 80040fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040fe:	e042      	b.n	8004186 <UART_SetConfig+0x2e6>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a17      	ldr	r2, [pc, #92]	@ (8004164 <UART_SetConfig+0x2c4>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d13a      	bne.n	8004180 <UART_SetConfig+0x2e0>
 800410a:	4b18      	ldr	r3, [pc, #96]	@ (800416c <UART_SetConfig+0x2cc>)
 800410c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004110:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004114:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004118:	d01a      	beq.n	8004150 <UART_SetConfig+0x2b0>
 800411a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800411e:	d81b      	bhi.n	8004158 <UART_SetConfig+0x2b8>
 8004120:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004124:	d00c      	beq.n	8004140 <UART_SetConfig+0x2a0>
 8004126:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800412a:	d815      	bhi.n	8004158 <UART_SetConfig+0x2b8>
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <UART_SetConfig+0x298>
 8004130:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004134:	d008      	beq.n	8004148 <UART_SetConfig+0x2a8>
 8004136:	e00f      	b.n	8004158 <UART_SetConfig+0x2b8>
 8004138:	2300      	movs	r3, #0
 800413a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800413e:	e022      	b.n	8004186 <UART_SetConfig+0x2e6>
 8004140:	2302      	movs	r3, #2
 8004142:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004146:	e01e      	b.n	8004186 <UART_SetConfig+0x2e6>
 8004148:	2304      	movs	r3, #4
 800414a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800414e:	e01a      	b.n	8004186 <UART_SetConfig+0x2e6>
 8004150:	2308      	movs	r3, #8
 8004152:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004156:	e016      	b.n	8004186 <UART_SetConfig+0x2e6>
 8004158:	2310      	movs	r3, #16
 800415a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800415e:	e012      	b.n	8004186 <UART_SetConfig+0x2e6>
 8004160:	efff69f3 	.word	0xefff69f3
 8004164:	40008000 	.word	0x40008000
 8004168:	40013800 	.word	0x40013800
 800416c:	40021000 	.word	0x40021000
 8004170:	40004400 	.word	0x40004400
 8004174:	40004800 	.word	0x40004800
 8004178:	40004c00 	.word	0x40004c00
 800417c:	40005000 	.word	0x40005000
 8004180:	2310      	movs	r3, #16
 8004182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a9f      	ldr	r2, [pc, #636]	@ (8004408 <UART_SetConfig+0x568>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d17a      	bne.n	8004286 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004190:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004194:	2b08      	cmp	r3, #8
 8004196:	d824      	bhi.n	80041e2 <UART_SetConfig+0x342>
 8004198:	a201      	add	r2, pc, #4	@ (adr r2, 80041a0 <UART_SetConfig+0x300>)
 800419a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419e:	bf00      	nop
 80041a0:	080041c5 	.word	0x080041c5
 80041a4:	080041e3 	.word	0x080041e3
 80041a8:	080041cd 	.word	0x080041cd
 80041ac:	080041e3 	.word	0x080041e3
 80041b0:	080041d3 	.word	0x080041d3
 80041b4:	080041e3 	.word	0x080041e3
 80041b8:	080041e3 	.word	0x080041e3
 80041bc:	080041e3 	.word	0x080041e3
 80041c0:	080041db 	.word	0x080041db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041c4:	f7ff f84c 	bl	8003260 <HAL_RCC_GetPCLK1Freq>
 80041c8:	61f8      	str	r0, [r7, #28]
        break;
 80041ca:	e010      	b.n	80041ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041cc:	4b8f      	ldr	r3, [pc, #572]	@ (800440c <UART_SetConfig+0x56c>)
 80041ce:	61fb      	str	r3, [r7, #28]
        break;
 80041d0:	e00d      	b.n	80041ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041d2:	f7fe ffad 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 80041d6:	61f8      	str	r0, [r7, #28]
        break;
 80041d8:	e009      	b.n	80041ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041de:	61fb      	str	r3, [r7, #28]
        break;
 80041e0:	e005      	b.n	80041ee <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80041ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 80fb 	beq.w	80043ec <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	4613      	mov	r3, r2
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	4413      	add	r3, r2
 8004200:	69fa      	ldr	r2, [r7, #28]
 8004202:	429a      	cmp	r2, r3
 8004204:	d305      	bcc.n	8004212 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800420c:	69fa      	ldr	r2, [r7, #28]
 800420e:	429a      	cmp	r2, r3
 8004210:	d903      	bls.n	800421a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004218:	e0e8      	b.n	80043ec <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	2200      	movs	r2, #0
 800421e:	461c      	mov	r4, r3
 8004220:	4615      	mov	r5, r2
 8004222:	f04f 0200 	mov.w	r2, #0
 8004226:	f04f 0300 	mov.w	r3, #0
 800422a:	022b      	lsls	r3, r5, #8
 800422c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004230:	0222      	lsls	r2, r4, #8
 8004232:	68f9      	ldr	r1, [r7, #12]
 8004234:	6849      	ldr	r1, [r1, #4]
 8004236:	0849      	lsrs	r1, r1, #1
 8004238:	2000      	movs	r0, #0
 800423a:	4688      	mov	r8, r1
 800423c:	4681      	mov	r9, r0
 800423e:	eb12 0a08 	adds.w	sl, r2, r8
 8004242:	eb43 0b09 	adc.w	fp, r3, r9
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	603b      	str	r3, [r7, #0]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004254:	4650      	mov	r0, sl
 8004256:	4659      	mov	r1, fp
 8004258:	f7fc f812 	bl	8000280 <__aeabi_uldivmod>
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	4613      	mov	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800426a:	d308      	bcc.n	800427e <UART_SetConfig+0x3de>
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004272:	d204      	bcs.n	800427e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	60da      	str	r2, [r3, #12]
 800427c:	e0b6      	b.n	80043ec <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004284:	e0b2      	b.n	80043ec <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800428e:	d15e      	bne.n	800434e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004290:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004294:	2b08      	cmp	r3, #8
 8004296:	d828      	bhi.n	80042ea <UART_SetConfig+0x44a>
 8004298:	a201      	add	r2, pc, #4	@ (adr r2, 80042a0 <UART_SetConfig+0x400>)
 800429a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429e:	bf00      	nop
 80042a0:	080042c5 	.word	0x080042c5
 80042a4:	080042cd 	.word	0x080042cd
 80042a8:	080042d5 	.word	0x080042d5
 80042ac:	080042eb 	.word	0x080042eb
 80042b0:	080042db 	.word	0x080042db
 80042b4:	080042eb 	.word	0x080042eb
 80042b8:	080042eb 	.word	0x080042eb
 80042bc:	080042eb 	.word	0x080042eb
 80042c0:	080042e3 	.word	0x080042e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042c4:	f7fe ffcc 	bl	8003260 <HAL_RCC_GetPCLK1Freq>
 80042c8:	61f8      	str	r0, [r7, #28]
        break;
 80042ca:	e014      	b.n	80042f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042cc:	f7fe ffde 	bl	800328c <HAL_RCC_GetPCLK2Freq>
 80042d0:	61f8      	str	r0, [r7, #28]
        break;
 80042d2:	e010      	b.n	80042f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042d4:	4b4d      	ldr	r3, [pc, #308]	@ (800440c <UART_SetConfig+0x56c>)
 80042d6:	61fb      	str	r3, [r7, #28]
        break;
 80042d8:	e00d      	b.n	80042f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042da:	f7fe ff29 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 80042de:	61f8      	str	r0, [r7, #28]
        break;
 80042e0:	e009      	b.n	80042f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042e6:	61fb      	str	r3, [r7, #28]
        break;
 80042e8:	e005      	b.n	80042f6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80042f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d077      	beq.n	80043ec <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	005a      	lsls	r2, r3, #1
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	085b      	lsrs	r3, r3, #1
 8004306:	441a      	add	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004310:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	2b0f      	cmp	r3, #15
 8004316:	d916      	bls.n	8004346 <UART_SetConfig+0x4a6>
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800431e:	d212      	bcs.n	8004346 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	b29b      	uxth	r3, r3
 8004324:	f023 030f 	bic.w	r3, r3, #15
 8004328:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	085b      	lsrs	r3, r3, #1
 800432e:	b29b      	uxth	r3, r3
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	b29a      	uxth	r2, r3
 8004336:	8afb      	ldrh	r3, [r7, #22]
 8004338:	4313      	orrs	r3, r2
 800433a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	8afa      	ldrh	r2, [r7, #22]
 8004342:	60da      	str	r2, [r3, #12]
 8004344:	e052      	b.n	80043ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800434c:	e04e      	b.n	80043ec <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800434e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004352:	2b08      	cmp	r3, #8
 8004354:	d827      	bhi.n	80043a6 <UART_SetConfig+0x506>
 8004356:	a201      	add	r2, pc, #4	@ (adr r2, 800435c <UART_SetConfig+0x4bc>)
 8004358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435c:	08004381 	.word	0x08004381
 8004360:	08004389 	.word	0x08004389
 8004364:	08004391 	.word	0x08004391
 8004368:	080043a7 	.word	0x080043a7
 800436c:	08004397 	.word	0x08004397
 8004370:	080043a7 	.word	0x080043a7
 8004374:	080043a7 	.word	0x080043a7
 8004378:	080043a7 	.word	0x080043a7
 800437c:	0800439f 	.word	0x0800439f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004380:	f7fe ff6e 	bl	8003260 <HAL_RCC_GetPCLK1Freq>
 8004384:	61f8      	str	r0, [r7, #28]
        break;
 8004386:	e014      	b.n	80043b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004388:	f7fe ff80 	bl	800328c <HAL_RCC_GetPCLK2Freq>
 800438c:	61f8      	str	r0, [r7, #28]
        break;
 800438e:	e010      	b.n	80043b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004390:	4b1e      	ldr	r3, [pc, #120]	@ (800440c <UART_SetConfig+0x56c>)
 8004392:	61fb      	str	r3, [r7, #28]
        break;
 8004394:	e00d      	b.n	80043b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004396:	f7fe fecb 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 800439a:	61f8      	str	r0, [r7, #28]
        break;
 800439c:	e009      	b.n	80043b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800439e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043a2:	61fb      	str	r3, [r7, #28]
        break;
 80043a4:	e005      	b.n	80043b2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80043b0:	bf00      	nop
    }

    if (pclk != 0U)
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d019      	beq.n	80043ec <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	085a      	lsrs	r2, r3, #1
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	441a      	add	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	2b0f      	cmp	r3, #15
 80043d0:	d909      	bls.n	80043e6 <UART_SetConfig+0x546>
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043d8:	d205      	bcs.n	80043e6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	60da      	str	r2, [r3, #12]
 80043e4:	e002      	b.n	80043ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80043f8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3728      	adds	r7, #40	@ 0x28
 8004400:	46bd      	mov	sp, r7
 8004402:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004406:	bf00      	nop
 8004408:	40008000 	.word	0x40008000
 800440c:	00f42400 	.word	0x00f42400

08004410 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a4:	f003 0310 	and.w	r3, r3, #16
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c6:	f003 0320 	and.w	r3, r3, #32
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01a      	beq.n	8004526 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800450e:	d10a      	bne.n	8004526 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	605a      	str	r2, [r3, #4]
  }
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b098      	sub	sp, #96	@ 0x60
 8004558:	af02      	add	r7, sp, #8
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004564:	f7fc fbaa 	bl	8000cbc <HAL_GetTick>
 8004568:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0308 	and.w	r3, r3, #8
 8004574:	2b08      	cmp	r3, #8
 8004576:	d12e      	bne.n	80045d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004578:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004580:	2200      	movs	r2, #0
 8004582:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f88c 	bl	80046a4 <UART_WaitOnFlagUntilTimeout>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d021      	beq.n	80045d6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800459a:	e853 3f00 	ldrex	r3, [r3]
 800459e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	461a      	mov	r2, r3
 80045ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80045b2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045b8:	e841 2300 	strex	r3, r2, [r1]
 80045bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1e6      	bne.n	8004592 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2220      	movs	r2, #32
 80045c8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e062      	b.n	800469c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d149      	bne.n	8004678 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045ec:	2200      	movs	r2, #0
 80045ee:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f856 	bl	80046a4 <UART_WaitOnFlagUntilTimeout>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d03c      	beq.n	8004678 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	623b      	str	r3, [r7, #32]
   return(result);
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004612:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	461a      	mov	r2, r3
 800461a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800461c:	633b      	str	r3, [r7, #48]	@ 0x30
 800461e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004620:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004622:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004624:	e841 2300 	strex	r3, r2, [r1]
 8004628:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800462a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e6      	bne.n	80045fe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3308      	adds	r3, #8
 8004636:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	e853 3f00 	ldrex	r3, [r3]
 800463e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0301 	bic.w	r3, r3, #1
 8004646:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3308      	adds	r3, #8
 800464e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004650:	61fa      	str	r2, [r7, #28]
 8004652:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004654:	69b9      	ldr	r1, [r7, #24]
 8004656:	69fa      	ldr	r2, [r7, #28]
 8004658:	e841 2300 	strex	r3, r2, [r1]
 800465c:	617b      	str	r3, [r7, #20]
   return(result);
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1e5      	bne.n	8004630 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2220      	movs	r2, #32
 8004668:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e011      	b.n	800469c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2220      	movs	r2, #32
 800467c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2220      	movs	r2, #32
 8004682:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3758      	adds	r7, #88	@ 0x58
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	603b      	str	r3, [r7, #0]
 80046b0:	4613      	mov	r3, r2
 80046b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b4:	e04f      	b.n	8004756 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046bc:	d04b      	beq.n	8004756 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046be:	f7fc fafd 	bl	8000cbc <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d302      	bcc.n	80046d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e04e      	b.n	8004776 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0304 	and.w	r3, r3, #4
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d037      	beq.n	8004756 <UART_WaitOnFlagUntilTimeout+0xb2>
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b80      	cmp	r3, #128	@ 0x80
 80046ea:	d034      	beq.n	8004756 <UART_WaitOnFlagUntilTimeout+0xb2>
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2b40      	cmp	r3, #64	@ 0x40
 80046f0:	d031      	beq.n	8004756 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	f003 0308 	and.w	r3, r3, #8
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d110      	bne.n	8004722 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2208      	movs	r2, #8
 8004706:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 f838 	bl	800477e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2208      	movs	r2, #8
 8004712:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e029      	b.n	8004776 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800472c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004730:	d111      	bne.n	8004756 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800473a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 f81e 	bl	800477e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2220      	movs	r2, #32
 8004746:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e00f      	b.n	8004776 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69da      	ldr	r2, [r3, #28]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	4013      	ands	r3, r2
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	429a      	cmp	r2, r3
 8004764:	bf0c      	ite	eq
 8004766:	2301      	moveq	r3, #1
 8004768:	2300      	movne	r3, #0
 800476a:	b2db      	uxtb	r3, r3
 800476c:	461a      	mov	r2, r3
 800476e:	79fb      	ldrb	r3, [r7, #7]
 8004770:	429a      	cmp	r2, r3
 8004772:	d0a0      	beq.n	80046b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800477e:	b480      	push	{r7}
 8004780:	b095      	sub	sp, #84	@ 0x54
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800478e:	e853 3f00 	ldrex	r3, [r3]
 8004792:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004796:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800479a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	461a      	mov	r2, r3
 80047a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80047a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047ac:	e841 2300 	strex	r3, r2, [r1]
 80047b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1e6      	bne.n	8004786 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3308      	adds	r3, #8
 80047be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	e853 3f00 	ldrex	r3, [r3]
 80047c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	f023 0301 	bic.w	r3, r3, #1
 80047ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3308      	adds	r3, #8
 80047d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047e0:	e841 2300 	strex	r3, r2, [r1]
 80047e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1e5      	bne.n	80047b8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d118      	bne.n	8004826 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	e853 3f00 	ldrex	r3, [r3]
 8004800:	60bb      	str	r3, [r7, #8]
   return(result);
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f023 0310 	bic.w	r3, r3, #16
 8004808:	647b      	str	r3, [r7, #68]	@ 0x44
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	461a      	mov	r2, r3
 8004810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004812:	61bb      	str	r3, [r7, #24]
 8004814:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004816:	6979      	ldr	r1, [r7, #20]
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	e841 2300 	strex	r3, r2, [r1]
 800481e:	613b      	str	r3, [r7, #16]
   return(result);
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1e6      	bne.n	80047f4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2220      	movs	r2, #32
 800482a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800483a:	bf00      	nop
 800483c:	3754      	adds	r7, #84	@ 0x54
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
	...

08004848 <siprintf>:
 8004848:	b40e      	push	{r1, r2, r3}
 800484a:	b500      	push	{lr}
 800484c:	b09c      	sub	sp, #112	@ 0x70
 800484e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004850:	9002      	str	r0, [sp, #8]
 8004852:	9006      	str	r0, [sp, #24]
 8004854:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004858:	4809      	ldr	r0, [pc, #36]	@ (8004880 <siprintf+0x38>)
 800485a:	9107      	str	r1, [sp, #28]
 800485c:	9104      	str	r1, [sp, #16]
 800485e:	4909      	ldr	r1, [pc, #36]	@ (8004884 <siprintf+0x3c>)
 8004860:	f853 2b04 	ldr.w	r2, [r3], #4
 8004864:	9105      	str	r1, [sp, #20]
 8004866:	6800      	ldr	r0, [r0, #0]
 8004868:	9301      	str	r3, [sp, #4]
 800486a:	a902      	add	r1, sp, #8
 800486c:	f000 f994 	bl	8004b98 <_svfiprintf_r>
 8004870:	9b02      	ldr	r3, [sp, #8]
 8004872:	2200      	movs	r2, #0
 8004874:	701a      	strb	r2, [r3, #0]
 8004876:	b01c      	add	sp, #112	@ 0x70
 8004878:	f85d eb04 	ldr.w	lr, [sp], #4
 800487c:	b003      	add	sp, #12
 800487e:	4770      	bx	lr
 8004880:	2000000c 	.word	0x2000000c
 8004884:	ffff0208 	.word	0xffff0208

08004888 <memset>:
 8004888:	4402      	add	r2, r0
 800488a:	4603      	mov	r3, r0
 800488c:	4293      	cmp	r3, r2
 800488e:	d100      	bne.n	8004892 <memset+0xa>
 8004890:	4770      	bx	lr
 8004892:	f803 1b01 	strb.w	r1, [r3], #1
 8004896:	e7f9      	b.n	800488c <memset+0x4>

08004898 <__errno>:
 8004898:	4b01      	ldr	r3, [pc, #4]	@ (80048a0 <__errno+0x8>)
 800489a:	6818      	ldr	r0, [r3, #0]
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	2000000c 	.word	0x2000000c

080048a4 <__libc_init_array>:
 80048a4:	b570      	push	{r4, r5, r6, lr}
 80048a6:	4d0d      	ldr	r5, [pc, #52]	@ (80048dc <__libc_init_array+0x38>)
 80048a8:	4c0d      	ldr	r4, [pc, #52]	@ (80048e0 <__libc_init_array+0x3c>)
 80048aa:	1b64      	subs	r4, r4, r5
 80048ac:	10a4      	asrs	r4, r4, #2
 80048ae:	2600      	movs	r6, #0
 80048b0:	42a6      	cmp	r6, r4
 80048b2:	d109      	bne.n	80048c8 <__libc_init_array+0x24>
 80048b4:	4d0b      	ldr	r5, [pc, #44]	@ (80048e4 <__libc_init_array+0x40>)
 80048b6:	4c0c      	ldr	r4, [pc, #48]	@ (80048e8 <__libc_init_array+0x44>)
 80048b8:	f000 fc66 	bl	8005188 <_init>
 80048bc:	1b64      	subs	r4, r4, r5
 80048be:	10a4      	asrs	r4, r4, #2
 80048c0:	2600      	movs	r6, #0
 80048c2:	42a6      	cmp	r6, r4
 80048c4:	d105      	bne.n	80048d2 <__libc_init_array+0x2e>
 80048c6:	bd70      	pop	{r4, r5, r6, pc}
 80048c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048cc:	4798      	blx	r3
 80048ce:	3601      	adds	r6, #1
 80048d0:	e7ee      	b.n	80048b0 <__libc_init_array+0xc>
 80048d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048d6:	4798      	blx	r3
 80048d8:	3601      	adds	r6, #1
 80048da:	e7f2      	b.n	80048c2 <__libc_init_array+0x1e>
 80048dc:	0800522c 	.word	0x0800522c
 80048e0:	0800522c 	.word	0x0800522c
 80048e4:	0800522c 	.word	0x0800522c
 80048e8:	08005230 	.word	0x08005230

080048ec <__retarget_lock_acquire_recursive>:
 80048ec:	4770      	bx	lr

080048ee <__retarget_lock_release_recursive>:
 80048ee:	4770      	bx	lr

080048f0 <_free_r>:
 80048f0:	b538      	push	{r3, r4, r5, lr}
 80048f2:	4605      	mov	r5, r0
 80048f4:	2900      	cmp	r1, #0
 80048f6:	d041      	beq.n	800497c <_free_r+0x8c>
 80048f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048fc:	1f0c      	subs	r4, r1, #4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	bfb8      	it	lt
 8004902:	18e4      	addlt	r4, r4, r3
 8004904:	f000 f8e0 	bl	8004ac8 <__malloc_lock>
 8004908:	4a1d      	ldr	r2, [pc, #116]	@ (8004980 <_free_r+0x90>)
 800490a:	6813      	ldr	r3, [r2, #0]
 800490c:	b933      	cbnz	r3, 800491c <_free_r+0x2c>
 800490e:	6063      	str	r3, [r4, #4]
 8004910:	6014      	str	r4, [r2, #0]
 8004912:	4628      	mov	r0, r5
 8004914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004918:	f000 b8dc 	b.w	8004ad4 <__malloc_unlock>
 800491c:	42a3      	cmp	r3, r4
 800491e:	d908      	bls.n	8004932 <_free_r+0x42>
 8004920:	6820      	ldr	r0, [r4, #0]
 8004922:	1821      	adds	r1, r4, r0
 8004924:	428b      	cmp	r3, r1
 8004926:	bf01      	itttt	eq
 8004928:	6819      	ldreq	r1, [r3, #0]
 800492a:	685b      	ldreq	r3, [r3, #4]
 800492c:	1809      	addeq	r1, r1, r0
 800492e:	6021      	streq	r1, [r4, #0]
 8004930:	e7ed      	b.n	800490e <_free_r+0x1e>
 8004932:	461a      	mov	r2, r3
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	b10b      	cbz	r3, 800493c <_free_r+0x4c>
 8004938:	42a3      	cmp	r3, r4
 800493a:	d9fa      	bls.n	8004932 <_free_r+0x42>
 800493c:	6811      	ldr	r1, [r2, #0]
 800493e:	1850      	adds	r0, r2, r1
 8004940:	42a0      	cmp	r0, r4
 8004942:	d10b      	bne.n	800495c <_free_r+0x6c>
 8004944:	6820      	ldr	r0, [r4, #0]
 8004946:	4401      	add	r1, r0
 8004948:	1850      	adds	r0, r2, r1
 800494a:	4283      	cmp	r3, r0
 800494c:	6011      	str	r1, [r2, #0]
 800494e:	d1e0      	bne.n	8004912 <_free_r+0x22>
 8004950:	6818      	ldr	r0, [r3, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	6053      	str	r3, [r2, #4]
 8004956:	4408      	add	r0, r1
 8004958:	6010      	str	r0, [r2, #0]
 800495a:	e7da      	b.n	8004912 <_free_r+0x22>
 800495c:	d902      	bls.n	8004964 <_free_r+0x74>
 800495e:	230c      	movs	r3, #12
 8004960:	602b      	str	r3, [r5, #0]
 8004962:	e7d6      	b.n	8004912 <_free_r+0x22>
 8004964:	6820      	ldr	r0, [r4, #0]
 8004966:	1821      	adds	r1, r4, r0
 8004968:	428b      	cmp	r3, r1
 800496a:	bf04      	itt	eq
 800496c:	6819      	ldreq	r1, [r3, #0]
 800496e:	685b      	ldreq	r3, [r3, #4]
 8004970:	6063      	str	r3, [r4, #4]
 8004972:	bf04      	itt	eq
 8004974:	1809      	addeq	r1, r1, r0
 8004976:	6021      	streq	r1, [r4, #0]
 8004978:	6054      	str	r4, [r2, #4]
 800497a:	e7ca      	b.n	8004912 <_free_r+0x22>
 800497c:	bd38      	pop	{r3, r4, r5, pc}
 800497e:	bf00      	nop
 8004980:	200002b0 	.word	0x200002b0

08004984 <sbrk_aligned>:
 8004984:	b570      	push	{r4, r5, r6, lr}
 8004986:	4e0f      	ldr	r6, [pc, #60]	@ (80049c4 <sbrk_aligned+0x40>)
 8004988:	460c      	mov	r4, r1
 800498a:	6831      	ldr	r1, [r6, #0]
 800498c:	4605      	mov	r5, r0
 800498e:	b911      	cbnz	r1, 8004996 <sbrk_aligned+0x12>
 8004990:	f000 fba6 	bl	80050e0 <_sbrk_r>
 8004994:	6030      	str	r0, [r6, #0]
 8004996:	4621      	mov	r1, r4
 8004998:	4628      	mov	r0, r5
 800499a:	f000 fba1 	bl	80050e0 <_sbrk_r>
 800499e:	1c43      	adds	r3, r0, #1
 80049a0:	d103      	bne.n	80049aa <sbrk_aligned+0x26>
 80049a2:	f04f 34ff 	mov.w	r4, #4294967295
 80049a6:	4620      	mov	r0, r4
 80049a8:	bd70      	pop	{r4, r5, r6, pc}
 80049aa:	1cc4      	adds	r4, r0, #3
 80049ac:	f024 0403 	bic.w	r4, r4, #3
 80049b0:	42a0      	cmp	r0, r4
 80049b2:	d0f8      	beq.n	80049a6 <sbrk_aligned+0x22>
 80049b4:	1a21      	subs	r1, r4, r0
 80049b6:	4628      	mov	r0, r5
 80049b8:	f000 fb92 	bl	80050e0 <_sbrk_r>
 80049bc:	3001      	adds	r0, #1
 80049be:	d1f2      	bne.n	80049a6 <sbrk_aligned+0x22>
 80049c0:	e7ef      	b.n	80049a2 <sbrk_aligned+0x1e>
 80049c2:	bf00      	nop
 80049c4:	200002ac 	.word	0x200002ac

080049c8 <_malloc_r>:
 80049c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049cc:	1ccd      	adds	r5, r1, #3
 80049ce:	f025 0503 	bic.w	r5, r5, #3
 80049d2:	3508      	adds	r5, #8
 80049d4:	2d0c      	cmp	r5, #12
 80049d6:	bf38      	it	cc
 80049d8:	250c      	movcc	r5, #12
 80049da:	2d00      	cmp	r5, #0
 80049dc:	4606      	mov	r6, r0
 80049de:	db01      	blt.n	80049e4 <_malloc_r+0x1c>
 80049e0:	42a9      	cmp	r1, r5
 80049e2:	d904      	bls.n	80049ee <_malloc_r+0x26>
 80049e4:	230c      	movs	r3, #12
 80049e6:	6033      	str	r3, [r6, #0]
 80049e8:	2000      	movs	r0, #0
 80049ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ac4 <_malloc_r+0xfc>
 80049f2:	f000 f869 	bl	8004ac8 <__malloc_lock>
 80049f6:	f8d8 3000 	ldr.w	r3, [r8]
 80049fa:	461c      	mov	r4, r3
 80049fc:	bb44      	cbnz	r4, 8004a50 <_malloc_r+0x88>
 80049fe:	4629      	mov	r1, r5
 8004a00:	4630      	mov	r0, r6
 8004a02:	f7ff ffbf 	bl	8004984 <sbrk_aligned>
 8004a06:	1c43      	adds	r3, r0, #1
 8004a08:	4604      	mov	r4, r0
 8004a0a:	d158      	bne.n	8004abe <_malloc_r+0xf6>
 8004a0c:	f8d8 4000 	ldr.w	r4, [r8]
 8004a10:	4627      	mov	r7, r4
 8004a12:	2f00      	cmp	r7, #0
 8004a14:	d143      	bne.n	8004a9e <_malloc_r+0xd6>
 8004a16:	2c00      	cmp	r4, #0
 8004a18:	d04b      	beq.n	8004ab2 <_malloc_r+0xea>
 8004a1a:	6823      	ldr	r3, [r4, #0]
 8004a1c:	4639      	mov	r1, r7
 8004a1e:	4630      	mov	r0, r6
 8004a20:	eb04 0903 	add.w	r9, r4, r3
 8004a24:	f000 fb5c 	bl	80050e0 <_sbrk_r>
 8004a28:	4581      	cmp	r9, r0
 8004a2a:	d142      	bne.n	8004ab2 <_malloc_r+0xea>
 8004a2c:	6821      	ldr	r1, [r4, #0]
 8004a2e:	1a6d      	subs	r5, r5, r1
 8004a30:	4629      	mov	r1, r5
 8004a32:	4630      	mov	r0, r6
 8004a34:	f7ff ffa6 	bl	8004984 <sbrk_aligned>
 8004a38:	3001      	adds	r0, #1
 8004a3a:	d03a      	beq.n	8004ab2 <_malloc_r+0xea>
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	442b      	add	r3, r5
 8004a40:	6023      	str	r3, [r4, #0]
 8004a42:	f8d8 3000 	ldr.w	r3, [r8]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	bb62      	cbnz	r2, 8004aa4 <_malloc_r+0xdc>
 8004a4a:	f8c8 7000 	str.w	r7, [r8]
 8004a4e:	e00f      	b.n	8004a70 <_malloc_r+0xa8>
 8004a50:	6822      	ldr	r2, [r4, #0]
 8004a52:	1b52      	subs	r2, r2, r5
 8004a54:	d420      	bmi.n	8004a98 <_malloc_r+0xd0>
 8004a56:	2a0b      	cmp	r2, #11
 8004a58:	d917      	bls.n	8004a8a <_malloc_r+0xc2>
 8004a5a:	1961      	adds	r1, r4, r5
 8004a5c:	42a3      	cmp	r3, r4
 8004a5e:	6025      	str	r5, [r4, #0]
 8004a60:	bf18      	it	ne
 8004a62:	6059      	strne	r1, [r3, #4]
 8004a64:	6863      	ldr	r3, [r4, #4]
 8004a66:	bf08      	it	eq
 8004a68:	f8c8 1000 	streq.w	r1, [r8]
 8004a6c:	5162      	str	r2, [r4, r5]
 8004a6e:	604b      	str	r3, [r1, #4]
 8004a70:	4630      	mov	r0, r6
 8004a72:	f000 f82f 	bl	8004ad4 <__malloc_unlock>
 8004a76:	f104 000b 	add.w	r0, r4, #11
 8004a7a:	1d23      	adds	r3, r4, #4
 8004a7c:	f020 0007 	bic.w	r0, r0, #7
 8004a80:	1ac2      	subs	r2, r0, r3
 8004a82:	bf1c      	itt	ne
 8004a84:	1a1b      	subne	r3, r3, r0
 8004a86:	50a3      	strne	r3, [r4, r2]
 8004a88:	e7af      	b.n	80049ea <_malloc_r+0x22>
 8004a8a:	6862      	ldr	r2, [r4, #4]
 8004a8c:	42a3      	cmp	r3, r4
 8004a8e:	bf0c      	ite	eq
 8004a90:	f8c8 2000 	streq.w	r2, [r8]
 8004a94:	605a      	strne	r2, [r3, #4]
 8004a96:	e7eb      	b.n	8004a70 <_malloc_r+0xa8>
 8004a98:	4623      	mov	r3, r4
 8004a9a:	6864      	ldr	r4, [r4, #4]
 8004a9c:	e7ae      	b.n	80049fc <_malloc_r+0x34>
 8004a9e:	463c      	mov	r4, r7
 8004aa0:	687f      	ldr	r7, [r7, #4]
 8004aa2:	e7b6      	b.n	8004a12 <_malloc_r+0x4a>
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	42a3      	cmp	r3, r4
 8004aaa:	d1fb      	bne.n	8004aa4 <_malloc_r+0xdc>
 8004aac:	2300      	movs	r3, #0
 8004aae:	6053      	str	r3, [r2, #4]
 8004ab0:	e7de      	b.n	8004a70 <_malloc_r+0xa8>
 8004ab2:	230c      	movs	r3, #12
 8004ab4:	6033      	str	r3, [r6, #0]
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	f000 f80c 	bl	8004ad4 <__malloc_unlock>
 8004abc:	e794      	b.n	80049e8 <_malloc_r+0x20>
 8004abe:	6005      	str	r5, [r0, #0]
 8004ac0:	e7d6      	b.n	8004a70 <_malloc_r+0xa8>
 8004ac2:	bf00      	nop
 8004ac4:	200002b0 	.word	0x200002b0

08004ac8 <__malloc_lock>:
 8004ac8:	4801      	ldr	r0, [pc, #4]	@ (8004ad0 <__malloc_lock+0x8>)
 8004aca:	f7ff bf0f 	b.w	80048ec <__retarget_lock_acquire_recursive>
 8004ace:	bf00      	nop
 8004ad0:	200002a8 	.word	0x200002a8

08004ad4 <__malloc_unlock>:
 8004ad4:	4801      	ldr	r0, [pc, #4]	@ (8004adc <__malloc_unlock+0x8>)
 8004ad6:	f7ff bf0a 	b.w	80048ee <__retarget_lock_release_recursive>
 8004ada:	bf00      	nop
 8004adc:	200002a8 	.word	0x200002a8

08004ae0 <__ssputs_r>:
 8004ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae4:	688e      	ldr	r6, [r1, #8]
 8004ae6:	461f      	mov	r7, r3
 8004ae8:	42be      	cmp	r6, r7
 8004aea:	680b      	ldr	r3, [r1, #0]
 8004aec:	4682      	mov	sl, r0
 8004aee:	460c      	mov	r4, r1
 8004af0:	4690      	mov	r8, r2
 8004af2:	d82d      	bhi.n	8004b50 <__ssputs_r+0x70>
 8004af4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004af8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004afc:	d026      	beq.n	8004b4c <__ssputs_r+0x6c>
 8004afe:	6965      	ldr	r5, [r4, #20]
 8004b00:	6909      	ldr	r1, [r1, #16]
 8004b02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b06:	eba3 0901 	sub.w	r9, r3, r1
 8004b0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b0e:	1c7b      	adds	r3, r7, #1
 8004b10:	444b      	add	r3, r9
 8004b12:	106d      	asrs	r5, r5, #1
 8004b14:	429d      	cmp	r5, r3
 8004b16:	bf38      	it	cc
 8004b18:	461d      	movcc	r5, r3
 8004b1a:	0553      	lsls	r3, r2, #21
 8004b1c:	d527      	bpl.n	8004b6e <__ssputs_r+0x8e>
 8004b1e:	4629      	mov	r1, r5
 8004b20:	f7ff ff52 	bl	80049c8 <_malloc_r>
 8004b24:	4606      	mov	r6, r0
 8004b26:	b360      	cbz	r0, 8004b82 <__ssputs_r+0xa2>
 8004b28:	6921      	ldr	r1, [r4, #16]
 8004b2a:	464a      	mov	r2, r9
 8004b2c:	f000 fae8 	bl	8005100 <memcpy>
 8004b30:	89a3      	ldrh	r3, [r4, #12]
 8004b32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004b36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b3a:	81a3      	strh	r3, [r4, #12]
 8004b3c:	6126      	str	r6, [r4, #16]
 8004b3e:	6165      	str	r5, [r4, #20]
 8004b40:	444e      	add	r6, r9
 8004b42:	eba5 0509 	sub.w	r5, r5, r9
 8004b46:	6026      	str	r6, [r4, #0]
 8004b48:	60a5      	str	r5, [r4, #8]
 8004b4a:	463e      	mov	r6, r7
 8004b4c:	42be      	cmp	r6, r7
 8004b4e:	d900      	bls.n	8004b52 <__ssputs_r+0x72>
 8004b50:	463e      	mov	r6, r7
 8004b52:	6820      	ldr	r0, [r4, #0]
 8004b54:	4632      	mov	r2, r6
 8004b56:	4641      	mov	r1, r8
 8004b58:	f000 faa8 	bl	80050ac <memmove>
 8004b5c:	68a3      	ldr	r3, [r4, #8]
 8004b5e:	1b9b      	subs	r3, r3, r6
 8004b60:	60a3      	str	r3, [r4, #8]
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	4433      	add	r3, r6
 8004b66:	6023      	str	r3, [r4, #0]
 8004b68:	2000      	movs	r0, #0
 8004b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b6e:	462a      	mov	r2, r5
 8004b70:	f000 fad4 	bl	800511c <_realloc_r>
 8004b74:	4606      	mov	r6, r0
 8004b76:	2800      	cmp	r0, #0
 8004b78:	d1e0      	bne.n	8004b3c <__ssputs_r+0x5c>
 8004b7a:	6921      	ldr	r1, [r4, #16]
 8004b7c:	4650      	mov	r0, sl
 8004b7e:	f7ff feb7 	bl	80048f0 <_free_r>
 8004b82:	230c      	movs	r3, #12
 8004b84:	f8ca 3000 	str.w	r3, [sl]
 8004b88:	89a3      	ldrh	r3, [r4, #12]
 8004b8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b8e:	81a3      	strh	r3, [r4, #12]
 8004b90:	f04f 30ff 	mov.w	r0, #4294967295
 8004b94:	e7e9      	b.n	8004b6a <__ssputs_r+0x8a>
	...

08004b98 <_svfiprintf_r>:
 8004b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b9c:	4698      	mov	r8, r3
 8004b9e:	898b      	ldrh	r3, [r1, #12]
 8004ba0:	061b      	lsls	r3, r3, #24
 8004ba2:	b09d      	sub	sp, #116	@ 0x74
 8004ba4:	4607      	mov	r7, r0
 8004ba6:	460d      	mov	r5, r1
 8004ba8:	4614      	mov	r4, r2
 8004baa:	d510      	bpl.n	8004bce <_svfiprintf_r+0x36>
 8004bac:	690b      	ldr	r3, [r1, #16]
 8004bae:	b973      	cbnz	r3, 8004bce <_svfiprintf_r+0x36>
 8004bb0:	2140      	movs	r1, #64	@ 0x40
 8004bb2:	f7ff ff09 	bl	80049c8 <_malloc_r>
 8004bb6:	6028      	str	r0, [r5, #0]
 8004bb8:	6128      	str	r0, [r5, #16]
 8004bba:	b930      	cbnz	r0, 8004bca <_svfiprintf_r+0x32>
 8004bbc:	230c      	movs	r3, #12
 8004bbe:	603b      	str	r3, [r7, #0]
 8004bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc4:	b01d      	add	sp, #116	@ 0x74
 8004bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bca:	2340      	movs	r3, #64	@ 0x40
 8004bcc:	616b      	str	r3, [r5, #20]
 8004bce:	2300      	movs	r3, #0
 8004bd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bd2:	2320      	movs	r3, #32
 8004bd4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004bd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bdc:	2330      	movs	r3, #48	@ 0x30
 8004bde:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004d7c <_svfiprintf_r+0x1e4>
 8004be2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004be6:	f04f 0901 	mov.w	r9, #1
 8004bea:	4623      	mov	r3, r4
 8004bec:	469a      	mov	sl, r3
 8004bee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bf2:	b10a      	cbz	r2, 8004bf8 <_svfiprintf_r+0x60>
 8004bf4:	2a25      	cmp	r2, #37	@ 0x25
 8004bf6:	d1f9      	bne.n	8004bec <_svfiprintf_r+0x54>
 8004bf8:	ebba 0b04 	subs.w	fp, sl, r4
 8004bfc:	d00b      	beq.n	8004c16 <_svfiprintf_r+0x7e>
 8004bfe:	465b      	mov	r3, fp
 8004c00:	4622      	mov	r2, r4
 8004c02:	4629      	mov	r1, r5
 8004c04:	4638      	mov	r0, r7
 8004c06:	f7ff ff6b 	bl	8004ae0 <__ssputs_r>
 8004c0a:	3001      	adds	r0, #1
 8004c0c:	f000 80a7 	beq.w	8004d5e <_svfiprintf_r+0x1c6>
 8004c10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c12:	445a      	add	r2, fp
 8004c14:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c16:	f89a 3000 	ldrb.w	r3, [sl]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 809f 	beq.w	8004d5e <_svfiprintf_r+0x1c6>
 8004c20:	2300      	movs	r3, #0
 8004c22:	f04f 32ff 	mov.w	r2, #4294967295
 8004c26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c2a:	f10a 0a01 	add.w	sl, sl, #1
 8004c2e:	9304      	str	r3, [sp, #16]
 8004c30:	9307      	str	r3, [sp, #28]
 8004c32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c36:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c38:	4654      	mov	r4, sl
 8004c3a:	2205      	movs	r2, #5
 8004c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c40:	484e      	ldr	r0, [pc, #312]	@ (8004d7c <_svfiprintf_r+0x1e4>)
 8004c42:	f7fb facd 	bl	80001e0 <memchr>
 8004c46:	9a04      	ldr	r2, [sp, #16]
 8004c48:	b9d8      	cbnz	r0, 8004c82 <_svfiprintf_r+0xea>
 8004c4a:	06d0      	lsls	r0, r2, #27
 8004c4c:	bf44      	itt	mi
 8004c4e:	2320      	movmi	r3, #32
 8004c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c54:	0711      	lsls	r1, r2, #28
 8004c56:	bf44      	itt	mi
 8004c58:	232b      	movmi	r3, #43	@ 0x2b
 8004c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c62:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c64:	d015      	beq.n	8004c92 <_svfiprintf_r+0xfa>
 8004c66:	9a07      	ldr	r2, [sp, #28]
 8004c68:	4654      	mov	r4, sl
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	f04f 0c0a 	mov.w	ip, #10
 8004c70:	4621      	mov	r1, r4
 8004c72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c76:	3b30      	subs	r3, #48	@ 0x30
 8004c78:	2b09      	cmp	r3, #9
 8004c7a:	d94b      	bls.n	8004d14 <_svfiprintf_r+0x17c>
 8004c7c:	b1b0      	cbz	r0, 8004cac <_svfiprintf_r+0x114>
 8004c7e:	9207      	str	r2, [sp, #28]
 8004c80:	e014      	b.n	8004cac <_svfiprintf_r+0x114>
 8004c82:	eba0 0308 	sub.w	r3, r0, r8
 8004c86:	fa09 f303 	lsl.w	r3, r9, r3
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	9304      	str	r3, [sp, #16]
 8004c8e:	46a2      	mov	sl, r4
 8004c90:	e7d2      	b.n	8004c38 <_svfiprintf_r+0xa0>
 8004c92:	9b03      	ldr	r3, [sp, #12]
 8004c94:	1d19      	adds	r1, r3, #4
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	9103      	str	r1, [sp, #12]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	bfbb      	ittet	lt
 8004c9e:	425b      	neglt	r3, r3
 8004ca0:	f042 0202 	orrlt.w	r2, r2, #2
 8004ca4:	9307      	strge	r3, [sp, #28]
 8004ca6:	9307      	strlt	r3, [sp, #28]
 8004ca8:	bfb8      	it	lt
 8004caa:	9204      	strlt	r2, [sp, #16]
 8004cac:	7823      	ldrb	r3, [r4, #0]
 8004cae:	2b2e      	cmp	r3, #46	@ 0x2e
 8004cb0:	d10a      	bne.n	8004cc8 <_svfiprintf_r+0x130>
 8004cb2:	7863      	ldrb	r3, [r4, #1]
 8004cb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cb6:	d132      	bne.n	8004d1e <_svfiprintf_r+0x186>
 8004cb8:	9b03      	ldr	r3, [sp, #12]
 8004cba:	1d1a      	adds	r2, r3, #4
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	9203      	str	r2, [sp, #12]
 8004cc0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004cc4:	3402      	adds	r4, #2
 8004cc6:	9305      	str	r3, [sp, #20]
 8004cc8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004d8c <_svfiprintf_r+0x1f4>
 8004ccc:	7821      	ldrb	r1, [r4, #0]
 8004cce:	2203      	movs	r2, #3
 8004cd0:	4650      	mov	r0, sl
 8004cd2:	f7fb fa85 	bl	80001e0 <memchr>
 8004cd6:	b138      	cbz	r0, 8004ce8 <_svfiprintf_r+0x150>
 8004cd8:	9b04      	ldr	r3, [sp, #16]
 8004cda:	eba0 000a 	sub.w	r0, r0, sl
 8004cde:	2240      	movs	r2, #64	@ 0x40
 8004ce0:	4082      	lsls	r2, r0
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	3401      	adds	r4, #1
 8004ce6:	9304      	str	r3, [sp, #16]
 8004ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cec:	4824      	ldr	r0, [pc, #144]	@ (8004d80 <_svfiprintf_r+0x1e8>)
 8004cee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004cf2:	2206      	movs	r2, #6
 8004cf4:	f7fb fa74 	bl	80001e0 <memchr>
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	d036      	beq.n	8004d6a <_svfiprintf_r+0x1d2>
 8004cfc:	4b21      	ldr	r3, [pc, #132]	@ (8004d84 <_svfiprintf_r+0x1ec>)
 8004cfe:	bb1b      	cbnz	r3, 8004d48 <_svfiprintf_r+0x1b0>
 8004d00:	9b03      	ldr	r3, [sp, #12]
 8004d02:	3307      	adds	r3, #7
 8004d04:	f023 0307 	bic.w	r3, r3, #7
 8004d08:	3308      	adds	r3, #8
 8004d0a:	9303      	str	r3, [sp, #12]
 8004d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d0e:	4433      	add	r3, r6
 8004d10:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d12:	e76a      	b.n	8004bea <_svfiprintf_r+0x52>
 8004d14:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d18:	460c      	mov	r4, r1
 8004d1a:	2001      	movs	r0, #1
 8004d1c:	e7a8      	b.n	8004c70 <_svfiprintf_r+0xd8>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	3401      	adds	r4, #1
 8004d22:	9305      	str	r3, [sp, #20]
 8004d24:	4619      	mov	r1, r3
 8004d26:	f04f 0c0a 	mov.w	ip, #10
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d30:	3a30      	subs	r2, #48	@ 0x30
 8004d32:	2a09      	cmp	r2, #9
 8004d34:	d903      	bls.n	8004d3e <_svfiprintf_r+0x1a6>
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0c6      	beq.n	8004cc8 <_svfiprintf_r+0x130>
 8004d3a:	9105      	str	r1, [sp, #20]
 8004d3c:	e7c4      	b.n	8004cc8 <_svfiprintf_r+0x130>
 8004d3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d42:	4604      	mov	r4, r0
 8004d44:	2301      	movs	r3, #1
 8004d46:	e7f0      	b.n	8004d2a <_svfiprintf_r+0x192>
 8004d48:	ab03      	add	r3, sp, #12
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	462a      	mov	r2, r5
 8004d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8004d88 <_svfiprintf_r+0x1f0>)
 8004d50:	a904      	add	r1, sp, #16
 8004d52:	4638      	mov	r0, r7
 8004d54:	f3af 8000 	nop.w
 8004d58:	1c42      	adds	r2, r0, #1
 8004d5a:	4606      	mov	r6, r0
 8004d5c:	d1d6      	bne.n	8004d0c <_svfiprintf_r+0x174>
 8004d5e:	89ab      	ldrh	r3, [r5, #12]
 8004d60:	065b      	lsls	r3, r3, #25
 8004d62:	f53f af2d 	bmi.w	8004bc0 <_svfiprintf_r+0x28>
 8004d66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d68:	e72c      	b.n	8004bc4 <_svfiprintf_r+0x2c>
 8004d6a:	ab03      	add	r3, sp, #12
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	462a      	mov	r2, r5
 8004d70:	4b05      	ldr	r3, [pc, #20]	@ (8004d88 <_svfiprintf_r+0x1f0>)
 8004d72:	a904      	add	r1, sp, #16
 8004d74:	4638      	mov	r0, r7
 8004d76:	f000 f879 	bl	8004e6c <_printf_i>
 8004d7a:	e7ed      	b.n	8004d58 <_svfiprintf_r+0x1c0>
 8004d7c:	080051f0 	.word	0x080051f0
 8004d80:	080051fa 	.word	0x080051fa
 8004d84:	00000000 	.word	0x00000000
 8004d88:	08004ae1 	.word	0x08004ae1
 8004d8c:	080051f6 	.word	0x080051f6

08004d90 <_printf_common>:
 8004d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d94:	4616      	mov	r6, r2
 8004d96:	4698      	mov	r8, r3
 8004d98:	688a      	ldr	r2, [r1, #8]
 8004d9a:	690b      	ldr	r3, [r1, #16]
 8004d9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004da0:	4293      	cmp	r3, r2
 8004da2:	bfb8      	it	lt
 8004da4:	4613      	movlt	r3, r2
 8004da6:	6033      	str	r3, [r6, #0]
 8004da8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004dac:	4607      	mov	r7, r0
 8004dae:	460c      	mov	r4, r1
 8004db0:	b10a      	cbz	r2, 8004db6 <_printf_common+0x26>
 8004db2:	3301      	adds	r3, #1
 8004db4:	6033      	str	r3, [r6, #0]
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	0699      	lsls	r1, r3, #26
 8004dba:	bf42      	ittt	mi
 8004dbc:	6833      	ldrmi	r3, [r6, #0]
 8004dbe:	3302      	addmi	r3, #2
 8004dc0:	6033      	strmi	r3, [r6, #0]
 8004dc2:	6825      	ldr	r5, [r4, #0]
 8004dc4:	f015 0506 	ands.w	r5, r5, #6
 8004dc8:	d106      	bne.n	8004dd8 <_printf_common+0x48>
 8004dca:	f104 0a19 	add.w	sl, r4, #25
 8004dce:	68e3      	ldr	r3, [r4, #12]
 8004dd0:	6832      	ldr	r2, [r6, #0]
 8004dd2:	1a9b      	subs	r3, r3, r2
 8004dd4:	42ab      	cmp	r3, r5
 8004dd6:	dc26      	bgt.n	8004e26 <_printf_common+0x96>
 8004dd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ddc:	6822      	ldr	r2, [r4, #0]
 8004dde:	3b00      	subs	r3, #0
 8004de0:	bf18      	it	ne
 8004de2:	2301      	movne	r3, #1
 8004de4:	0692      	lsls	r2, r2, #26
 8004de6:	d42b      	bmi.n	8004e40 <_printf_common+0xb0>
 8004de8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004dec:	4641      	mov	r1, r8
 8004dee:	4638      	mov	r0, r7
 8004df0:	47c8      	blx	r9
 8004df2:	3001      	adds	r0, #1
 8004df4:	d01e      	beq.n	8004e34 <_printf_common+0xa4>
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	6922      	ldr	r2, [r4, #16]
 8004dfa:	f003 0306 	and.w	r3, r3, #6
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	bf02      	ittt	eq
 8004e02:	68e5      	ldreq	r5, [r4, #12]
 8004e04:	6833      	ldreq	r3, [r6, #0]
 8004e06:	1aed      	subeq	r5, r5, r3
 8004e08:	68a3      	ldr	r3, [r4, #8]
 8004e0a:	bf0c      	ite	eq
 8004e0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e10:	2500      	movne	r5, #0
 8004e12:	4293      	cmp	r3, r2
 8004e14:	bfc4      	itt	gt
 8004e16:	1a9b      	subgt	r3, r3, r2
 8004e18:	18ed      	addgt	r5, r5, r3
 8004e1a:	2600      	movs	r6, #0
 8004e1c:	341a      	adds	r4, #26
 8004e1e:	42b5      	cmp	r5, r6
 8004e20:	d11a      	bne.n	8004e58 <_printf_common+0xc8>
 8004e22:	2000      	movs	r0, #0
 8004e24:	e008      	b.n	8004e38 <_printf_common+0xa8>
 8004e26:	2301      	movs	r3, #1
 8004e28:	4652      	mov	r2, sl
 8004e2a:	4641      	mov	r1, r8
 8004e2c:	4638      	mov	r0, r7
 8004e2e:	47c8      	blx	r9
 8004e30:	3001      	adds	r0, #1
 8004e32:	d103      	bne.n	8004e3c <_printf_common+0xac>
 8004e34:	f04f 30ff 	mov.w	r0, #4294967295
 8004e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e3c:	3501      	adds	r5, #1
 8004e3e:	e7c6      	b.n	8004dce <_printf_common+0x3e>
 8004e40:	18e1      	adds	r1, r4, r3
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	2030      	movs	r0, #48	@ 0x30
 8004e46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e4a:	4422      	add	r2, r4
 8004e4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e54:	3302      	adds	r3, #2
 8004e56:	e7c7      	b.n	8004de8 <_printf_common+0x58>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	4622      	mov	r2, r4
 8004e5c:	4641      	mov	r1, r8
 8004e5e:	4638      	mov	r0, r7
 8004e60:	47c8      	blx	r9
 8004e62:	3001      	adds	r0, #1
 8004e64:	d0e6      	beq.n	8004e34 <_printf_common+0xa4>
 8004e66:	3601      	adds	r6, #1
 8004e68:	e7d9      	b.n	8004e1e <_printf_common+0x8e>
	...

08004e6c <_printf_i>:
 8004e6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e70:	7e0f      	ldrb	r7, [r1, #24]
 8004e72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e74:	2f78      	cmp	r7, #120	@ 0x78
 8004e76:	4691      	mov	r9, r2
 8004e78:	4680      	mov	r8, r0
 8004e7a:	460c      	mov	r4, r1
 8004e7c:	469a      	mov	sl, r3
 8004e7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e82:	d807      	bhi.n	8004e94 <_printf_i+0x28>
 8004e84:	2f62      	cmp	r7, #98	@ 0x62
 8004e86:	d80a      	bhi.n	8004e9e <_printf_i+0x32>
 8004e88:	2f00      	cmp	r7, #0
 8004e8a:	f000 80d2 	beq.w	8005032 <_printf_i+0x1c6>
 8004e8e:	2f58      	cmp	r7, #88	@ 0x58
 8004e90:	f000 80b9 	beq.w	8005006 <_printf_i+0x19a>
 8004e94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e9c:	e03a      	b.n	8004f14 <_printf_i+0xa8>
 8004e9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ea2:	2b15      	cmp	r3, #21
 8004ea4:	d8f6      	bhi.n	8004e94 <_printf_i+0x28>
 8004ea6:	a101      	add	r1, pc, #4	@ (adr r1, 8004eac <_printf_i+0x40>)
 8004ea8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004eac:	08004f05 	.word	0x08004f05
 8004eb0:	08004f19 	.word	0x08004f19
 8004eb4:	08004e95 	.word	0x08004e95
 8004eb8:	08004e95 	.word	0x08004e95
 8004ebc:	08004e95 	.word	0x08004e95
 8004ec0:	08004e95 	.word	0x08004e95
 8004ec4:	08004f19 	.word	0x08004f19
 8004ec8:	08004e95 	.word	0x08004e95
 8004ecc:	08004e95 	.word	0x08004e95
 8004ed0:	08004e95 	.word	0x08004e95
 8004ed4:	08004e95 	.word	0x08004e95
 8004ed8:	08005019 	.word	0x08005019
 8004edc:	08004f43 	.word	0x08004f43
 8004ee0:	08004fd3 	.word	0x08004fd3
 8004ee4:	08004e95 	.word	0x08004e95
 8004ee8:	08004e95 	.word	0x08004e95
 8004eec:	0800503b 	.word	0x0800503b
 8004ef0:	08004e95 	.word	0x08004e95
 8004ef4:	08004f43 	.word	0x08004f43
 8004ef8:	08004e95 	.word	0x08004e95
 8004efc:	08004e95 	.word	0x08004e95
 8004f00:	08004fdb 	.word	0x08004fdb
 8004f04:	6833      	ldr	r3, [r6, #0]
 8004f06:	1d1a      	adds	r2, r3, #4
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6032      	str	r2, [r6, #0]
 8004f0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f14:	2301      	movs	r3, #1
 8004f16:	e09d      	b.n	8005054 <_printf_i+0x1e8>
 8004f18:	6833      	ldr	r3, [r6, #0]
 8004f1a:	6820      	ldr	r0, [r4, #0]
 8004f1c:	1d19      	adds	r1, r3, #4
 8004f1e:	6031      	str	r1, [r6, #0]
 8004f20:	0606      	lsls	r6, r0, #24
 8004f22:	d501      	bpl.n	8004f28 <_printf_i+0xbc>
 8004f24:	681d      	ldr	r5, [r3, #0]
 8004f26:	e003      	b.n	8004f30 <_printf_i+0xc4>
 8004f28:	0645      	lsls	r5, r0, #25
 8004f2a:	d5fb      	bpl.n	8004f24 <_printf_i+0xb8>
 8004f2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f30:	2d00      	cmp	r5, #0
 8004f32:	da03      	bge.n	8004f3c <_printf_i+0xd0>
 8004f34:	232d      	movs	r3, #45	@ 0x2d
 8004f36:	426d      	negs	r5, r5
 8004f38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f3c:	4859      	ldr	r0, [pc, #356]	@ (80050a4 <_printf_i+0x238>)
 8004f3e:	230a      	movs	r3, #10
 8004f40:	e011      	b.n	8004f66 <_printf_i+0xfa>
 8004f42:	6821      	ldr	r1, [r4, #0]
 8004f44:	6833      	ldr	r3, [r6, #0]
 8004f46:	0608      	lsls	r0, r1, #24
 8004f48:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f4c:	d402      	bmi.n	8004f54 <_printf_i+0xe8>
 8004f4e:	0649      	lsls	r1, r1, #25
 8004f50:	bf48      	it	mi
 8004f52:	b2ad      	uxthmi	r5, r5
 8004f54:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f56:	4853      	ldr	r0, [pc, #332]	@ (80050a4 <_printf_i+0x238>)
 8004f58:	6033      	str	r3, [r6, #0]
 8004f5a:	bf14      	ite	ne
 8004f5c:	230a      	movne	r3, #10
 8004f5e:	2308      	moveq	r3, #8
 8004f60:	2100      	movs	r1, #0
 8004f62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f66:	6866      	ldr	r6, [r4, #4]
 8004f68:	60a6      	str	r6, [r4, #8]
 8004f6a:	2e00      	cmp	r6, #0
 8004f6c:	bfa2      	ittt	ge
 8004f6e:	6821      	ldrge	r1, [r4, #0]
 8004f70:	f021 0104 	bicge.w	r1, r1, #4
 8004f74:	6021      	strge	r1, [r4, #0]
 8004f76:	b90d      	cbnz	r5, 8004f7c <_printf_i+0x110>
 8004f78:	2e00      	cmp	r6, #0
 8004f7a:	d04b      	beq.n	8005014 <_printf_i+0x1a8>
 8004f7c:	4616      	mov	r6, r2
 8004f7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f82:	fb03 5711 	mls	r7, r3, r1, r5
 8004f86:	5dc7      	ldrb	r7, [r0, r7]
 8004f88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f8c:	462f      	mov	r7, r5
 8004f8e:	42bb      	cmp	r3, r7
 8004f90:	460d      	mov	r5, r1
 8004f92:	d9f4      	bls.n	8004f7e <_printf_i+0x112>
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d10b      	bne.n	8004fb0 <_printf_i+0x144>
 8004f98:	6823      	ldr	r3, [r4, #0]
 8004f9a:	07df      	lsls	r7, r3, #31
 8004f9c:	d508      	bpl.n	8004fb0 <_printf_i+0x144>
 8004f9e:	6923      	ldr	r3, [r4, #16]
 8004fa0:	6861      	ldr	r1, [r4, #4]
 8004fa2:	4299      	cmp	r1, r3
 8004fa4:	bfde      	ittt	le
 8004fa6:	2330      	movle	r3, #48	@ 0x30
 8004fa8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004fac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004fb0:	1b92      	subs	r2, r2, r6
 8004fb2:	6122      	str	r2, [r4, #16]
 8004fb4:	f8cd a000 	str.w	sl, [sp]
 8004fb8:	464b      	mov	r3, r9
 8004fba:	aa03      	add	r2, sp, #12
 8004fbc:	4621      	mov	r1, r4
 8004fbe:	4640      	mov	r0, r8
 8004fc0:	f7ff fee6 	bl	8004d90 <_printf_common>
 8004fc4:	3001      	adds	r0, #1
 8004fc6:	d14a      	bne.n	800505e <_printf_i+0x1f2>
 8004fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fcc:	b004      	add	sp, #16
 8004fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	f043 0320 	orr.w	r3, r3, #32
 8004fd8:	6023      	str	r3, [r4, #0]
 8004fda:	4833      	ldr	r0, [pc, #204]	@ (80050a8 <_printf_i+0x23c>)
 8004fdc:	2778      	movs	r7, #120	@ 0x78
 8004fde:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	6831      	ldr	r1, [r6, #0]
 8004fe6:	061f      	lsls	r7, r3, #24
 8004fe8:	f851 5b04 	ldr.w	r5, [r1], #4
 8004fec:	d402      	bmi.n	8004ff4 <_printf_i+0x188>
 8004fee:	065f      	lsls	r7, r3, #25
 8004ff0:	bf48      	it	mi
 8004ff2:	b2ad      	uxthmi	r5, r5
 8004ff4:	6031      	str	r1, [r6, #0]
 8004ff6:	07d9      	lsls	r1, r3, #31
 8004ff8:	bf44      	itt	mi
 8004ffa:	f043 0320 	orrmi.w	r3, r3, #32
 8004ffe:	6023      	strmi	r3, [r4, #0]
 8005000:	b11d      	cbz	r5, 800500a <_printf_i+0x19e>
 8005002:	2310      	movs	r3, #16
 8005004:	e7ac      	b.n	8004f60 <_printf_i+0xf4>
 8005006:	4827      	ldr	r0, [pc, #156]	@ (80050a4 <_printf_i+0x238>)
 8005008:	e7e9      	b.n	8004fde <_printf_i+0x172>
 800500a:	6823      	ldr	r3, [r4, #0]
 800500c:	f023 0320 	bic.w	r3, r3, #32
 8005010:	6023      	str	r3, [r4, #0]
 8005012:	e7f6      	b.n	8005002 <_printf_i+0x196>
 8005014:	4616      	mov	r6, r2
 8005016:	e7bd      	b.n	8004f94 <_printf_i+0x128>
 8005018:	6833      	ldr	r3, [r6, #0]
 800501a:	6825      	ldr	r5, [r4, #0]
 800501c:	6961      	ldr	r1, [r4, #20]
 800501e:	1d18      	adds	r0, r3, #4
 8005020:	6030      	str	r0, [r6, #0]
 8005022:	062e      	lsls	r6, r5, #24
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	d501      	bpl.n	800502c <_printf_i+0x1c0>
 8005028:	6019      	str	r1, [r3, #0]
 800502a:	e002      	b.n	8005032 <_printf_i+0x1c6>
 800502c:	0668      	lsls	r0, r5, #25
 800502e:	d5fb      	bpl.n	8005028 <_printf_i+0x1bc>
 8005030:	8019      	strh	r1, [r3, #0]
 8005032:	2300      	movs	r3, #0
 8005034:	6123      	str	r3, [r4, #16]
 8005036:	4616      	mov	r6, r2
 8005038:	e7bc      	b.n	8004fb4 <_printf_i+0x148>
 800503a:	6833      	ldr	r3, [r6, #0]
 800503c:	1d1a      	adds	r2, r3, #4
 800503e:	6032      	str	r2, [r6, #0]
 8005040:	681e      	ldr	r6, [r3, #0]
 8005042:	6862      	ldr	r2, [r4, #4]
 8005044:	2100      	movs	r1, #0
 8005046:	4630      	mov	r0, r6
 8005048:	f7fb f8ca 	bl	80001e0 <memchr>
 800504c:	b108      	cbz	r0, 8005052 <_printf_i+0x1e6>
 800504e:	1b80      	subs	r0, r0, r6
 8005050:	6060      	str	r0, [r4, #4]
 8005052:	6863      	ldr	r3, [r4, #4]
 8005054:	6123      	str	r3, [r4, #16]
 8005056:	2300      	movs	r3, #0
 8005058:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800505c:	e7aa      	b.n	8004fb4 <_printf_i+0x148>
 800505e:	6923      	ldr	r3, [r4, #16]
 8005060:	4632      	mov	r2, r6
 8005062:	4649      	mov	r1, r9
 8005064:	4640      	mov	r0, r8
 8005066:	47d0      	blx	sl
 8005068:	3001      	adds	r0, #1
 800506a:	d0ad      	beq.n	8004fc8 <_printf_i+0x15c>
 800506c:	6823      	ldr	r3, [r4, #0]
 800506e:	079b      	lsls	r3, r3, #30
 8005070:	d413      	bmi.n	800509a <_printf_i+0x22e>
 8005072:	68e0      	ldr	r0, [r4, #12]
 8005074:	9b03      	ldr	r3, [sp, #12]
 8005076:	4298      	cmp	r0, r3
 8005078:	bfb8      	it	lt
 800507a:	4618      	movlt	r0, r3
 800507c:	e7a6      	b.n	8004fcc <_printf_i+0x160>
 800507e:	2301      	movs	r3, #1
 8005080:	4632      	mov	r2, r6
 8005082:	4649      	mov	r1, r9
 8005084:	4640      	mov	r0, r8
 8005086:	47d0      	blx	sl
 8005088:	3001      	adds	r0, #1
 800508a:	d09d      	beq.n	8004fc8 <_printf_i+0x15c>
 800508c:	3501      	adds	r5, #1
 800508e:	68e3      	ldr	r3, [r4, #12]
 8005090:	9903      	ldr	r1, [sp, #12]
 8005092:	1a5b      	subs	r3, r3, r1
 8005094:	42ab      	cmp	r3, r5
 8005096:	dcf2      	bgt.n	800507e <_printf_i+0x212>
 8005098:	e7eb      	b.n	8005072 <_printf_i+0x206>
 800509a:	2500      	movs	r5, #0
 800509c:	f104 0619 	add.w	r6, r4, #25
 80050a0:	e7f5      	b.n	800508e <_printf_i+0x222>
 80050a2:	bf00      	nop
 80050a4:	08005201 	.word	0x08005201
 80050a8:	08005212 	.word	0x08005212

080050ac <memmove>:
 80050ac:	4288      	cmp	r0, r1
 80050ae:	b510      	push	{r4, lr}
 80050b0:	eb01 0402 	add.w	r4, r1, r2
 80050b4:	d902      	bls.n	80050bc <memmove+0x10>
 80050b6:	4284      	cmp	r4, r0
 80050b8:	4623      	mov	r3, r4
 80050ba:	d807      	bhi.n	80050cc <memmove+0x20>
 80050bc:	1e43      	subs	r3, r0, #1
 80050be:	42a1      	cmp	r1, r4
 80050c0:	d008      	beq.n	80050d4 <memmove+0x28>
 80050c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050ca:	e7f8      	b.n	80050be <memmove+0x12>
 80050cc:	4402      	add	r2, r0
 80050ce:	4601      	mov	r1, r0
 80050d0:	428a      	cmp	r2, r1
 80050d2:	d100      	bne.n	80050d6 <memmove+0x2a>
 80050d4:	bd10      	pop	{r4, pc}
 80050d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050de:	e7f7      	b.n	80050d0 <memmove+0x24>

080050e0 <_sbrk_r>:
 80050e0:	b538      	push	{r3, r4, r5, lr}
 80050e2:	4d06      	ldr	r5, [pc, #24]	@ (80050fc <_sbrk_r+0x1c>)
 80050e4:	2300      	movs	r3, #0
 80050e6:	4604      	mov	r4, r0
 80050e8:	4608      	mov	r0, r1
 80050ea:	602b      	str	r3, [r5, #0]
 80050ec:	f7fb fd04 	bl	8000af8 <_sbrk>
 80050f0:	1c43      	adds	r3, r0, #1
 80050f2:	d102      	bne.n	80050fa <_sbrk_r+0x1a>
 80050f4:	682b      	ldr	r3, [r5, #0]
 80050f6:	b103      	cbz	r3, 80050fa <_sbrk_r+0x1a>
 80050f8:	6023      	str	r3, [r4, #0]
 80050fa:	bd38      	pop	{r3, r4, r5, pc}
 80050fc:	200002a4 	.word	0x200002a4

08005100 <memcpy>:
 8005100:	440a      	add	r2, r1
 8005102:	4291      	cmp	r1, r2
 8005104:	f100 33ff 	add.w	r3, r0, #4294967295
 8005108:	d100      	bne.n	800510c <memcpy+0xc>
 800510a:	4770      	bx	lr
 800510c:	b510      	push	{r4, lr}
 800510e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005112:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005116:	4291      	cmp	r1, r2
 8005118:	d1f9      	bne.n	800510e <memcpy+0xe>
 800511a:	bd10      	pop	{r4, pc}

0800511c <_realloc_r>:
 800511c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005120:	4680      	mov	r8, r0
 8005122:	4615      	mov	r5, r2
 8005124:	460c      	mov	r4, r1
 8005126:	b921      	cbnz	r1, 8005132 <_realloc_r+0x16>
 8005128:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800512c:	4611      	mov	r1, r2
 800512e:	f7ff bc4b 	b.w	80049c8 <_malloc_r>
 8005132:	b92a      	cbnz	r2, 8005140 <_realloc_r+0x24>
 8005134:	f7ff fbdc 	bl	80048f0 <_free_r>
 8005138:	2400      	movs	r4, #0
 800513a:	4620      	mov	r0, r4
 800513c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005140:	f000 f81a 	bl	8005178 <_malloc_usable_size_r>
 8005144:	4285      	cmp	r5, r0
 8005146:	4606      	mov	r6, r0
 8005148:	d802      	bhi.n	8005150 <_realloc_r+0x34>
 800514a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800514e:	d8f4      	bhi.n	800513a <_realloc_r+0x1e>
 8005150:	4629      	mov	r1, r5
 8005152:	4640      	mov	r0, r8
 8005154:	f7ff fc38 	bl	80049c8 <_malloc_r>
 8005158:	4607      	mov	r7, r0
 800515a:	2800      	cmp	r0, #0
 800515c:	d0ec      	beq.n	8005138 <_realloc_r+0x1c>
 800515e:	42b5      	cmp	r5, r6
 8005160:	462a      	mov	r2, r5
 8005162:	4621      	mov	r1, r4
 8005164:	bf28      	it	cs
 8005166:	4632      	movcs	r2, r6
 8005168:	f7ff ffca 	bl	8005100 <memcpy>
 800516c:	4621      	mov	r1, r4
 800516e:	4640      	mov	r0, r8
 8005170:	f7ff fbbe 	bl	80048f0 <_free_r>
 8005174:	463c      	mov	r4, r7
 8005176:	e7e0      	b.n	800513a <_realloc_r+0x1e>

08005178 <_malloc_usable_size_r>:
 8005178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800517c:	1f18      	subs	r0, r3, #4
 800517e:	2b00      	cmp	r3, #0
 8005180:	bfbc      	itt	lt
 8005182:	580b      	ldrlt	r3, [r1, r0]
 8005184:	18c0      	addlt	r0, r0, r3
 8005186:	4770      	bx	lr

08005188 <_init>:
 8005188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518a:	bf00      	nop
 800518c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800518e:	bc08      	pop	{r3}
 8005190:	469e      	mov	lr, r3
 8005192:	4770      	bx	lr

08005194 <_fini>:
 8005194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005196:	bf00      	nop
 8005198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800519a:	bc08      	pop	{r3}
 800519c:	469e      	mov	lr, r3
 800519e:	4770      	bx	lr
